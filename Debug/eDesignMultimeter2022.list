
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006db4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08006f48  08006f48  00016f48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fb8  08006fb8  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08006fb8  08006fb8  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fb8  08006fb8  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08006fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b8c  2000001c  08006fdc  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba8  08006fdc  00020ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016ea3  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bae  00000000  00000000  00036eef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001108  00000000  00000000  00039aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe0  00000000  00000000  0003aba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227af  00000000  00000000  0003bb88  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011942  00000000  00000000  0005e337  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4f15  00000000  00000000  0006fc79  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00144b8e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000046c0  00000000  00000000  00144c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000001c 	.word	0x2000001c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006f30 	.word	0x08006f30

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000020 	.word	0x20000020
 80001d0:	08006f30 	.word	0x08006f30

080001d4 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b086      	sub	sp, #24
 80001d8:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 80001da:	4b61      	ldr	r3, [pc, #388]	; (8000360 <ADC_Main_Function+0x18c>)
 80001dc:	881b      	ldrh	r3, [r3, #0]
 80001de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001e2:	d370      	bcc.n	80002c6 <ADC_Main_Function+0xf2>
	{
	  // Do calculations every 1000 readings
	  adc_count = 0;
 80001e4:	4b5e      	ldr	r3, [pc, #376]	; (8000360 <ADC_Main_Function+0x18c>)
 80001e6:	2200      	movs	r2, #0
 80001e8:	801a      	strh	r2, [r3, #0]
	  uint32_t total = 0;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]
	  uint16_t max = 0;
 80001ee:	2300      	movs	r3, #0
 80001f0:	827b      	strh	r3, [r7, #18]
	  uint16_t min = adc_array[99]; // arbitrary value
 80001f2:	4b5c      	ldr	r3, [pc, #368]	; (8000364 <ADC_Main_Function+0x190>)
 80001f4:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 80001f8:	823b      	strh	r3, [r7, #16]
	  int16_t diff = 0;
 80001fa:	2300      	movs	r3, #0
 80001fc:	807b      	strh	r3, [r7, #2]
	  int16_t prev_diff = 0;
 80001fe:	2300      	movs	r3, #0
 8000200:	81fb      	strh	r3, [r7, #14]
	  uint16_t mid_passes = 0;
 8000202:	2300      	movs	r3, #0
 8000204:	81bb      	strh	r3, [r7, #12]
	  // 1000 measurements at 5kHz take 200ms
	  for(int x = 0; x < 1000; x++)
 8000206:	2300      	movs	r3, #0
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	e023      	b.n	8000254 <ADC_Main_Function+0x80>
	  {
		  total += adc_array[x];
 800020c:	4a55      	ldr	r2, [pc, #340]	; (8000364 <ADC_Main_Function+0x190>)
 800020e:	68bb      	ldr	r3, [r7, #8]
 8000210:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000214:	461a      	mov	r2, r3
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	4413      	add	r3, r2
 800021a:	617b      	str	r3, [r7, #20]
		  if(adc_array[x] > max)
 800021c:	4a51      	ldr	r2, [pc, #324]	; (8000364 <ADC_Main_Function+0x190>)
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000224:	8a7a      	ldrh	r2, [r7, #18]
 8000226:	429a      	cmp	r2, r3
 8000228:	d205      	bcs.n	8000236 <ADC_Main_Function+0x62>
		  {
			  max = adc_array[x];
 800022a:	4a4e      	ldr	r2, [pc, #312]	; (8000364 <ADC_Main_Function+0x190>)
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000232:	827b      	strh	r3, [r7, #18]
 8000234:	e00b      	b.n	800024e <ADC_Main_Function+0x7a>
		  }
		  else if(adc_array[x] < min)
 8000236:	4a4b      	ldr	r2, [pc, #300]	; (8000364 <ADC_Main_Function+0x190>)
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800023e:	8a3a      	ldrh	r2, [r7, #16]
 8000240:	429a      	cmp	r2, r3
 8000242:	d904      	bls.n	800024e <ADC_Main_Function+0x7a>
		  {
			  min = adc_array[x];
 8000244:	4a47      	ldr	r2, [pc, #284]	; (8000364 <ADC_Main_Function+0x190>)
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800024c:	823b      	strh	r3, [r7, #16]
	  for(int x = 0; x < 1000; x++)
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	3301      	adds	r3, #1
 8000252:	60bb      	str	r3, [r7, #8]
 8000254:	68bb      	ldr	r3, [r7, #8]
 8000256:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800025a:	dbd7      	blt.n	800020c <ADC_Main_Function+0x38>
		  }
	  }
	//			  measured_offset = total/1000;
	  MeasurementState.Offset = 1000;
 800025c:	4b42      	ldr	r3, [pc, #264]	; (8000368 <ADC_Main_Function+0x194>)
 800025e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000262:	811a      	strh	r2, [r3, #8]
	  for(int x = 0; x < 1000; x++)
 8000264:	2300      	movs	r3, #0
 8000266:	607b      	str	r3, [r7, #4]
 8000268:	e018      	b.n	800029c <ADC_Main_Function+0xc8>
	  {
		  // Calculate frequency
		  diff = adc_array[x] - MeasurementState.Offset;
 800026a:	4a3e      	ldr	r2, [pc, #248]	; (8000364 <ADC_Main_Function+0x190>)
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000272:	4b3d      	ldr	r3, [pc, #244]	; (8000368 <ADC_Main_Function+0x194>)
 8000274:	891b      	ldrh	r3, [r3, #8]
 8000276:	1ad3      	subs	r3, r2, r3
 8000278:	b29b      	uxth	r3, r3
 800027a:	807b      	strh	r3, [r7, #2]
		  if(diff > 0 && prev_diff < 0)
 800027c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000280:	2b00      	cmp	r3, #0
 8000282:	dd06      	ble.n	8000292 <ADC_Main_Function+0xbe>
 8000284:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000288:	2b00      	cmp	r3, #0
 800028a:	da02      	bge.n	8000292 <ADC_Main_Function+0xbe>
		  {
			  mid_passes++;
 800028c:	89bb      	ldrh	r3, [r7, #12]
 800028e:	3301      	adds	r3, #1
 8000290:	81bb      	strh	r3, [r7, #12]
		  }
		  prev_diff = diff;
 8000292:	887b      	ldrh	r3, [r7, #2]
 8000294:	81fb      	strh	r3, [r7, #14]
	  for(int x = 0; x < 1000; x++)
 8000296:	687b      	ldr	r3, [r7, #4]
 8000298:	3301      	adds	r3, #1
 800029a:	607b      	str	r3, [r7, #4]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80002a2:	dbe2      	blt.n	800026a <ADC_Main_Function+0x96>
	  }
	  MeasurementState.Period = 50000/(mid_passes);
 80002a4:	89bb      	ldrh	r3, [r7, #12]
 80002a6:	f24c 3250 	movw	r2, #50000	; 0xc350
 80002aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80002ae:	b29a      	uxth	r2, r3
 80002b0:	4b2d      	ldr	r3, [pc, #180]	; (8000368 <ADC_Main_Function+0x194>)
 80002b2:	80da      	strh	r2, [r3, #6]
	//			  MeasurementState.Frequency = 1000000/measured_period;
	  MeasurementState.Frequency = 5250;
 80002b4:	4b2c      	ldr	r3, [pc, #176]	; (8000368 <ADC_Main_Function+0x194>)
 80002b6:	f241 4282 	movw	r2, #5250	; 0x1482
 80002ba:	809a      	strh	r2, [r3, #4]
	//			  MeasurementState.Amplitude = max - min;
	  MeasurementState.Amplitude = 500;
 80002bc:	4b2a      	ldr	r3, [pc, #168]	; (8000368 <ADC_Main_Function+0x194>)
 80002be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80002c2:	805a      	strh	r2, [r3, #2]
 80002c4:	e043      	b.n	800034e <ADC_Main_Function+0x17a>
	//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
	//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
	}
	else
	{
	  HAL_ADC_Start(&hadc1);
 80002c6:	4829      	ldr	r0, [pc, #164]	; (800036c <ADC_Main_Function+0x198>)
 80002c8:	f001 fe58 	bl	8001f7c <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80002cc:	f04f 31ff 	mov.w	r1, #4294967295
 80002d0:	4826      	ldr	r0, [pc, #152]	; (800036c <ADC_Main_Function+0x198>)
 80002d2:	f001 ff9f 	bl	8002214 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 80002d6:	4825      	ldr	r0, [pc, #148]	; (800036c <ADC_Main_Function+0x198>)
 80002d8:	f002 f89e 	bl	8002418 <HAL_ADC_GetValue>
 80002dc:	4603      	mov	r3, r0
 80002de:	b29a      	uxth	r2, r3
 80002e0:	4b23      	ldr	r3, [pc, #140]	; (8000370 <ADC_Main_Function+0x19c>)
 80002e2:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80002e4:	4821      	ldr	r0, [pc, #132]	; (800036c <ADC_Main_Function+0x198>)
 80002e6:	f001 ff5f 	bl	80021a8 <HAL_ADC_Stop>
	  millivolts = raw*3300/4095;
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <ADC_Main_Function+0x19c>)
 80002ec:	881b      	ldrh	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	f640 43e4 	movw	r3, #3300	; 0xce4
 80002f4:	fb03 f302 	mul.w	r3, r3, r2
 80002f8:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <ADC_Main_Function+0x1a0>)
 80002fa:	fb82 1203 	smull	r1, r2, r2, r3
 80002fe:	441a      	add	r2, r3
 8000300:	12d2      	asrs	r2, r2, #11
 8000302:	17db      	asrs	r3, r3, #31
 8000304:	1ad3      	subs	r3, r2, r3
 8000306:	b29a      	uxth	r2, r3
 8000308:	4b1b      	ldr	r3, [pc, #108]	; (8000378 <ADC_Main_Function+0x1a4>)
 800030a:	801a      	strh	r2, [r3, #0]
	  millivolts += 100*millivolts/1000; // Calibration
 800030c:	4b1a      	ldr	r3, [pc, #104]	; (8000378 <ADC_Main_Function+0x1a4>)
 800030e:	881b      	ldrh	r3, [r3, #0]
 8000310:	461a      	mov	r2, r3
 8000312:	2364      	movs	r3, #100	; 0x64
 8000314:	fb03 f302 	mul.w	r3, r3, r2
 8000318:	4a18      	ldr	r2, [pc, #96]	; (800037c <ADC_Main_Function+0x1a8>)
 800031a:	fb82 1203 	smull	r1, r2, r2, r3
 800031e:	1192      	asrs	r2, r2, #6
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	b29a      	uxth	r2, r3
 8000326:	4b14      	ldr	r3, [pc, #80]	; (8000378 <ADC_Main_Function+0x1a4>)
 8000328:	881b      	ldrh	r3, [r3, #0]
 800032a:	4413      	add	r3, r2
 800032c:	b29a      	uxth	r2, r3
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <ADC_Main_Function+0x1a4>)
 8000330:	801a      	strh	r2, [r3, #0]
	  adc_array[adc_count] = millivolts;
 8000332:	4b0b      	ldr	r3, [pc, #44]	; (8000360 <ADC_Main_Function+0x18c>)
 8000334:	881b      	ldrh	r3, [r3, #0]
 8000336:	461a      	mov	r2, r3
 8000338:	4b0f      	ldr	r3, [pc, #60]	; (8000378 <ADC_Main_Function+0x1a4>)
 800033a:	8819      	ldrh	r1, [r3, #0]
 800033c:	4b09      	ldr	r3, [pc, #36]	; (8000364 <ADC_Main_Function+0x190>)
 800033e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  adc_count++;
 8000342:	4b07      	ldr	r3, [pc, #28]	; (8000360 <ADC_Main_Function+0x18c>)
 8000344:	881b      	ldrh	r3, [r3, #0]
 8000346:	3301      	adds	r3, #1
 8000348:	b29a      	uxth	r2, r3
 800034a:	4b05      	ldr	r3, [pc, #20]	; (8000360 <ADC_Main_Function+0x18c>)
 800034c:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 800034e:	2110      	movs	r1, #16
 8000350:	480b      	ldr	r0, [pc, #44]	; (8000380 <ADC_Main_Function+0x1ac>)
 8000352:	f003 faa3 	bl	800389c <HAL_GPIO_TogglePin>
}
 8000356:	bf00      	nop
 8000358:	3718      	adds	r7, #24
 800035a:	46bd      	mov	sp, r7
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000038 	.word	0x20000038
 8000364:	20000054 	.word	0x20000054
 8000368:	20000828 	.word	0x20000828
 800036c:	20000a34 	.word	0x20000a34
 8000370:	20000824 	.word	0x20000824
 8000374:	80080081 	.word	0x80080081
 8000378:	20000826 	.word	0x20000826
 800037c:	10624dd3 	.word	0x10624dd3
 8000380:	48000800 	.word	0x48000800

08000384 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000388:	2014      	movs	r0, #20
 800038a:	f001 fbdb 	bl	8001b44 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 800038e:	2030      	movs	r0, #48	; 0x30
 8000390:	f000 f908 	bl	80005a4 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 8000394:	200a      	movs	r0, #10
 8000396:	f001 fbd5 	bl	8001b44 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 800039a:	2030      	movs	r0, #48	; 0x30
 800039c:	f000 f902 	bl	80005a4 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80003a0:	2001      	movs	r0, #1
 80003a2:	f001 fbcf 	bl	8001b44 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 80003a6:	2030      	movs	r0, #48	; 0x30
 80003a8:	f000 f8fc 	bl	80005a4 <LCD_Write_8bitInstruction>
	HAL_Delay(10);
 80003ac:	200a      	movs	r0, #10
 80003ae:	f001 fbc9 	bl	8001b44 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 80003b2:	2028      	movs	r0, #40	; 0x28
 80003b4:	f000 f8f6 	bl	80005a4 <LCD_Write_8bitInstruction>
	HAL_Delay(1);
 80003b8:	2001      	movs	r0, #1
 80003ba:	f001 fbc3 	bl	8001b44 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f000 f84c 	bl	800045c <LCD_Write_Instruction>
	HAL_Delay(1);
 80003c4:	2001      	movs	r0, #1
 80003c6:	f001 fbbd 	bl	8001b44 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 80003ca:	200f      	movs	r0, #15
 80003cc:	f000 f846 	bl	800045c <LCD_Write_Instruction>
	HAL_Delay(1);
 80003d0:	2001      	movs	r0, #1
 80003d2:	f001 fbb7 	bl	8001b44 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 80003d6:	2001      	movs	r0, #1
 80003d8:	f000 f840 	bl	800045c <LCD_Write_Instruction>
	HAL_Delay(3);
 80003dc:	2003      	movs	r0, #3
 80003de:	f001 fbb1 	bl	8001b44 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 80003e2:	2006      	movs	r0, #6
 80003e4:	f000 f83a 	bl	800045c <LCD_Write_Instruction>
	HAL_Delay(1);
 80003e8:	2001      	movs	r0, #1
 80003ea:	f001 fbab 	bl	8001b44 <HAL_Delay>

}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}

080003f2 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 80003f2:	b580      	push	{r7, lr}
 80003f4:	b084      	sub	sp, #16
 80003f6:	af00      	add	r7, sp, #0
 80003f8:	6078      	str	r0, [r7, #4]
	int i = 0;
 80003fa:	2300      	movs	r3, #0
 80003fc:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 80003fe:	e00c      	b.n	800041a <LCD_Write_String+0x28>
	{
		LCD_Write_Character(string[i]);
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	687a      	ldr	r2, [r7, #4]
 8000404:	4413      	add	r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	4618      	mov	r0, r3
 800040a:	f000 f811 	bl	8000430 <LCD_Write_Character>
		i++;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	3301      	adds	r3, #1
 8000412:	60fb      	str	r3, [r7, #12]
		HAL_Delay(1);
 8000414:	2001      	movs	r0, #1
 8000416:	f001 fb95 	bl	8001b44 <HAL_Delay>
	while (string[i] != 0)
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	687a      	ldr	r2, [r7, #4]
 800041e:	4413      	add	r3, r2
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d1ec      	bne.n	8000400 <LCD_Write_String+0xe>
	}
}
 8000426:	bf00      	nop
 8000428:	3710      	adds	r7, #16
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
	...

08000430 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	4603      	mov	r3, r0
 8000438:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 800043a:	4b07      	ldr	r3, [pc, #28]	; (8000458 <LCD_Write_Character+0x28>)
 800043c:	695b      	ldr	r3, [r3, #20]
 800043e:	4a06      	ldr	r2, [pc, #24]	; (8000458 <LCD_Write_Character+0x28>)
 8000440:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000444:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	4618      	mov	r0, r3
 800044a:	f000 f81d 	bl	8000488 <LCD_Write_Nibbles>
}
 800044e:	bf00      	nop
 8000450:	3708      	adds	r7, #8
 8000452:	46bd      	mov	sp, r7
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	48000400 	.word	0x48000400

0800045c <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	4603      	mov	r3, r0
 8000464:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 8000466:	4b07      	ldr	r3, [pc, #28]	; (8000484 <LCD_Write_Instruction+0x28>)
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	4a06      	ldr	r2, [pc, #24]	; (8000484 <LCD_Write_Instruction+0x28>)
 800046c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000470:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 8000472:	79fb      	ldrb	r3, [r7, #7]
 8000474:	4618      	mov	r0, r3
 8000476:	f000 f807 	bl	8000488 <LCD_Write_Nibbles>
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	48000400 	.word	0x48000400

08000488 <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 8000492:	4b42      	ldr	r3, [pc, #264]	; (800059c <LCD_Write_Nibbles+0x114>)
 8000494:	695b      	ldr	r3, [r3, #20]
 8000496:	4a41      	ldr	r2, [pc, #260]	; (800059c <LCD_Write_Nibbles+0x114>)
 8000498:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800049c:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 800049e:	f000 f8d5 	bl	800064c <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80004a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	da07      	bge.n	80004ba <LCD_Write_Nibbles+0x32>
 80004aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004ae:	695b      	ldr	r3, [r3, #20]
 80004b0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004b4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004b8:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80004ba:	79fb      	ldrb	r3, [r7, #7]
 80004bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d007      	beq.n	80004d4 <LCD_Write_Nibbles+0x4c>
 80004c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004c8:	695b      	ldr	r3, [r3, #20]
 80004ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80004ce:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004d2:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80004d4:	79fb      	ldrb	r3, [r7, #7]
 80004d6:	f003 0320 	and.w	r3, r3, #32
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d005      	beq.n	80004ea <LCD_Write_Nibbles+0x62>
 80004de:	4b30      	ldr	r3, [pc, #192]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 80004e0:	695b      	ldr	r3, [r3, #20]
 80004e2:	4a2f      	ldr	r2, [pc, #188]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 80004e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004e8:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80004ea:	79fb      	ldrb	r3, [r7, #7]
 80004ec:	f003 0310 	and.w	r3, r3, #16
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d005      	beq.n	8000500 <LCD_Write_Nibbles+0x78>
 80004f4:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 80004f6:	695b      	ldr	r3, [r3, #20]
 80004f8:	4a29      	ldr	r2, [pc, #164]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 80004fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fe:	6153      	str	r3, [r2, #20]


	// Pulse Enable
	HAL_Delay(1);
 8000500:	2001      	movs	r0, #1
 8000502:	f001 fb1f 	bl	8001b44 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8000506:	4b25      	ldr	r3, [pc, #148]	; (800059c <LCD_Write_Nibbles+0x114>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	4a24      	ldr	r2, [pc, #144]	; (800059c <LCD_Write_Nibbles+0x114>)
 800050c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000510:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <LCD_Write_Nibbles+0x114>)
 8000514:	695b      	ldr	r3, [r3, #20]
 8000516:	4a21      	ldr	r2, [pc, #132]	; (800059c <LCD_Write_Nibbles+0x114>)
 8000518:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800051c:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 800051e:	f000 f895 	bl	800064c <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	f003 0308 	and.w	r3, r3, #8
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <LCD_Write_Nibbles+0xb4>
 800052c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000530:	695b      	ldr	r3, [r3, #20]
 8000532:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000536:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800053a:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	f003 0304 	and.w	r3, r3, #4
 8000542:	2b00      	cmp	r3, #0
 8000544:	d007      	beq.n	8000556 <LCD_Write_Nibbles+0xce>
 8000546:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000550:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000554:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	f003 0302 	and.w	r3, r3, #2
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <LCD_Write_Nibbles+0xe4>
 8000560:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a0e      	ldr	r2, [pc, #56]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 8000566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800056a:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	f003 0301 	and.w	r3, r3, #1
 8000572:	2b00      	cmp	r3, #0
 8000574:	d005      	beq.n	8000582 <LCD_Write_Nibbles+0xfa>
 8000576:	4b0a      	ldr	r3, [pc, #40]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 8000578:	695b      	ldr	r3, [r3, #20]
 800057a:	4a09      	ldr	r2, [pc, #36]	; (80005a0 <LCD_Write_Nibbles+0x118>)
 800057c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000580:	6153      	str	r3, [r2, #20]

	// Drop Enable
	HAL_Delay(1);
 8000582:	2001      	movs	r0, #1
 8000584:	f001 fade 	bl	8001b44 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <LCD_Write_Nibbles+0x114>)
 800058a:	695b      	ldr	r3, [r3, #20]
 800058c:	4a03      	ldr	r2, [pc, #12]	; (800059c <LCD_Write_Nibbles+0x114>)
 800058e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000592:	6153      	str	r3, [r2, #20]
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	48000400 	.word	0x48000400
 80005a0:	48000800 	.word	0x48000800

080005a4 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	4603      	mov	r3, r0
 80005ac:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 80005ae:	4b25      	ldr	r3, [pc, #148]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	4a24      	ldr	r2, [pc, #144]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 80005b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80005b8:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 80005ba:	4b22      	ldr	r3, [pc, #136]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 80005bc:	695b      	ldr	r3, [r3, #20]
 80005be:	4a21      	ldr	r2, [pc, #132]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 80005c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005c4:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80005c6:	f000 f841 	bl	800064c <LCD_ZeroPins>

	 // Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80005ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	da07      	bge.n	80005e2 <LCD_Write_8bitInstruction+0x3e>
 80005d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d6:	695b      	ldr	r3, [r3, #20]
 80005d8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e0:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d007      	beq.n	80005fc <LCD_Write_8bitInstruction+0x58>
 80005ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005f0:	695b      	ldr	r3, [r3, #20]
 80005f2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80005fa:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	f003 0320 	and.w	r3, r3, #32
 8000602:	2b00      	cmp	r3, #0
 8000604:	d005      	beq.n	8000612 <LCD_Write_8bitInstruction+0x6e>
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <LCD_Write_8bitInstruction+0xa4>)
 8000608:	695b      	ldr	r3, [r3, #20]
 800060a:	4a0f      	ldr	r2, [pc, #60]	; (8000648 <LCD_Write_8bitInstruction+0xa4>)
 800060c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000610:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	f003 0310 	and.w	r3, r3, #16
 8000618:	2b00      	cmp	r3, #0
 800061a:	d005      	beq.n	8000628 <LCD_Write_8bitInstruction+0x84>
 800061c:	4b0a      	ldr	r3, [pc, #40]	; (8000648 <LCD_Write_8bitInstruction+0xa4>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	4a09      	ldr	r2, [pc, #36]	; (8000648 <LCD_Write_8bitInstruction+0xa4>)
 8000622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000626:	6153      	str	r3, [r2, #20]

	HAL_Delay(1);
 8000628:	2001      	movs	r0, #1
 800062a:	f001 fa8b 	bl	8001b44 <HAL_Delay>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 800062e:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 8000630:	695b      	ldr	r3, [r3, #20]
 8000632:	4a04      	ldr	r2, [pc, #16]	; (8000644 <LCD_Write_8bitInstruction+0xa0>)
 8000634:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000638:	6153      	str	r3, [r2, #20]
}
 800063a:	bf00      	nop
 800063c:	3708      	adds	r7, #8
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	48000400 	.word	0x48000400
 8000648:	48000800 	.word	0x48000800

0800064c <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800065e:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800066e:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 8000670:	4b08      	ldr	r3, [pc, #32]	; (8000694 <LCD_ZeroPins+0x48>)
 8000672:	695b      	ldr	r3, [r3, #20]
 8000674:	4a07      	ldr	r2, [pc, #28]	; (8000694 <LCD_ZeroPins+0x48>)
 8000676:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800067a:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 800067c:	4b05      	ldr	r3, [pc, #20]	; (8000694 <LCD_ZeroPins+0x48>)
 800067e:	695b      	ldr	r3, [r3, #20]
 8000680:	4a04      	ldr	r2, [pc, #16]	; (8000694 <LCD_ZeroPins+0x48>)
 8000682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000686:	6153      	str	r3, [r2, #20]
}
 8000688:	bf00      	nop
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	48000800 	.word	0x48000800

08000698 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 800069c:	2001      	movs	r0, #1
 800069e:	f7ff fedd 	bl	800045c <LCD_Write_Instruction>
}
 80006a2:	bf00      	nop
 80006a4:	bd80      	pop	{r7, pc}
	...

080006a8 <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08a      	sub	sp, #40	; 0x28
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 80006b2:	f7ff fff1 	bl	8000698 <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d122      	bne.n	8000702 <LCD_changeDisplayMode+0x5a>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2120      	movs	r1, #32
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f003 f8d2 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4835      	ldr	r0, [pc, #212]	; (80007a4 <LCD_changeDisplayMode+0xfc>)
 80006ce:	f003 f8cd 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80006d2:	2200      	movs	r2, #0
 80006d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80006d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006dc:	f003 f8c6 	bl	800386c <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Menu";
 80006e0:	4a31      	ldr	r2, [pc, #196]	; (80007a8 <LCD_changeDisplayMode+0x100>)
 80006e2:	f107 0320 	add.w	r3, r7, #32
 80006e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006ea:	6018      	str	r0, [r3, #0]
 80006ec:	3304      	adds	r3, #4
 80006ee:	7019      	strb	r1, [r3, #0]
		LCD_Write_String(lcd_string);
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff fe7c 	bl	80003f2 <LCD_Write_String>
		DisplayState.Mode = Menu;
 80006fa:	4b2c      	ldr	r3, [pc, #176]	; (80007ac <LCD_changeDisplayMode+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		uint8_t lcd_string[] = "Output";
		LCD_Write_String(lcd_string);
		DisplayState.Mode = Output;
	}
}
 8000700:	e04b      	b.n	800079a <LCD_changeDisplayMode+0xf2>
	else if (newDisplayMode == Measurement)
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	2b01      	cmp	r3, #1
 8000706:	d120      	bne.n	800074a <LCD_changeDisplayMode+0xa2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	2120      	movs	r1, #32
 800070c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000710:	f003 f8ac 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000714:	2201      	movs	r2, #1
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	4822      	ldr	r0, [pc, #136]	; (80007a4 <LCD_changeDisplayMode+0xfc>)
 800071a:	f003 f8a7 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800071e:	2200      	movs	r2, #0
 8000720:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000724:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000728:	f003 f8a0 	bl	800386c <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Measurement";
 800072c:	4a20      	ldr	r2, [pc, #128]	; (80007b0 <LCD_changeDisplayMode+0x108>)
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	ca07      	ldmia	r2, {r0, r1, r2}
 8000734:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		LCD_Write_String(lcd_string);
 8000738:	f107 0314 	add.w	r3, r7, #20
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff fe58 	bl	80003f2 <LCD_Write_String>
		DisplayState.Mode = Measurement;
 8000742:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <LCD_changeDisplayMode+0x104>)
 8000744:	2201      	movs	r2, #1
 8000746:	701a      	strb	r2, [r3, #0]
}
 8000748:	e027      	b.n	800079a <LCD_changeDisplayMode+0xf2>
	else if (newDisplayMode == Output)
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b02      	cmp	r3, #2
 800074e:	d124      	bne.n	800079a <LCD_changeDisplayMode+0xf2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000750:	2200      	movs	r2, #0
 8000752:	2120      	movs	r1, #32
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f003 f888 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800075c:	2200      	movs	r2, #0
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	4810      	ldr	r0, [pc, #64]	; (80007a4 <LCD_changeDisplayMode+0xfc>)
 8000762:	f003 f883 	bl	800386c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000766:	2201      	movs	r2, #1
 8000768:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800076c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000770:	f003 f87c 	bl	800386c <HAL_GPIO_WritePin>
		uint8_t lcd_string[] = "Output";
 8000774:	4a0f      	ldr	r2, [pc, #60]	; (80007b4 <LCD_changeDisplayMode+0x10c>)
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800077e:	6018      	str	r0, [r3, #0]
 8000780:	3304      	adds	r3, #4
 8000782:	8019      	strh	r1, [r3, #0]
 8000784:	3302      	adds	r3, #2
 8000786:	0c0a      	lsrs	r2, r1, #16
 8000788:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(lcd_string);
 800078a:	f107 030c 	add.w	r3, r7, #12
 800078e:	4618      	mov	r0, r3
 8000790:	f7ff fe2f 	bl	80003f2 <LCD_Write_String>
		DisplayState.Mode = Output;
 8000794:	4b05      	ldr	r3, [pc, #20]	; (80007ac <LCD_changeDisplayMode+0x104>)
 8000796:	2202      	movs	r2, #2
 8000798:	701a      	strb	r2, [r3, #0]
}
 800079a:	bf00      	nop
 800079c:	3728      	adds	r7, #40	; 0x28
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	48000800 	.word	0x48000800
 80007a8:	08006f48 	.word	0x08006f48
 80007ac:	200009d8 	.word	0x200009d8
 80007b0:	08006f50 	.word	0x08006f50
 80007b4:	08006f5c 	.word	0x08006f5c

080007b8 <HAL_UART_RxCpltCallback>:
//uint16_t measured_period = 0;
//uint16_t measured_offset = 0;
//uint8_t measurement_mode = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	message_received = 1; // declared in file: uart.c
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <HAL_UART_RxCpltCallback+0x1c>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	20000044 	.word	0x20000044

080007d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80007e2:	f001 f9a3 	bl	8001b2c <HAL_GetTick>
 80007e6:	4602      	mov	r2, r0
 80007e8:	4b15      	ldr	r3, [pc, #84]	; (8000840 <HAL_GPIO_EXTI_Callback+0x68>)
 80007ea:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 80007ec:	88fb      	ldrh	r3, [r7, #6]
 80007ee:	2b40      	cmp	r3, #64	; 0x40
 80007f0:	d103      	bne.n	80007fa <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 80007f2:	4b14      	ldr	r3, [pc, #80]	; (8000844 <HAL_GPIO_EXTI_Callback+0x6c>)
 80007f4:	2201      	movs	r2, #1
 80007f6:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 80007f8:	e01d      	b.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 80007fa:	88fb      	ldrh	r3, [r7, #6]
 80007fc:	2b80      	cmp	r3, #128	; 0x80
 80007fe:	d103      	bne.n	8000808 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8000800:	4b11      	ldr	r3, [pc, #68]	; (8000848 <HAL_GPIO_EXTI_Callback+0x70>)
 8000802:	2201      	movs	r2, #1
 8000804:	701a      	strb	r2, [r3, #0]
}
 8000806:	e016      	b.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800080e:	d103      	bne.n	8000818 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8000810:	4b0e      	ldr	r3, [pc, #56]	; (800084c <HAL_GPIO_EXTI_Callback+0x74>)
 8000812:	2201      	movs	r2, #1
 8000814:	701a      	strb	r2, [r3, #0]
}
 8000816:	e00e      	b.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8000818:	88fb      	ldrh	r3, [r7, #6]
 800081a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800081e:	d103      	bne.n	8000828 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8000820:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_GPIO_EXTI_Callback+0x78>)
 8000822:	2201      	movs	r2, #1
 8000824:	701a      	strb	r2, [r3, #0]
}
 8000826:	e006      	b.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000828:	88fb      	ldrh	r3, [r7, #6]
 800082a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800082e:	d102      	bne.n	8000836 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8000830:	4b08      	ldr	r3, [pc, #32]	; (8000854 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000832:	2201      	movs	r2, #1
 8000834:	701a      	strb	r2, [r3, #0]
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000040 	.word	0x20000040
 8000844:	2000003a 	.word	0x2000003a
 8000848:	2000003b 	.word	0x2000003b
 800084c:	2000003c 	.word	0x2000003c
 8000850:	2000003d 	.word	0x2000003d
 8000854:	2000003e 	.word	0x2000003e

08000858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 800085c:	4b72      	ldr	r3, [pc, #456]	; (8000a28 <main+0x1d0>)
 800085e:	4a73      	ldr	r2, [pc, #460]	; (8000a2c <main+0x1d4>)
 8000860:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8000864:	4b70      	ldr	r3, [pc, #448]	; (8000a28 <main+0x1d0>)
 8000866:	2200      	movs	r2, #0
 8000868:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 800086c:	4b6e      	ldr	r3, [pc, #440]	; (8000a28 <main+0x1d0>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8000874:	4b6c      	ldr	r3, [pc, #432]	; (8000a28 <main+0x1d0>)
 8000876:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800087a:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 800087e:	4b6a      	ldr	r3, [pc, #424]	; (8000a28 <main+0x1d0>)
 8000880:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000884:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8000888:	4b67      	ldr	r3, [pc, #412]	; (8000a28 <main+0x1d0>)
 800088a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800088e:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 8000892:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <main+0x1d0>)
 8000894:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000898:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

	MeasurementState.Mode = DV;
 800089c:	4b64      	ldr	r3, [pc, #400]	; (8000a30 <main+0x1d8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 80008a2:	4b63      	ldr	r3, [pc, #396]	; (8000a30 <main+0x1d8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 80008a8:	4b61      	ldr	r3, [pc, #388]	; (8000a30 <main+0x1d8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 80008ae:	4b60      	ldr	r3, [pc, #384]	; (8000a30 <main+0x1d8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 80008b4:	4b5e      	ldr	r3, [pc, #376]	; (8000a30 <main+0x1d8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	80da      	strh	r2, [r3, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ba:	f001 f8dd 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008be:	f000 f8d7 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fa99 	bl	8000df8 <MX_GPIO_Init>
  MX_DMA_Init();
 80008c6:	f000 fa79 	bl	8000dbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80008ca:	f000 fa47 	bl	8000d5c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 80008ce:	f000 fa1f 	bl	8000d10 <MX_TIM16_Init>
  MX_ADC1_Init();
 80008d2:	f000 f935 	bl	8000b40 <MX_ADC1_Init>
  MX_DAC1_Init();
 80008d6:	f000 f9a3 	bl	8000c20 <MX_DAC1_Init>
  MX_TIM2_Init();
 80008da:	f000 f9cb 	bl	8000c74 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 80008de:	230a      	movs	r3, #10
 80008e0:	220d      	movs	r2, #13
 80008e2:	4954      	ldr	r1, [pc, #336]	; (8000a34 <main+0x1dc>)
 80008e4:	4854      	ldr	r0, [pc, #336]	; (8000a38 <main+0x1e0>)
 80008e6:	f005 f8db 	bl	8005aa0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80008ea:	2201      	movs	r2, #1
 80008ec:	4953      	ldr	r1, [pc, #332]	; (8000a3c <main+0x1e4>)
 80008ee:	4852      	ldr	r0, [pc, #328]	; (8000a38 <main+0x1e0>)
 80008f0:	f005 f96a 	bl	8005bc8 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 80008f4:	4852      	ldr	r0, [pc, #328]	; (8000a40 <main+0x1e8>)
 80008f6:	f004 fc2d 	bl	8005154 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 80008fa:	f7ff fd43 	bl	8000384 <LCD_Init>

	// Init Display State
	LCD_changeDisplayMode(Menu);
 80008fe:	2000      	movs	r0, #0
 8000900:	f7ff fed2 	bl	80006a8 <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 8000904:	484f      	ldr	r0, [pc, #316]	; (8000a44 <main+0x1ec>)
 8000906:	f004 fbbd 	bl	8005084 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // UART JOB
	  if(message_received)
 800090a:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <main+0x1f0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d004      	beq.n	800091c <main+0xc4>
	  {
		  UART_Main_Function();
 8000912:	f000 fd6d 	bl	80013f0 <UART_Main_Function>
		  message_received = 0;
 8000916:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <main+0x1f0>)
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 800091c:	4b4b      	ldr	r3, [pc, #300]	; (8000a4c <main+0x1f4>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d010      	beq.n	8000946 <main+0xee>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000924:	f001 f902 	bl	8001b2c <HAL_GetTick>
 8000928:	4602      	mov	r2, r0
 800092a:	4b49      	ldr	r3, [pc, #292]	; (8000a50 <main+0x1f8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	1ad3      	subs	r3, r2, r3
 8000930:	2b36      	cmp	r3, #54	; 0x36
 8000932:	d96d      	bls.n	8000a10 <main+0x1b8>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8000934:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000938:	4846      	ldr	r0, [pc, #280]	; (8000a54 <main+0x1fc>)
 800093a:	f002 ff7f 	bl	800383c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 800093e:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <main+0x1f4>)
 8000940:	2200      	movs	r2, #0
 8000942:	701a      	strb	r2, [r3, #0]
 8000944:	e064      	b.n	8000a10 <main+0x1b8>
		  }
	  }
	  else if(btn_left_flag)
 8000946:	4b44      	ldr	r3, [pc, #272]	; (8000a58 <main+0x200>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b00      	cmp	r3, #0
 800094c:	d010      	beq.n	8000970 <main+0x118>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 800094e:	f001 f8ed 	bl	8001b2c <HAL_GetTick>
 8000952:	4602      	mov	r2, r0
 8000954:	4b3e      	ldr	r3, [pc, #248]	; (8000a50 <main+0x1f8>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b36      	cmp	r3, #54	; 0x36
 800095c:	d958      	bls.n	8000a10 <main+0x1b8>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 800095e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000962:	483c      	ldr	r0, [pc, #240]	; (8000a54 <main+0x1fc>)
 8000964:	f002 ff6a 	bl	800383c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <main+0x200>)
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e04f      	b.n	8000a10 <main+0x1b8>
		  }
	  }
	  else if(btn_down_flag)
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <main+0x204>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d010      	beq.n	800099a <main+0x142>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8000978:	f001 f8d8 	bl	8001b2c <HAL_GetTick>
 800097c:	4602      	mov	r2, r0
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <main+0x1f8>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	2b36      	cmp	r3, #54	; 0x36
 8000986:	d943      	bls.n	8000a10 <main+0x1b8>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 8000988:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800098c:	4831      	ldr	r0, [pc, #196]	; (8000a54 <main+0x1fc>)
 800098e:	f002 ff55 	bl	800383c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 8000992:	4b32      	ldr	r3, [pc, #200]	; (8000a5c <main+0x204>)
 8000994:	2200      	movs	r2, #0
 8000996:	701a      	strb	r2, [r3, #0]
 8000998:	e03a      	b.n	8000a10 <main+0x1b8>
		  }
	  }
	  else if(btn_right_flag)
 800099a:	4b31      	ldr	r3, [pc, #196]	; (8000a60 <main+0x208>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d010      	beq.n	80009c4 <main+0x16c>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80009a2:	f001 f8c3 	bl	8001b2c <HAL_GetTick>
 80009a6:	4602      	mov	r2, r0
 80009a8:	4b29      	ldr	r3, [pc, #164]	; (8000a50 <main+0x1f8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1ad3      	subs	r3, r2, r3
 80009ae:	2b36      	cmp	r3, #54	; 0x36
 80009b0:	d92e      	bls.n	8000a10 <main+0x1b8>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80009b2:	2180      	movs	r1, #128	; 0x80
 80009b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b8:	f002 ff40 	bl	800383c <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <main+0x208>)
 80009be:	2200      	movs	r2, #0
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e025      	b.n	8000a10 <main+0x1b8>
		  }
	  }
	  else if(btn_mid_flag)
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <main+0x20c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d021      	beq.n	8000a10 <main+0x1b8>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 80009cc:	f001 f8ae 	bl	8001b2c <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <main+0x1f8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b36      	cmp	r3, #54	; 0x36
 80009da:	d919      	bls.n	8000a10 <main+0x1b8>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f002 ff2b 	bl	800383c <HAL_GPIO_ReadPin>
 80009e6:	4603      	mov	r3, r0
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d00e      	beq.n	8000a0a <main+0x1b2>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 80009ec:	4b1e      	ldr	r3, [pc, #120]	; (8000a68 <main+0x210>)
 80009ee:	781b      	ldrb	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d103      	bne.n	80009fc <main+0x1a4>
					  LCD_changeDisplayMode(Measurement);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe57 	bl	80006a8 <LCD_changeDisplayMode>
 80009fa:	e006      	b.n	8000a0a <main+0x1b2>
				  } else if(DisplayState.Mode == Measurement){
 80009fc:	4b1a      	ldr	r3, [pc, #104]	; (8000a68 <main+0x210>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d102      	bne.n	8000a0a <main+0x1b2>
					  LCD_changeDisplayMode(Menu);
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fe4f 	bl	80006a8 <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <main+0x20c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <main+0x214>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f43f af78 	beq.w	800090a <main+0xb2>
	  {
		  ADC_Main_Function();
 8000a1a:	f7ff fbdb 	bl	80001d4 <ADC_Main_Function>
		  adc_timer_flag = 0;
 8000a1e:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <main+0x214>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	701a      	strb	r2, [r3, #0]
	  if(message_received)
 8000a24:	e771      	b.n	800090a <main+0xb2>
 8000a26:	bf00      	nop
 8000a28:	20000834 	.word	0x20000834
 8000a2c:	044aa200 	.word	0x044aa200
 8000a30:	20000828 	.word	0x20000828
 8000a34:	20000000 	.word	0x20000000
 8000a38:	20000ad0 	.word	0x20000ad0
 8000a3c:	20000ba0 	.word	0x20000ba0
 8000a40:	20000b54 	.word	0x20000b54
 8000a44:	20000a84 	.word	0x20000a84
 8000a48:	20000044 	.word	0x20000044
 8000a4c:	2000003c 	.word	0x2000003c
 8000a50:	20000040 	.word	0x20000040
 8000a54:	48000400 	.word	0x48000400
 8000a58:	2000003d 	.word	0x2000003d
 8000a5c:	2000003e 	.word	0x2000003e
 8000a60:	2000003b 	.word	0x2000003b
 8000a64:	2000003a 	.word	0x2000003a
 8000a68:	200009d8 	.word	0x200009d8
 8000a6c:	2000003f 	.word	0x2000003f

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0a6      	sub	sp, #152	; 0x98
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a7a:	2228      	movs	r2, #40	; 0x28
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f006 fa4e 	bl	8006f20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2258      	movs	r2, #88	; 0x58
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f006 fa40 	bl	8006f20 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aa8:	2310      	movs	r3, #16
 8000aaa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ab4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000abc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000ac0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aca:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f002 ff16 	bl	8003900 <HAL_RCC_OscConfig>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000ada:	f000 fa9f 	bl	800101c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ade:	230f      	movs	r3, #15
 8000ae0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ae2:	2302      	movs	r3, #2
 8000ae4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000aea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000aee:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000af4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000af8:	2102      	movs	r1, #2
 8000afa:	4618      	mov	r0, r3
 8000afc:	f003 fe16 	bl	800472c <HAL_RCC_ClockConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b06:	f000 fa89 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <SystemClock_Config+0xcc>)
 8000b0c:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8000b12:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b16:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	4618      	mov	r0, r3
 8000b24:	f004 f838 	bl	8004b98 <HAL_RCCEx_PeriphCLKConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b2e:	f000 fa75 	bl	800101c <Error_Handler>
  }
}
 8000b32:	bf00      	nop
 8000b34:	3798      	adds	r7, #152	; 0x98
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	00900082 	.word	0x00900082

08000b40 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08a      	sub	sp, #40	; 0x28
 8000b44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]
 8000b50:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
 8000b60:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000b62:	4b2e      	ldr	r3, [pc, #184]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b64:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b68:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000b6a:	4b2c      	ldr	r3, [pc, #176]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b76:	4b29      	ldr	r3, [pc, #164]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b82:	4b26      	ldr	r3, [pc, #152]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000bac:	2204      	movs	r2, #4
 8000bae:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bbc:	4817      	ldr	r0, [pc, #92]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000bbe:	f000 ffe3 	bl	8001b88 <HAL_ADC_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000bc8:	f000 fa28 	bl	800101c <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000bd0:	f107 031c 	add.w	r3, r7, #28
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4811      	ldr	r0, [pc, #68]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000bd8:	f001 ff18 	bl	8002a0c <HAL_ADCEx_MultiModeConfigChannel>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000be2:	f000 fa1b 	bl	800101c <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000be6:	2301      	movs	r3, #1
 8000be8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bfe:	1d3b      	adds	r3, r7, #4
 8000c00:	4619      	mov	r1, r3
 8000c02:	4806      	ldr	r0, [pc, #24]	; (8000c1c <MX_ADC1_Init+0xdc>)
 8000c04:	f001 fc16 	bl	8002434 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 8000c0e:	f000 fa05 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000a34 	.word	0x20000a34

08000c20 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c26:	1d3b      	adds	r3, r7, #4
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8000c30:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_DAC1_Init+0x4c>)
 8000c32:	4a0f      	ldr	r2, [pc, #60]	; (8000c70 <MX_DAC1_Init+0x50>)
 8000c34:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_DAC1_Init+0x4c>)
 8000c38:	f002 fa69 	bl	800310e <HAL_DAC_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8000c42:	f000 f9eb 	bl	800101c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000c46:	2324      	movs	r3, #36	; 0x24
 8000c48:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c4e:	1d3b      	adds	r3, r7, #4
 8000c50:	2200      	movs	r2, #0
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_DAC1_Init+0x4c>)
 8000c56:	f002 fa7c 	bl	8003152 <HAL_DAC_ConfigChannel>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8000c60:	f000 f9dc 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000c64:	bf00      	nop
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	200009dc 	.word	0x200009dc
 8000c70:	40007400 	.word	0x40007400

08000c74 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b088      	sub	sp, #32
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c7a:	f107 0310 	add.w	r3, r7, #16
 8000c7e:	2200      	movs	r2, #0
 8000c80:	601a      	str	r2, [r3, #0]
 8000c82:	605a      	str	r2, [r3, #4]
 8000c84:	609a      	str	r2, [r3, #8]
 8000c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000c94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c98:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c9a:	4b1c      	ldr	r3, [pc, #112]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca0:	4b1a      	ldr	r3, [pc, #104]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000ca6:	4b19      	ldr	r3, [pc, #100]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000ca8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cae:	4b17      	ldr	r3, [pc, #92]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cb4:	4b15      	ldr	r3, [pc, #84]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cba:	4814      	ldr	r0, [pc, #80]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000cbc:	f004 f98a 	bl	8004fd4 <HAL_TIM_Base_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f000 f9a9 	bl	800101c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cd0:	f107 0310 	add.w	r3, r7, #16
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	480d      	ldr	r0, [pc, #52]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000cd8:	f004 fbcb 	bl	8005472 <HAL_TIM_ConfigClockSource>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000ce2:	f000 f99b 	bl	800101c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000ce6:	2320      	movs	r3, #32
 8000ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4806      	ldr	r0, [pc, #24]	; (8000d0c <MX_TIM2_Init+0x98>)
 8000cf4:	f004 fddc 	bl	80058b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000cfe:	f000 f98d 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d02:	bf00      	nop
 8000d04:	3720      	adds	r7, #32
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000a84 	.word	0x20000a84

08000d10 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000d14:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d16:	4a10      	ldr	r2, [pc, #64]	; (8000d58 <MX_TIM16_Init+0x48>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d1c:	2247      	movs	r2, #71	; 0x47
 8000d1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d28:	2231      	movs	r2, #49	; 0x31
 8000d2a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2c:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d3e:	4805      	ldr	r0, [pc, #20]	; (8000d54 <MX_TIM16_Init+0x44>)
 8000d40:	f004 f948 	bl	8004fd4 <HAL_TIM_Base_Init>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 8000d4a:	f000 f967 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20000b54 	.word	0x20000b54
 8000d58:	40014400 	.word	0x40014400

08000d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d60:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d62:	4a15      	ldr	r2, [pc, #84]	; (8000db8 <MX_USART2_UART_Init+0x5c>)
 8000d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d66:	4b13      	ldr	r3, [pc, #76]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d74:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d82:	220c      	movs	r2, #12
 8000d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d8c:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d98:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d9e:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_USART2_UART_Init+0x58>)
 8000da0:	f004 fe30 	bl	8005a04 <HAL_UART_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000daa:	f000 f937 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	20000ad0 	.word	0x20000ad0
 8000db8:	40004400 	.word	0x40004400

08000dbc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_DMA_Init+0x38>)
 8000dc4:	695b      	ldr	r3, [r3, #20]
 8000dc6:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <MX_DMA_Init+0x38>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6153      	str	r3, [r2, #20]
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_DMA_Init+0x38>)
 8000dd0:	695b      	ldr	r3, [r3, #20]
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	607b      	str	r3, [r7, #4]
 8000dd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	2100      	movs	r1, #0
 8000dde:	200d      	movs	r0, #13
 8000de0:	f002 f95f 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000de4:	200d      	movs	r0, #13
 8000de6:	f002 f978 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8000dea:	bf00      	nop
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40021000 	.word	0x40021000

08000df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfe:	f107 0314 	add.w	r3, r7, #20
 8000e02:	2200      	movs	r2, #0
 8000e04:	601a      	str	r2, [r3, #0]
 8000e06:	605a      	str	r2, [r3, #4]
 8000e08:	609a      	str	r2, [r3, #8]
 8000e0a:	60da      	str	r2, [r3, #12]
 8000e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e0e:	4b75      	ldr	r3, [pc, #468]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	4a74      	ldr	r2, [pc, #464]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000e18:	6153      	str	r3, [r2, #20]
 8000e1a:	4b72      	ldr	r3, [pc, #456]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e1c:	695b      	ldr	r3, [r3, #20]
 8000e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e26:	4b6f      	ldr	r3, [pc, #444]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	4a6e      	ldr	r2, [pc, #440]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e30:	6153      	str	r3, [r2, #20]
 8000e32:	4b6c      	ldr	r3, [pc, #432]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e34:	695b      	ldr	r3, [r3, #20]
 8000e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3e:	4b69      	ldr	r3, [pc, #420]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a68      	ldr	r2, [pc, #416]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
 8000e4a:	4b66      	ldr	r3, [pc, #408]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e52:	60bb      	str	r3, [r7, #8]
 8000e54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	4a62      	ldr	r2, [pc, #392]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e60:	6153      	str	r3, [r2, #20]
 8000e62:	4b60      	ldr	r3, [pc, #384]	; (8000fe4 <MX_GPIO_Init+0x1ec>)
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 8000e74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e78:	f002 fcf8 	bl	800386c <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 8000e82:	4859      	ldr	r0, [pc, #356]	; (8000fe8 <MX_GPIO_Init+0x1f0>)
 8000e84:	f002 fcf2 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8000e8e:	4857      	ldr	r0, [pc, #348]	; (8000fec <MX_GPIO_Init+0x1f4>)
 8000e90:	f002 fcec 	bl	800386c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea4:	f107 0314 	add.w	r3, r7, #20
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	484f      	ldr	r0, [pc, #316]	; (8000fe8 <MX_GPIO_Init+0x1f0>)
 8000eac:	f002 fb3c 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8000eb0:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ecc:	f002 fb2c 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8000ed0:	2340      	movs	r3, #64	; 0x40
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000ed4:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000ed8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eda:	2301      	movs	r3, #1
 8000edc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0314 	add.w	r3, r7, #20
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee8:	f002 fb1e 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8000eec:	2380      	movs	r3, #128	; 0x80
 8000eee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ef0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ef4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4619      	mov	r1, r3
 8000f00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f04:	f002 fb10 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8000f08:	2390      	movs	r3, #144	; 0x90
 8000f0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f0c:	2301      	movs	r3, #1
 8000f0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4832      	ldr	r0, [pc, #200]	; (8000fe8 <MX_GPIO_Init+0x1f0>)
 8000f20:	f002 fb02 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8000f24:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f30:	2301      	movs	r3, #1
 8000f32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	482c      	ldr	r0, [pc, #176]	; (8000fec <MX_GPIO_Init+0x1f4>)
 8000f3c:	f002 faf4 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8000f40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000f44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f46:	2311      	movs	r3, #17
 8000f48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	4619      	mov	r1, r3
 8000f58:	4824      	ldr	r0, [pc, #144]	; (8000fec <MX_GPIO_Init+0x1f4>)
 8000f5a:	f002 fae5 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8000f5e:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000f62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f64:	2301      	movs	r3, #1
 8000f66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	481d      	ldr	r0, [pc, #116]	; (8000fec <MX_GPIO_Init+0x1f4>)
 8000f78:	f002 fad6 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8000f7c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f82:	2311      	movs	r3, #17
 8000f84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f86:	2300      	movs	r3, #0
 8000f88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f8e:	f107 0314 	add.w	r3, r7, #20
 8000f92:	4619      	mov	r1, r3
 8000f94:	4814      	ldr	r0, [pc, #80]	; (8000fe8 <MX_GPIO_Init+0x1f0>)
 8000f96:	f002 fac7 	bl	8003528 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8000f9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000f9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000fa0:	2311      	movs	r3, #17
 8000fa2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb6:	f002 fab7 	bl	8003528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2017      	movs	r0, #23
 8000fc0:	f002 f86f 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000fc4:	2017      	movs	r0, #23
 8000fc6:	f002 f888 	bl	80030da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fca:	2200      	movs	r2, #0
 8000fcc:	2100      	movs	r1, #0
 8000fce:	2028      	movs	r0, #40	; 0x28
 8000fd0:	f002 f867 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fd4:	2028      	movs	r0, #40	; 0x28
 8000fd6:	f002 f880 	bl	80030da <HAL_NVIC_EnableIRQ>

}
 8000fda:	bf00      	nop
 8000fdc:	3728      	adds	r7, #40	; 0x28
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40021000 	.word	0x40021000
 8000fe8:	48000800 	.word	0x48000800
 8000fec:	48000400 	.word	0x48000400

08000ff0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a06      	ldr	r2, [pc, #24]	; (8001014 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d102      	bne.n	8001006 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
	}
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	20000b54 	.word	0x20000b54
 8001018:	2000003f 	.word	0x2000003f

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr
	...

0800102c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <HAL_MspInit+0x44>)
 8001034:	699b      	ldr	r3, [r3, #24]
 8001036:	4a0e      	ldr	r2, [pc, #56]	; (8001070 <HAL_MspInit+0x44>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6193      	str	r3, [r2, #24]
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <HAL_MspInit+0x44>)
 8001040:	699b      	ldr	r3, [r3, #24]
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	607b      	str	r3, [r7, #4]
 8001048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <HAL_MspInit+0x44>)
 800104c:	69db      	ldr	r3, [r3, #28]
 800104e:	4a08      	ldr	r2, [pc, #32]	; (8001070 <HAL_MspInit+0x44>)
 8001050:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001054:	61d3      	str	r3, [r2, #28]
 8001056:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_MspInit+0x44>)
 8001058:	69db      	ldr	r3, [r3, #28]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001062:	2007      	movs	r0, #7
 8001064:	f002 f812 	bl	800308c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001068:	bf00      	nop
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40021000 	.word	0x40021000

08001074 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001094:	d124      	bne.n	80010e0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 8001098:	695b      	ldr	r3, [r3, #20]
 800109a:	4a13      	ldr	r2, [pc, #76]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 800109c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a0:	6153      	str	r3, [r2, #20]
 80010a2:	4b11      	ldr	r3, [pc, #68]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 80010a4:	695b      	ldr	r3, [r3, #20]
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 80010b0:	695b      	ldr	r3, [r3, #20]
 80010b2:	4a0d      	ldr	r2, [pc, #52]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010b8:	6153      	str	r3, [r2, #20]
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <HAL_ADC_MspInit+0x74>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010c6:	2301      	movs	r3, #1
 80010c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ca:	2303      	movs	r3, #3
 80010cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010dc:	f002 fa24 	bl	8003528 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e0:	bf00      	nop
 80010e2:	3728      	adds	r7, #40	; 0x28
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000

080010ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <HAL_DAC_MspInit+0xd0>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d152      	bne.n	80011b4 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800110e:	4b2c      	ldr	r3, [pc, #176]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	4a2b      	ldr	r2, [pc, #172]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 8001114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001118:	61d3      	str	r3, [r2, #28]
 800111a:	4b29      	ldr	r3, [pc, #164]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 800111c:	69db      	ldr	r3, [r3, #28]
 800111e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	4a25      	ldr	r2, [pc, #148]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 800112c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001130:	6153      	str	r3, [r2, #20]
 8001132:	4b23      	ldr	r3, [pc, #140]	; (80011c0 <HAL_DAC_MspInit+0xd4>)
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800113e:	2310      	movs	r3, #16
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001142:	2303      	movs	r3, #3
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001154:	f002 f9e8 	bl	8003528 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001158:	4b1a      	ldr	r3, [pc, #104]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 800115a:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <HAL_DAC_MspInit+0xdc>)
 800115c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115e:	4b19      	ldr	r3, [pc, #100]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 8001160:	2210      	movs	r2, #16
 8001162:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001164:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800116a:	4b16      	ldr	r3, [pc, #88]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001170:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 8001172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001176:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 800117a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800117e:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 8001182:	2220      	movs	r2, #32
 8001184:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b0f      	ldr	r3, [pc, #60]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800118c:	480d      	ldr	r0, [pc, #52]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 800118e:	f002 f82d 	bl	80031ec <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 8001198:	f7ff ff40 	bl	800101c <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_DAC_MspInit+0xe0>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a0a      	ldr	r2, [pc, #40]	; (80011cc <HAL_DAC_MspInit+0xe0>)
 80011a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011a6:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a06      	ldr	r2, [pc, #24]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <HAL_DAC_MspInit+0xd8>)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40007400 	.word	0x40007400
 80011c0:	40021000 	.word	0x40021000
 80011c4:	200009f0 	.word	0x200009f0
 80011c8:	40020030 	.word	0x40020030
 80011cc:	40010000 	.word	0x40010000

080011d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011e0:	d114      	bne.n	800120c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	4a18      	ldr	r2, [pc, #96]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	61d3      	str	r3, [r2, #28]
 80011ee:	4b16      	ldr	r3, [pc, #88]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	201c      	movs	r0, #28
 8001200:	f001 ff4f 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001204:	201c      	movs	r0, #28
 8001206:	f001 ff68 	bl	80030da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800120a:	e018      	b.n	800123e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <HAL_TIM_Base_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d113      	bne.n	800123e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001216:	4b0c      	ldr	r3, [pc, #48]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a0b      	ldr	r2, [pc, #44]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <HAL_TIM_Base_MspInit+0x78>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800122e:	2200      	movs	r2, #0
 8001230:	2100      	movs	r1, #0
 8001232:	2019      	movs	r0, #25
 8001234:	f001 ff35 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001238:	2019      	movs	r0, #25
 800123a:	f001 ff4e 	bl	80030da <HAL_NVIC_EnableIRQ>
}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	40014400 	.word	0x40014400

08001250 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001258:	f107 0314 	add.w	r3, r7, #20
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a1b      	ldr	r2, [pc, #108]	; (80012dc <HAL_UART_MspInit+0x8c>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d130      	bne.n	80012d4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001274:	69db      	ldr	r3, [r3, #28]
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001278:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800127c:	61d3      	str	r3, [r2, #28]
 800127e:	4b18      	ldr	r3, [pc, #96]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001280:	69db      	ldr	r3, [r3, #28]
 8001282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001286:	613b      	str	r3, [r7, #16]
 8001288:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <HAL_UART_MspInit+0x90>)
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	4a14      	ldr	r2, [pc, #80]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001294:	6153      	str	r3, [r2, #20]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_UART_MspInit+0x90>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012a2:	230c      	movs	r3, #12
 80012a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a6:	2302      	movs	r3, #2
 80012a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ae:	2300      	movs	r3, #0
 80012b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012b2:	2307      	movs	r3, #7
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b6:	f107 0314 	add.w	r3, r7, #20
 80012ba:	4619      	mov	r1, r3
 80012bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c0:	f002 f932 	bl	8003528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80012c4:	2200      	movs	r2, #0
 80012c6:	2100      	movs	r1, #0
 80012c8:	2026      	movs	r0, #38	; 0x26
 80012ca:	f001 feea 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80012ce:	2026      	movs	r0, #38	; 0x26
 80012d0:	f001 ff03 	bl	80030da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d4:	bf00      	nop
 80012d6:	3728      	adds	r7, #40	; 0x28
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40004400 	.word	0x40004400
 80012e0:	40021000 	.word	0x40021000

080012e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <HardFault_Handler+0x4>

080012f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012fc:	e7fe      	b.n	80012fc <MemManage_Handler+0x4>

080012fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012fe:	b480      	push	{r7}
 8001300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001302:	e7fe      	b.n	8001302 <BusFault_Handler+0x4>

08001304 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001308:	e7fe      	b.n	8001308 <UsageFault_Handler+0x4>

0800130a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001326:	b480      	push	{r7}
 8001328:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800132a:	bf00      	nop
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001338:	f000 fbe4 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	bd80      	pop	{r7, pc}

08001340 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8001344:	4802      	ldr	r0, [pc, #8]	; (8001350 <DMA1_Channel3_IRQHandler+0x10>)
 8001346:	f002 f80f 	bl	8003368 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200009f0 	.word	0x200009f0

08001354 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8001358:	2040      	movs	r0, #64	; 0x40
 800135a:	f002 fab9 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800135e:	2080      	movs	r0, #128	; 0x80
 8001360:	f002 fab6 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8001364:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001368:	f002 fab2 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 800136c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001370:	f002 faae 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}

08001378 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800137c:	4802      	ldr	r0, [pc, #8]	; (8001388 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800137e:	f003 ff59 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000b54 	.word	0x20000b54

0800138c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001390:	4802      	ldr	r0, [pc, #8]	; (800139c <TIM2_IRQHandler+0x10>)
 8001392:	f003 ff4f 	bl	8005234 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001396:	bf00      	nop
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	20000a84 	.word	0x20000a84

080013a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80013a4:	4802      	ldr	r0, [pc, #8]	; (80013b0 <USART2_IRQHandler+0x10>)
 80013a6:	f004 fc5d 	bl	8005c64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	20000ad0 	.word	0x20000ad0

080013b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80013b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80013bc:	f002 fa88 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80013c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80013c4:	f002 fa84 	bl	80038d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80013c8:	bf00      	nop
 80013ca:	bd80      	pop	{r7, pc}

080013cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <SystemInit+0x20>)
 80013d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013d6:	4a05      	ldr	r2, [pc, #20]	; (80013ec <SystemInit+0x20>)
 80013d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <UART_Main_Function>:
uint8_t rx_byte[1];
uint8_t rx_bytes[10] = {0};
uint8_t rx_bytes_counter = 0;

void UART_Main_Function()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	if(rx_byte[0] != '\n')
 80013f4:	4b1d      	ldr	r3, [pc, #116]	; (800146c <UART_Main_Function+0x7c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b0a      	cmp	r3, #10
 80013fa:	d035      	beq.n	8001468 <UART_Main_Function+0x78>
	{
	  rx_bytes[rx_bytes_counter] = rx_byte[0];
 80013fc:	4b1c      	ldr	r3, [pc, #112]	; (8001470 <UART_Main_Function+0x80>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	4b1a      	ldr	r3, [pc, #104]	; (800146c <UART_Main_Function+0x7c>)
 8001404:	7819      	ldrb	r1, [r3, #0]
 8001406:	4b1b      	ldr	r3, [pc, #108]	; (8001474 <UART_Main_Function+0x84>)
 8001408:	5499      	strb	r1, [r3, r2]
	  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 800140a:	4b19      	ldr	r3, [pc, #100]	; (8001470 <UART_Main_Function+0x80>)
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d10a      	bne.n	8001428 <UART_Main_Function+0x38>
 8001412:	4b16      	ldr	r3, [pc, #88]	; (800146c <UART_Main_Function+0x7c>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b40      	cmp	r3, #64	; 0x40
 8001418:	d106      	bne.n	8001428 <UART_Main_Function+0x38>
		  rx_bytes_counter++;
 800141a:	4b15      	ldr	r3, [pc, #84]	; (8001470 <UART_Main_Function+0x80>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	4b13      	ldr	r3, [pc, #76]	; (8001470 <UART_Main_Function+0x80>)
 8001424:	701a      	strb	r2, [r3, #0]
 8001426:	e01a      	b.n	800145e <UART_Main_Function+0x6e>
	  } else if(rx_bytes_counter > 0){
 8001428:	4b11      	ldr	r3, [pc, #68]	; (8001470 <UART_Main_Function+0x80>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d016      	beq.n	800145e <UART_Main_Function+0x6e>
		  rx_bytes_counter++;
 8001430:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <UART_Main_Function+0x80>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	3301      	adds	r3, #1
 8001436:	b2da      	uxtb	r2, r3
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <UART_Main_Function+0x80>)
 800143a:	701a      	strb	r2, [r3, #0]
		  if(UART_Rx_Complete(rx_byte[0]))
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <UART_Main_Function+0x7c>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f000 f81b 	bl	800147c <UART_Rx_Complete>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <UART_Main_Function+0x6e>
		  {
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
 800144c:	4b08      	ldr	r3, [pc, #32]	; (8001470 <UART_Main_Function+0x80>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	4619      	mov	r1, r3
 8001452:	4808      	ldr	r0, [pc, #32]	; (8001474 <UART_Main_Function+0x84>)
 8001454:	f000 f824 	bl	80014a0 <UART_Interpret_Rx_Message>
			  rx_bytes_counter = 0;
 8001458:	4b05      	ldr	r3, [pc, #20]	; (8001470 <UART_Main_Function+0x80>)
 800145a:	2200      	movs	r2, #0
 800145c:	701a      	strb	r2, [r3, #0]
		  }
	  }
	  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800145e:	2201      	movs	r2, #1
 8001460:	4902      	ldr	r1, [pc, #8]	; (800146c <UART_Main_Function+0x7c>)
 8001462:	4805      	ldr	r0, [pc, #20]	; (8001478 <UART_Main_Function+0x88>)
 8001464:	f004 fbb0 	bl	8005bc8 <HAL_UART_Receive_IT>
	}
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}
 800146c:	20000ba0 	.word	0x20000ba0
 8001470:	20000052 	.word	0x20000052
 8001474:	20000048 	.word	0x20000048
 8001478:	20000ad0 	.word	0x20000ad0

0800147c <UART_Rx_Complete>:

bool UART_Rx_Complete(uint8_t last_byte)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8001486:	79fb      	ldrb	r3, [r7, #7]
 8001488:	2b21      	cmp	r3, #33	; 0x21
 800148a:	d101      	bne.n	8001490 <UART_Rx_Complete+0x14>
	{
		return true;
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <UART_Rx_Complete+0x16>
	}
	else
	{
		return false;
 8001490:	2300      	movs	r3, #0
	}
}
 8001492:	4618      	mov	r0, r3
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
	...

080014a0 <UART_Interpret_Rx_Message>:

void UART_Interpret_Rx_Message(uint8_t *rx_array, uint8_t length)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b084      	sub	sp, #16
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
 80014a8:	460b      	mov	r3, r1
 80014aa:	70fb      	strb	r3, [r7, #3]

	if(length > 7)
 80014ac:	78fb      	ldrb	r3, [r7, #3]
 80014ae:	2b07      	cmp	r3, #7
 80014b0:	d971      	bls.n	8001596 <UART_Interpret_Rx_Message+0xf6>
	{
		if(rx_array[2] == '*')
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	3302      	adds	r3, #2
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b2a      	cmp	r3, #42	; 0x2a
 80014ba:	d124      	bne.n	8001506 <UART_Interpret_Rx_Message+0x66>
		{
			// Requests
			switch(rx_array[4])
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3304      	adds	r3, #4
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b6d      	cmp	r3, #109	; 0x6d
 80014c4:	d002      	beq.n	80014cc <UART_Interpret_Rx_Message+0x2c>
 80014c6:	2b73      	cmp	r3, #115	; 0x73
 80014c8:	d007      	beq.n	80014da <UART_Interpret_Rx_Message+0x3a>
					UART_Request_Status();
					break;

				default:
					// Problems
					break;
 80014ca:	e064      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
					UART_Request_Measurement(rx_array[6]);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3306      	adds	r3, #6
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f868 	bl	80015a8 <UART_Request_Measurement>
					break;
 80014d8:	e05d      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
					if(rx_array[6] == '0'){
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	3306      	adds	r3, #6
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b30      	cmp	r3, #48	; 0x30
 80014e2:	d104      	bne.n	80014ee <UART_Interpret_Rx_Message+0x4e>
						OutputState.On = false;
 80014e4:	4b2e      	ldr	r3, [pc, #184]	; (80015a0 <UART_Interpret_Rx_Message+0x100>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 80014ec:	e008      	b.n	8001500 <UART_Interpret_Rx_Message+0x60>
					} else if(rx_array[6] == '1'){
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	3306      	adds	r3, #6
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b31      	cmp	r3, #49	; 0x31
 80014f6:	d103      	bne.n	8001500 <UART_Interpret_Rx_Message+0x60>
						OutputState.On = true;
 80014f8:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <UART_Interpret_Rx_Message+0x100>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					UART_Request_Status();
 8001500:	f000 f9a4 	bl	800184c <UART_Request_Status>
					break;
 8001504:	e047      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			}
		}
		else if(rx_array[2] == '$')
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3302      	adds	r3, #2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b24      	cmp	r3, #36	; 0x24
 800150e:	d137      	bne.n	8001580 <UART_Interpret_Rx_Message+0xe0>
		{
			// Set
			uint8_t key1 = rx_array[4];
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	791b      	ldrb	r3, [r3, #4]
 8001514:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	795b      	ldrb	r3, [r3, #5]
 800151a:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 800151c:	7bfb      	ldrb	r3, [r7, #15]
 800151e:	2b44      	cmp	r3, #68	; 0x44
 8001520:	d106      	bne.n	8001530 <UART_Interpret_Rx_Message+0x90>
 8001522:	7bbb      	ldrb	r3, [r7, #14]
 8001524:	2b56      	cmp	r3, #86	; 0x56
 8001526:	d103      	bne.n	8001530 <UART_Interpret_Rx_Message+0x90>
				// DC Voltage
				MeasurementState.Mode = DV;
 8001528:	4b1e      	ldr	r3, [pc, #120]	; (80015a4 <UART_Interpret_Rx_Message+0x104>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]
 800152e:	e032      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			} else if (key1 == 'A' && key2 == 'V'){
 8001530:	7bfb      	ldrb	r3, [r7, #15]
 8001532:	2b41      	cmp	r3, #65	; 0x41
 8001534:	d106      	bne.n	8001544 <UART_Interpret_Rx_Message+0xa4>
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	2b56      	cmp	r3, #86	; 0x56
 800153a:	d103      	bne.n	8001544 <UART_Interpret_Rx_Message+0xa4>
				// AC Voltage
				MeasurementState.Mode = AV;
 800153c:	4b19      	ldr	r3, [pc, #100]	; (80015a4 <UART_Interpret_Rx_Message+0x104>)
 800153e:	2202      	movs	r2, #2
 8001540:	701a      	strb	r2, [r3, #0]
 8001542:	e028      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			} else if (key1 == 'D' && key2 == 'I'){
 8001544:	7bfb      	ldrb	r3, [r7, #15]
 8001546:	2b44      	cmp	r3, #68	; 0x44
 8001548:	d106      	bne.n	8001558 <UART_Interpret_Rx_Message+0xb8>
 800154a:	7bbb      	ldrb	r3, [r7, #14]
 800154c:	2b49      	cmp	r3, #73	; 0x49
 800154e:	d103      	bne.n	8001558 <UART_Interpret_Rx_Message+0xb8>
				// DC Current
				MeasurementState.Mode = DI;
 8001550:	4b14      	ldr	r3, [pc, #80]	; (80015a4 <UART_Interpret_Rx_Message+0x104>)
 8001552:	2201      	movs	r2, #1
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	e01e      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			} else if (key1 == 'A' && key2 == 'I'){
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	2b41      	cmp	r3, #65	; 0x41
 800155c:	d106      	bne.n	800156c <UART_Interpret_Rx_Message+0xcc>
 800155e:	7bbb      	ldrb	r3, [r7, #14]
 8001560:	2b49      	cmp	r3, #73	; 0x49
 8001562:	d103      	bne.n	800156c <UART_Interpret_Rx_Message+0xcc>
				// AC Current
				MeasurementState.Mode = AI;
 8001564:	4b0f      	ldr	r3, [pc, #60]	; (80015a4 <UART_Interpret_Rx_Message+0x104>)
 8001566:	2203      	movs	r2, #3
 8001568:	701a      	strb	r2, [r3, #0]
 800156a:	e014      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			} else if (key1 == 'T' && key2 == 'C'){
 800156c:	7bfb      	ldrb	r3, [r7, #15]
 800156e:	2b54      	cmp	r3, #84	; 0x54
 8001570:	d111      	bne.n	8001596 <UART_Interpret_Rx_Message+0xf6>
 8001572:	7bbb      	ldrb	r3, [r7, #14]
 8001574:	2b43      	cmp	r3, #67	; 0x43
 8001576:	d10e      	bne.n	8001596 <UART_Interpret_Rx_Message+0xf6>
				// Temperature
				MeasurementState.Mode = TC;
 8001578:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <UART_Interpret_Rx_Message+0x104>)
 800157a:	2204      	movs	r2, #4
 800157c:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 800157e:	e00a      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
		}else if(rx_array[2] == '^'){
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3302      	adds	r3, #2
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b5e      	cmp	r3, #94	; 0x5e
 8001588:	d105      	bne.n	8001596 <UART_Interpret_Rx_Message+0xf6>
			UART_Set_Output_Parameter(rx_array, length);
 800158a:	78fb      	ldrb	r3, [r7, #3]
 800158c:	4619      	mov	r1, r3
 800158e:	6878      	ldr	r0, [r7, #4]
 8001590:	f000 f9ba 	bl	8001908 <UART_Set_Output_Parameter>
}
 8001594:	e7ff      	b.n	8001596 <UART_Interpret_Rx_Message+0xf6>
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000834 	.word	0x20000834
 80015a4:	20000828 	.word	0x20000828

080015a8 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b087      	sub	sp, #28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 80015b2:	4b9f      	ldr	r3, [pc, #636]	; (8001830 <UART_Request_Measurement+0x288>)
 80015b4:	f107 0408 	add.w	r4, r7, #8
 80015b8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015ba:	c407      	stmia	r4!, {r0, r1, r2}
 80015bc:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 80015be:	79fb      	ldrb	r3, [r7, #7]
 80015c0:	3b61      	subs	r3, #97	; 0x61
 80015c2:	2b13      	cmp	r3, #19
 80015c4:	f200 8122 	bhi.w	800180c <UART_Request_Measurement+0x264>
 80015c8:	a201      	add	r2, pc, #4	; (adr r2, 80015d0 <UART_Request_Measurement+0x28>)
 80015ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ce:	bf00      	nop
 80015d0:	08001621 	.word	0x08001621
 80015d4:	0800180d 	.word	0x0800180d
 80015d8:	0800180d 	.word	0x0800180d
 80015dc:	0800180d 	.word	0x0800180d
 80015e0:	0800180d 	.word	0x0800180d
 80015e4:	08001769 	.word	0x08001769
 80015e8:	0800180d 	.word	0x0800180d
 80015ec:	0800180d 	.word	0x0800180d
 80015f0:	0800180d 	.word	0x0800180d
 80015f4:	0800180d 	.word	0x0800180d
 80015f8:	0800180d 	.word	0x0800180d
 80015fc:	0800180d 	.word	0x0800180d
 8001600:	0800180d 	.word	0x0800180d
 8001604:	0800180d 	.word	0x0800180d
 8001608:	080016c5 	.word	0x080016c5
 800160c:	0800180d 	.word	0x0800180d
 8001610:	0800180d 	.word	0x0800180d
 8001614:	0800180d 	.word	0x0800180d
 8001618:	0800180d 	.word	0x0800180d
 800161c:	0800180d 	.word	0x0800180d
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8001620:	2361      	movs	r3, #97	; 0x61
 8001622:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8001624:	4b83      	ldr	r3, [pc, #524]	; (8001834 <UART_Request_Measurement+0x28c>)
 8001626:	885b      	ldrh	r3, [r3, #2]
 8001628:	4a83      	ldr	r2, [pc, #524]	; (8001838 <UART_Request_Measurement+0x290>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	099b      	lsrs	r3, r3, #6
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b82      	ldr	r3, [pc, #520]	; (800183c <UART_Request_Measurement+0x294>)
 8001634:	fba3 1302 	umull	r1, r3, r3, r2
 8001638:	08d9      	lsrs	r1, r3, #3
 800163a:	460b      	mov	r3, r1
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	3330      	adds	r3, #48	; 0x30
 800164a:	b2db      	uxtb	r3, r3
 800164c:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Amplitude/100) % 10) + 48;
 800164e:	4b79      	ldr	r3, [pc, #484]	; (8001834 <UART_Request_Measurement+0x28c>)
 8001650:	885b      	ldrh	r3, [r3, #2]
 8001652:	4a7b      	ldr	r2, [pc, #492]	; (8001840 <UART_Request_Measurement+0x298>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	095b      	lsrs	r3, r3, #5
 800165a:	b29a      	uxth	r2, r3
 800165c:	4b77      	ldr	r3, [pc, #476]	; (800183c <UART_Request_Measurement+0x294>)
 800165e:	fba3 1302 	umull	r1, r3, r3, r2
 8001662:	08d9      	lsrs	r1, r3, #3
 8001664:	460b      	mov	r3, r1
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	440b      	add	r3, r1
 800166a:	005b      	lsls	r3, r3, #1
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	b29b      	uxth	r3, r3
 8001670:	b2db      	uxtb	r3, r3
 8001672:	3330      	adds	r3, #48	; 0x30
 8001674:	b2db      	uxtb	r3, r3
 8001676:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8001678:	4b6e      	ldr	r3, [pc, #440]	; (8001834 <UART_Request_Measurement+0x28c>)
 800167a:	885b      	ldrh	r3, [r3, #2]
 800167c:	4a6f      	ldr	r2, [pc, #444]	; (800183c <UART_Request_Measurement+0x294>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	08db      	lsrs	r3, r3, #3
 8001684:	b29a      	uxth	r2, r3
 8001686:	4b6d      	ldr	r3, [pc, #436]	; (800183c <UART_Request_Measurement+0x294>)
 8001688:	fba3 1302 	umull	r1, r3, r3, r2
 800168c:	08d9      	lsrs	r1, r3, #3
 800168e:	460b      	mov	r3, r1
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	440b      	add	r3, r1
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	b2db      	uxtb	r3, r3
 800169c:	3330      	adds	r3, #48	; 0x30
 800169e:	b2db      	uxtb	r3, r3
 80016a0:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Amplitude % 10) + 48;
 80016a2:	4b64      	ldr	r3, [pc, #400]	; (8001834 <UART_Request_Measurement+0x28c>)
 80016a4:	885a      	ldrh	r2, [r3, #2]
 80016a6:	4b65      	ldr	r3, [pc, #404]	; (800183c <UART_Request_Measurement+0x294>)
 80016a8:	fba3 1302 	umull	r1, r3, r3, r2
 80016ac:	08d9      	lsrs	r1, r3, #3
 80016ae:	460b      	mov	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	b2db      	uxtb	r3, r3
 80016bc:	3330      	adds	r3, #48	; 0x30
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	747b      	strb	r3, [r7, #17]
			break;
 80016c2:	e0a4      	b.n	800180e <UART_Request_Measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 80016c4:	236f      	movs	r3, #111	; 0x6f
 80016c6:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Offset/1000) % 10) + 48;
 80016c8:	4b5a      	ldr	r3, [pc, #360]	; (8001834 <UART_Request_Measurement+0x28c>)
 80016ca:	891b      	ldrh	r3, [r3, #8]
 80016cc:	4a5a      	ldr	r2, [pc, #360]	; (8001838 <UART_Request_Measurement+0x290>)
 80016ce:	fba2 2303 	umull	r2, r3, r2, r3
 80016d2:	099b      	lsrs	r3, r3, #6
 80016d4:	b29a      	uxth	r2, r3
 80016d6:	4b59      	ldr	r3, [pc, #356]	; (800183c <UART_Request_Measurement+0x294>)
 80016d8:	fba3 1302 	umull	r1, r3, r3, r2
 80016dc:	08d9      	lsrs	r1, r3, #3
 80016de:	460b      	mov	r3, r1
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	440b      	add	r3, r1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	b29b      	uxth	r3, r3
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	3330      	adds	r3, #48	; 0x30
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Offset/100) % 10) + 48;
 80016f2:	4b50      	ldr	r3, [pc, #320]	; (8001834 <UART_Request_Measurement+0x28c>)
 80016f4:	891b      	ldrh	r3, [r3, #8]
 80016f6:	4a52      	ldr	r2, [pc, #328]	; (8001840 <UART_Request_Measurement+0x298>)
 80016f8:	fba2 2303 	umull	r2, r3, r2, r3
 80016fc:	095b      	lsrs	r3, r3, #5
 80016fe:	b29a      	uxth	r2, r3
 8001700:	4b4e      	ldr	r3, [pc, #312]	; (800183c <UART_Request_Measurement+0x294>)
 8001702:	fba3 1302 	umull	r1, r3, r3, r2
 8001706:	08d9      	lsrs	r1, r3, #3
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	1ad3      	subs	r3, r2, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3330      	adds	r3, #48	; 0x30
 8001718:	b2db      	uxtb	r3, r3
 800171a:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Offset/10) % 10) + 48;
 800171c:	4b45      	ldr	r3, [pc, #276]	; (8001834 <UART_Request_Measurement+0x28c>)
 800171e:	891b      	ldrh	r3, [r3, #8]
 8001720:	4a46      	ldr	r2, [pc, #280]	; (800183c <UART_Request_Measurement+0x294>)
 8001722:	fba2 2303 	umull	r2, r3, r2, r3
 8001726:	08db      	lsrs	r3, r3, #3
 8001728:	b29a      	uxth	r2, r3
 800172a:	4b44      	ldr	r3, [pc, #272]	; (800183c <UART_Request_Measurement+0x294>)
 800172c:	fba3 1302 	umull	r1, r3, r3, r2
 8001730:	08d9      	lsrs	r1, r3, #3
 8001732:	460b      	mov	r3, r1
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	b29b      	uxth	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	3330      	adds	r3, #48	; 0x30
 8001742:	b2db      	uxtb	r3, r3
 8001744:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Offset % 10) + 48;
 8001746:	4b3b      	ldr	r3, [pc, #236]	; (8001834 <UART_Request_Measurement+0x28c>)
 8001748:	891a      	ldrh	r2, [r3, #8]
 800174a:	4b3c      	ldr	r3, [pc, #240]	; (800183c <UART_Request_Measurement+0x294>)
 800174c:	fba3 1302 	umull	r1, r3, r3, r2
 8001750:	08d9      	lsrs	r1, r3, #3
 8001752:	460b      	mov	r3, r1
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	440b      	add	r3, r1
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	1ad3      	subs	r3, r2, r3
 800175c:	b29b      	uxth	r3, r3
 800175e:	b2db      	uxtb	r3, r3
 8001760:	3330      	adds	r3, #48	; 0x30
 8001762:	b2db      	uxtb	r3, r3
 8001764:	747b      	strb	r3, [r7, #17]
			break;
 8001766:	e052      	b.n	800180e <UART_Request_Measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8001768:	2366      	movs	r3, #102	; 0x66
 800176a:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Frequency/1000) % 10) + 48;
 800176c:	4b31      	ldr	r3, [pc, #196]	; (8001834 <UART_Request_Measurement+0x28c>)
 800176e:	889b      	ldrh	r3, [r3, #4]
 8001770:	4a31      	ldr	r2, [pc, #196]	; (8001838 <UART_Request_Measurement+0x290>)
 8001772:	fba2 2303 	umull	r2, r3, r2, r3
 8001776:	099b      	lsrs	r3, r3, #6
 8001778:	b29a      	uxth	r2, r3
 800177a:	4b30      	ldr	r3, [pc, #192]	; (800183c <UART_Request_Measurement+0x294>)
 800177c:	fba3 1302 	umull	r1, r3, r3, r2
 8001780:	08d9      	lsrs	r1, r3, #3
 8001782:	460b      	mov	r3, r1
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	440b      	add	r3, r1
 8001788:	005b      	lsls	r3, r3, #1
 800178a:	1ad3      	subs	r3, r2, r3
 800178c:	b29b      	uxth	r3, r3
 800178e:	b2db      	uxtb	r3, r3
 8001790:	3330      	adds	r3, #48	; 0x30
 8001792:	b2db      	uxtb	r3, r3
 8001794:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Frequency/100) % 10) + 48;
 8001796:	4b27      	ldr	r3, [pc, #156]	; (8001834 <UART_Request_Measurement+0x28c>)
 8001798:	889b      	ldrh	r3, [r3, #4]
 800179a:	4a29      	ldr	r2, [pc, #164]	; (8001840 <UART_Request_Measurement+0x298>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	095b      	lsrs	r3, r3, #5
 80017a2:	b29a      	uxth	r2, r3
 80017a4:	4b25      	ldr	r3, [pc, #148]	; (800183c <UART_Request_Measurement+0x294>)
 80017a6:	fba3 1302 	umull	r1, r3, r3, r2
 80017aa:	08d9      	lsrs	r1, r3, #3
 80017ac:	460b      	mov	r3, r1
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	440b      	add	r3, r1
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3330      	adds	r3, #48	; 0x30
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Frequency/10) % 10) + 48;
 80017c0:	4b1c      	ldr	r3, [pc, #112]	; (8001834 <UART_Request_Measurement+0x28c>)
 80017c2:	889b      	ldrh	r3, [r3, #4]
 80017c4:	4a1d      	ldr	r2, [pc, #116]	; (800183c <UART_Request_Measurement+0x294>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	08db      	lsrs	r3, r3, #3
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	4b1b      	ldr	r3, [pc, #108]	; (800183c <UART_Request_Measurement+0x294>)
 80017d0:	fba3 1302 	umull	r1, r3, r3, r2
 80017d4:	08d9      	lsrs	r1, r3, #3
 80017d6:	460b      	mov	r3, r1
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	440b      	add	r3, r1
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	3330      	adds	r3, #48	; 0x30
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Frequency % 10) + 48;
 80017ea:	4b12      	ldr	r3, [pc, #72]	; (8001834 <UART_Request_Measurement+0x28c>)
 80017ec:	889a      	ldrh	r2, [r3, #4]
 80017ee:	4b13      	ldr	r3, [pc, #76]	; (800183c <UART_Request_Measurement+0x294>)
 80017f0:	fba3 1302 	umull	r1, r3, r3, r2
 80017f4:	08d9      	lsrs	r1, r3, #3
 80017f6:	460b      	mov	r3, r1
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	440b      	add	r3, r1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	b29b      	uxth	r3, r3
 8001802:	b2db      	uxtb	r3, r3
 8001804:	3330      	adds	r3, #48	; 0x30
 8001806:	b2db      	uxtb	r3, r3
 8001808:	747b      	strb	r3, [r7, #17]
			break;
 800180a:	e000      	b.n	800180e <UART_Request_Measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 800180c:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 800180e:	f107 0108 	add.w	r1, r7, #8
 8001812:	230a      	movs	r3, #10
 8001814:	220d      	movs	r2, #13
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <UART_Request_Measurement+0x29c>)
 8001818:	f004 f942 	bl	8005aa0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	490a      	ldr	r1, [pc, #40]	; (8001848 <UART_Request_Measurement+0x2a0>)
 8001820:	4808      	ldr	r0, [pc, #32]	; (8001844 <UART_Request_Measurement+0x29c>)
 8001822:	f004 f9d1 	bl	8005bc8 <HAL_UART_Receive_IT>
}
 8001826:	bf00      	nop
 8001828:	371c      	adds	r7, #28
 800182a:	46bd      	mov	sp, r7
 800182c:	bd90      	pop	{r4, r7, pc}
 800182e:	bf00      	nop
 8001830:	08006f64 	.word	0x08006f64
 8001834:	20000828 	.word	0x20000828
 8001838:	10624dd3 	.word	0x10624dd3
 800183c:	cccccccd 	.word	0xcccccccd
 8001840:	51eb851f 	.word	0x51eb851f
 8001844:	20000ad0 	.word	0x20000ad0
 8001848:	20000ba0 	.word	0x20000ba0

0800184c <UART_Request_Status>:

void UART_Request_Status()
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 8001852:	4a28      	ldr	r2, [pc, #160]	; (80018f4 <UART_Request_Status+0xa8>)
 8001854:	1d3b      	adds	r3, r7, #4
 8001856:	ca07      	ldmia	r2, {r0, r1, r2}
 8001858:	c303      	stmia	r3!, {r0, r1}
 800185a:	801a      	strh	r2, [r3, #0]
 800185c:	3302      	adds	r3, #2
 800185e:	0c12      	lsrs	r2, r2, #16
 8001860:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 8001862:	4b25      	ldr	r3, [pc, #148]	; (80018f8 <UART_Request_Status+0xac>)
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	2b04      	cmp	r3, #4
 8001868:	d825      	bhi.n	80018b6 <UART_Request_Status+0x6a>
 800186a:	a201      	add	r2, pc, #4	; (adr r2, 8001870 <UART_Request_Status+0x24>)
 800186c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001870:	08001885 	.word	0x08001885
 8001874:	08001899 	.word	0x08001899
 8001878:	0800188f 	.word	0x0800188f
 800187c:	080018a3 	.word	0x080018a3
 8001880:	080018ad 	.word	0x080018ad
		case DV:
			// DV
			msg[2] = 'D';
 8001884:	2344      	movs	r3, #68	; 0x44
 8001886:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001888:	2356      	movs	r3, #86	; 0x56
 800188a:	71fb      	strb	r3, [r7, #7]
			break;
 800188c:	e014      	b.n	80018b8 <UART_Request_Status+0x6c>
		case AV:
			// AV
			msg[2] = 'A';
 800188e:	2341      	movs	r3, #65	; 0x41
 8001890:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8001892:	2356      	movs	r3, #86	; 0x56
 8001894:	71fb      	strb	r3, [r7, #7]
			break;
 8001896:	e00f      	b.n	80018b8 <UART_Request_Status+0x6c>
		case DI:
			// DI
			msg[2] = 'D';
 8001898:	2344      	movs	r3, #68	; 0x44
 800189a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 800189c:	2349      	movs	r3, #73	; 0x49
 800189e:	71fb      	strb	r3, [r7, #7]
			break;
 80018a0:	e00a      	b.n	80018b8 <UART_Request_Status+0x6c>
		case AI:
			// AI
			msg[2] = 'A';
 80018a2:	2341      	movs	r3, #65	; 0x41
 80018a4:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 80018a6:	2349      	movs	r3, #73	; 0x49
 80018a8:	71fb      	strb	r3, [r7, #7]
			break;
 80018aa:	e005      	b.n	80018b8 <UART_Request_Status+0x6c>
		case TC:
			// TC
			msg[2] = 'T';
 80018ac:	2354      	movs	r3, #84	; 0x54
 80018ae:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 80018b0:	2343      	movs	r3, #67	; 0x43
 80018b2:	71fb      	strb	r3, [r7, #7]
			break;
 80018b4:	e000      	b.n	80018b8 <UART_Request_Status+0x6c>
		default:
			// Problems
			break;
 80018b6:	bf00      	nop
	}
	msg[5] = (uint8_t)OutputState.Mode; // TODO: This might break! Need to test and try casting to uint8_t type
 80018b8:	4b10      	ldr	r3, [pc, #64]	; (80018fc <UART_Request_Status+0xb0>)
 80018ba:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80018be:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 80018c0:	4b0e      	ldr	r3, [pc, #56]	; (80018fc <UART_Request_Status+0xb0>)
 80018c2:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d002      	beq.n	80018d0 <UART_Request_Status+0x84>
		msg[7] = '1';
 80018ca:	2331      	movs	r3, #49	; 0x31
 80018cc:	72fb      	strb	r3, [r7, #11]
 80018ce:	e001      	b.n	80018d4 <UART_Request_Status+0x88>
	} else {
		msg[7] = '0';
 80018d0:	2330      	movs	r3, #48	; 0x30
 80018d2:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 80018d4:	1d39      	adds	r1, r7, #4
 80018d6:	230a      	movs	r3, #10
 80018d8:	220b      	movs	r2, #11
 80018da:	4809      	ldr	r0, [pc, #36]	; (8001900 <UART_Request_Status+0xb4>)
 80018dc:	f004 f8e0 	bl	8005aa0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80018e0:	2201      	movs	r2, #1
 80018e2:	4908      	ldr	r1, [pc, #32]	; (8001904 <UART_Request_Status+0xb8>)
 80018e4:	4806      	ldr	r0, [pc, #24]	; (8001900 <UART_Request_Status+0xb4>)
 80018e6:	f004 f96f 	bl	8005bc8 <HAL_UART_Receive_IT>

}
 80018ea:	bf00      	nop
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	08006f74 	.word	0x08006f74
 80018f8:	20000828 	.word	0x20000828
 80018fc:	20000834 	.word	0x20000834
 8001900:	20000ad0 	.word	0x20000ad0
 8001904:	20000ba0 	.word	0x20000ba0

08001908 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	791b      	ldrb	r3, [r3, #4]
 8001918:	73bb      	strb	r3, [r7, #14]
	uint8_t val0 = rx_array[6];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	799b      	ldrb	r3, [r3, #6]
 800191e:	737b      	strb	r3, [r7, #13]
	uint8_t received_value = 0;
 8001920:	2300      	movs	r3, #0
 8001922:	73fb      	strb	r3, [r7, #15]
	if(length > 9){
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	2b09      	cmp	r3, #9
 8001928:	d92c      	bls.n	8001984 <UART_Set_Output_Parameter+0x7c>
		uint8_t val1 = rx_array[7];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	79db      	ldrb	r3, [r3, #7]
 800192e:	733b      	strb	r3, [r7, #12]
		uint8_t val2 = rx_array[8];
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	7a1b      	ldrb	r3, [r3, #8]
 8001934:	72fb      	strb	r3, [r7, #11]
		uint8_t val3 = rx_array[9];
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	7a5b      	ldrb	r3, [r3, #9]
 800193a:	72bb      	strb	r3, [r7, #10]
		received_value += val0*1000;
 800193c:	7b7b      	ldrb	r3, [r7, #13]
 800193e:	461a      	mov	r2, r3
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	00db      	lsls	r3, r3, #3
 8001946:	b2da      	uxtb	r2, r3
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4413      	add	r3, r2
 800194c:	73fb      	strb	r3, [r7, #15]
		received_value += val1*100;
 800194e:	7b3b      	ldrb	r3, [r7, #12]
 8001950:	461a      	mov	r2, r3
 8001952:	0092      	lsls	r2, r2, #2
 8001954:	4413      	add	r3, r2
 8001956:	461a      	mov	r2, r3
 8001958:	0091      	lsls	r1, r2, #2
 800195a:	461a      	mov	r2, r3
 800195c:	460b      	mov	r3, r1
 800195e:	4413      	add	r3, r2
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	b2da      	uxtb	r2, r3
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	4413      	add	r3, r2
 8001968:	73fb      	strb	r3, [r7, #15]
		received_value += val2*10;
 800196a:	7afb      	ldrb	r3, [r7, #11]
 800196c:	461a      	mov	r2, r3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4413      	add	r3, r2
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	b2da      	uxtb	r2, r3
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	4413      	add	r3, r2
 800197a:	73fb      	strb	r3, [r7, #15]
		received_value += val3;
 800197c:	7bfa      	ldrb	r2, [r7, #15]
 800197e:	7abb      	ldrb	r3, [r7, #10]
 8001980:	4413      	add	r3, r2
 8001982:	73fb      	strb	r3, [r7, #15]
	}
	switch(param){
 8001984:	7bbb      	ldrb	r3, [r7, #14]
 8001986:	3b61      	subs	r3, #97	; 0x61
 8001988:	2b13      	cmp	r3, #19
 800198a:	d842      	bhi.n	8001a12 <UART_Set_Output_Parameter+0x10a>
 800198c:	a201      	add	r2, pc, #4	; (adr r2, 8001994 <UART_Set_Output_Parameter+0x8c>)
 800198e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001992:	bf00      	nop
 8001994:	080019ef 	.word	0x080019ef
 8001998:	08001a13 	.word	0x08001a13
 800199c:	08001a13 	.word	0x08001a13
 80019a0:	08001a13 	.word	0x08001a13
 80019a4:	08001a13 	.word	0x08001a13
 80019a8:	08001a07 	.word	0x08001a07
 80019ac:	08001a13 	.word	0x08001a13
 80019b0:	08001a13 	.word	0x08001a13
 80019b4:	08001a13 	.word	0x08001a13
 80019b8:	08001a13 	.word	0x08001a13
 80019bc:	08001a13 	.word	0x08001a13
 80019c0:	08001a13 	.word	0x08001a13
 80019c4:	08001a13 	.word	0x08001a13
 80019c8:	08001a13 	.word	0x08001a13
 80019cc:	080019fb 	.word	0x080019fb
 80019d0:	08001a13 	.word	0x08001a13
 80019d4:	08001a13 	.word	0x08001a13
 80019d8:	08001a13 	.word	0x08001a13
 80019dc:	08001a13 	.word	0x08001a13
 80019e0:	080019e5 	.word	0x080019e5
		case 't':
			// Type
			OutputState.Mode = (OutputMode)val0; // TODO: This might break! Need to test and try casting to OutputMode type
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <UART_Set_Output_Parameter+0x118>)
 80019e6:	7b7b      	ldrb	r3, [r7, #13]
 80019e8:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 80019ec:	e012      	b.n	8001a14 <UART_Set_Output_Parameter+0x10c>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 80019ee:	7bfb      	ldrb	r3, [r7, #15]
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <UART_Set_Output_Parameter+0x118>)
 80019f4:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
			break;
 80019f8:	e00c      	b.n	8001a14 <UART_Set_Output_Parameter+0x10c>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <UART_Set_Output_Parameter+0x118>)
 8001a00:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
			break;
 8001a04:	e006      	b.n	8001a14 <UART_Set_Output_Parameter+0x10c>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <UART_Set_Output_Parameter+0x118>)
 8001a0c:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
			break;
 8001a10:	e000      	b.n	8001a14 <UART_Set_Output_Parameter+0x10c>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8001a12:	bf00      	nop
	}
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	20000834 	.word	0x20000834

08001a24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a5c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a2a:	490e      	ldr	r1, [pc, #56]	; (8001a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a2c:	4a0e      	ldr	r2, [pc, #56]	; (8001a68 <LoopForever+0xe>)
  movs r3, #0
 8001a2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a30:	e002      	b.n	8001a38 <LoopCopyDataInit>

08001a32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a36:	3304      	adds	r3, #4

08001a38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a3c:	d3f9      	bcc.n	8001a32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a40:	4c0b      	ldr	r4, [pc, #44]	; (8001a70 <LoopForever+0x16>)
  movs r3, #0
 8001a42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a44:	e001      	b.n	8001a4a <LoopFillZerobss>

08001a46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a48:	3204      	adds	r2, #4

08001a4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a4c:	d3fb      	bcc.n	8001a46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a4e:	f7ff fcbd 	bl	80013cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a52:	f005 fa41 	bl	8006ed8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a56:	f7fe feff 	bl	8000858 <main>

08001a5a <LoopForever>:

LoopForever:
    b LoopForever
 8001a5a:	e7fe      	b.n	8001a5a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001a68:	08006fc0 	.word	0x08006fc0
  ldr r2, =_sbss
 8001a6c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001a70:	20000ba8 	.word	0x20000ba8

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x28>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f001 faff 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff faca 	bl	800102c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fb17 	bl	80030f6 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f001 fadf 	bl	80030a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000010 	.word	0x20000010
 8001afc:	20000018 	.word	0x20000018
 8001b00:	20000014 	.word	0x20000014

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b06      	ldr	r3, [pc, #24]	; (8001b24 <HAL_IncTick+0x20>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_IncTick+0x24>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a04      	ldr	r2, [pc, #16]	; (8001b28 <HAL_IncTick+0x24>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000018 	.word	0x20000018
 8001b28:	20000ba4 	.word	0x20000ba4

08001b2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001b30:	4b03      	ldr	r3, [pc, #12]	; (8001b40 <HAL_GetTick+0x14>)
 8001b32:	681b      	ldr	r3, [r3, #0]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000ba4 	.word	0x20000ba4

08001b44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b4c:	f7ff ffee 	bl	8001b2c <HAL_GetTick>
 8001b50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b5c:	d005      	beq.n	8001b6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b5e:	4b09      	ldr	r3, [pc, #36]	; (8001b84 <HAL_Delay+0x40>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	461a      	mov	r2, r3
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4413      	add	r3, r2
 8001b68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001b6a:	bf00      	nop
 8001b6c:	f7ff ffde 	bl	8001b2c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d8f7      	bhi.n	8001b6c <HAL_Delay+0x28>
  {
  }
}
 8001b7c:	bf00      	nop
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	20000018 	.word	0x20000018

08001b88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b09a      	sub	sp, #104	; 0x68
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d101      	bne.n	8001ba8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e1e3      	b.n	8001f70 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	691b      	ldr	r3, [r3, #16]
 8001bac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb2:	f003 0310 	and.w	r3, r3, #16
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d176      	bne.n	8001ca8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d152      	bne.n	8001c68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f7ff fa49 	bl	8001074 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d13b      	bne.n	8001c68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f001 f861 	bl	8002cb8 <ADC_Disable>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f003 0310 	and.w	r3, r3, #16
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d12f      	bne.n	8001c68 <HAL_ADC_Init+0xe0>
 8001c08:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d12b      	bne.n	8001c68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c18:	f023 0302 	bic.w	r3, r3, #2
 8001c1c:	f043 0202 	orr.w	r2, r3, #2
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001c32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c44:	4b92      	ldr	r3, [pc, #584]	; (8001e90 <HAL_ADC_Init+0x308>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a92      	ldr	r2, [pc, #584]	; (8001e94 <HAL_ADC_Init+0x30c>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	0c9a      	lsrs	r2, r3, #18
 8001c50:	4613      	mov	r3, r2
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c5a:	e002      	b.n	8001c62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d1f9      	bne.n	8001c5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d007      	beq.n	8001c86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c84:	d110      	bne.n	8001ca8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	f023 0312 	bic.w	r3, r3, #18
 8001c8e:	f043 0210 	orr.w	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cac:	f003 0310 	and.w	r3, r3, #16
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8150 	bne.w	8001f56 <HAL_ADC_Init+0x3ce>
 8001cb6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 814b 	bne.w	8001f56 <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	f040 8143 	bne.w	8001f56 <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cd8:	f043 0202 	orr.w	r2, r3, #2
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ce8:	d004      	beq.n	8001cf4 <HAL_ADC_Init+0x16c>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a6a      	ldr	r2, [pc, #424]	; (8001e98 <HAL_ADC_Init+0x310>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_Init+0x170>
 8001cf4:	4b69      	ldr	r3, [pc, #420]	; (8001e9c <HAL_ADC_Init+0x314>)
 8001cf6:	e000      	b.n	8001cfa <HAL_ADC_Init+0x172>
 8001cf8:	4b69      	ldr	r3, [pc, #420]	; (8001ea0 <HAL_ADC_Init+0x318>)
 8001cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d04:	d102      	bne.n	8001d0c <HAL_ADC_Init+0x184>
 8001d06:	4b64      	ldr	r3, [pc, #400]	; (8001e98 <HAL_ADC_Init+0x310>)
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	e01a      	b.n	8001d42 <HAL_ADC_Init+0x1ba>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a61      	ldr	r2, [pc, #388]	; (8001e98 <HAL_ADC_Init+0x310>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d103      	bne.n	8001d1e <HAL_ADC_Init+0x196>
 8001d16:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	e011      	b.n	8001d42 <HAL_ADC_Init+0x1ba>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_ADC_Init+0x31c>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d102      	bne.n	8001d2e <HAL_ADC_Init+0x1a6>
 8001d28:	4b5f      	ldr	r3, [pc, #380]	; (8001ea8 <HAL_ADC_Init+0x320>)
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	e009      	b.n	8001d42 <HAL_ADC_Init+0x1ba>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a5d      	ldr	r2, [pc, #372]	; (8001ea8 <HAL_ADC_Init+0x320>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d102      	bne.n	8001d3e <HAL_ADC_Init+0x1b6>
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <HAL_ADC_Init+0x31c>)
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	e001      	b.n	8001d42 <HAL_ADC_Init+0x1ba>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0303 	and.w	r3, r3, #3
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d108      	bne.n	8001d62 <HAL_ADC_Init+0x1da>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b01      	cmp	r3, #1
 8001d5c:	d101      	bne.n	8001d62 <HAL_ADC_Init+0x1da>
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e000      	b.n	8001d64 <HAL_ADC_Init+0x1dc>
 8001d62:	2300      	movs	r3, #0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d11c      	bne.n	8001da2 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d68:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	689b      	ldr	r3, [r3, #8]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d107      	bne.n	8001d8a <HAL_ADC_Init+0x202>
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d101      	bne.n	8001d8a <HAL_ADC_Init+0x202>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_ADC_Init+0x204>
 8001d8a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d108      	bne.n	8001da2 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001d90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001da0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	7e5b      	ldrb	r3, [r3, #25]
 8001da6:	035b      	lsls	r3, r3, #13
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001dac:	2a01      	cmp	r2, #1
 8001dae:	d002      	beq.n	8001db6 <HAL_ADC_Init+0x22e>
 8001db0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001db4:	e000      	b.n	8001db8 <HAL_ADC_Init+0x230>
 8001db6:	2200      	movs	r2, #0
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	431a      	orrs	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d11b      	bne.n	8001e0e <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	7e5b      	ldrb	r3, [r3, #25]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de2:	3b01      	subs	r3, #1
 8001de4:	045a      	lsls	r2, r3, #17
 8001de6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001de8:	4313      	orrs	r3, r2
 8001dea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dee:	663b      	str	r3, [r7, #96]	; 0x60
 8001df0:	e00d      	b.n	8001e0e <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001dfa:	f043 0220 	orr.w	r2, r3, #32
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e06:	f043 0201 	orr.w	r2, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d054      	beq.n	8001ec0 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a22      	ldr	r2, [pc, #136]	; (8001ea4 <HAL_ADC_Init+0x31c>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d004      	beq.n	8001e2a <HAL_ADC_Init+0x2a2>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a20      	ldr	r2, [pc, #128]	; (8001ea8 <HAL_ADC_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d140      	bne.n	8001eac <HAL_ADC_Init+0x324>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2e:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001e32:	d02a      	beq.n	8001e8a <HAL_ADC_Init+0x302>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e3c:	d022      	beq.n	8001e84 <HAL_ADC_Init+0x2fc>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e42:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8001e46:	d01a      	beq.n	8001e7e <HAL_ADC_Init+0x2f6>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4c:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 8001e50:	d012      	beq.n	8001e78 <HAL_ADC_Init+0x2f0>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e56:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 8001e5a:	d00a      	beq.n	8001e72 <HAL_ADC_Init+0x2ea>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e60:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 8001e64:	d002      	beq.n	8001e6c <HAL_ADC_Init+0x2e4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	e023      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e6c:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001e70:	e020      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e72:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001e76:	e01d      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e78:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001e7c:	e01a      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e82:	e017      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e84:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 8001e88:	e014      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e8a:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001e8e:	e011      	b.n	8001eb4 <HAL_ADC_Init+0x32c>
 8001e90:	20000010 	.word	0x20000010
 8001e94:	431bde83 	.word	0x431bde83
 8001e98:	50000100 	.word	0x50000100
 8001e9c:	50000300 	.word	0x50000300
 8001ea0:	50000700 	.word	0x50000700
 8001ea4:	50000400 	.word	0x50000400
 8001ea8:	50000500 	.word	0x50000500
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d114      	bne.n	8001ef8 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	6812      	ldr	r2, [r2, #0]
 8001ed8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001edc:	f023 0302 	bic.w	r3, r3, #2
 8001ee0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	7e1b      	ldrb	r3, [r3, #24]
 8001ee6:	039a      	lsls	r2, r3, #14
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	68da      	ldr	r2, [r3, #12]
 8001efe:	4b1e      	ldr	r3, [pc, #120]	; (8001f78 <HAL_ADC_Init+0x3f0>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6812      	ldr	r2, [r2, #0]
 8001f06:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d10c      	bne.n	8001f2e <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f023 010f 	bic.w	r1, r3, #15
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	1e5a      	subs	r2, r3, #1
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f2c:	e007      	b.n	8001f3e <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 020f 	bic.w	r2, r2, #15
 8001f3c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f48:	f023 0303 	bic.w	r3, r3, #3
 8001f4c:	f043 0201 	orr.w	r2, r3, #1
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	641a      	str	r2, [r3, #64]	; 0x40
 8001f54:	e00a      	b.n	8001f6c <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5a:	f023 0312 	bic.w	r3, r3, #18
 8001f5e:	f043 0210 	orr.w	r2, r3, #16
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001f66:	2301      	movs	r3, #1
 8001f68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001f6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3768      	adds	r7, #104	; 0x68
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	fff0c007 	.word	0xfff0c007

08001f7c <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	f040 80f9 	bne.w	800218a <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_Start+0x2a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e0f4      	b.n	8002190 <HAL_ADC_Start+0x214>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	f000 fe1e 	bl	8002bf0 <ADC_Enable>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fb8:	7bfb      	ldrb	r3, [r7, #15]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f040 80e0 	bne.w	8002180 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fc8:	f023 0301 	bic.w	r3, r3, #1
 8001fcc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fdc:	d004      	beq.n	8001fe8 <HAL_ADC_Start+0x6c>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a6d      	ldr	r2, [pc, #436]	; (8002198 <HAL_ADC_Start+0x21c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d106      	bne.n	8001ff6 <HAL_ADC_Start+0x7a>
 8001fe8:	4b6c      	ldr	r3, [pc, #432]	; (800219c <HAL_ADC_Start+0x220>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f003 031f 	and.w	r3, r3, #31
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d010      	beq.n	8002016 <HAL_ADC_Start+0x9a>
 8001ff4:	e005      	b.n	8002002 <HAL_ADC_Start+0x86>
 8001ff6:	4b6a      	ldr	r3, [pc, #424]	; (80021a0 <HAL_ADC_Start+0x224>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 031f 	and.w	r3, r3, #31
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d009      	beq.n	8002016 <HAL_ADC_Start+0x9a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800200a:	d004      	beq.n	8002016 <HAL_ADC_Start+0x9a>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a64      	ldr	r2, [pc, #400]	; (80021a4 <HAL_ADC_Start+0x228>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d115      	bne.n	8002042 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d036      	beq.n	800209e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002034:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002038:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002040:	e02d      	b.n	800209e <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002056:	d004      	beq.n	8002062 <HAL_ADC_Start+0xe6>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a4e      	ldr	r2, [pc, #312]	; (8002198 <HAL_ADC_Start+0x21c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10a      	bne.n	8002078 <HAL_ADC_Start+0xfc>
 8002062:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf14      	ite	ne
 8002070:	2301      	movne	r3, #1
 8002072:	2300      	moveq	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e008      	b.n	800208a <HAL_ADC_Start+0x10e>
 8002078:	4b4a      	ldr	r3, [pc, #296]	; (80021a4 <HAL_ADC_Start+0x228>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002096:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020aa:	d106      	bne.n	80020ba <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b0:	f023 0206 	bic.w	r2, r3, #6
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
 80020b8:	e002      	b.n	80020c0 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2200      	movs	r2, #0
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	221c      	movs	r2, #28
 80020ce:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020d8:	d004      	beq.n	80020e4 <HAL_ADC_Start+0x168>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a2e      	ldr	r2, [pc, #184]	; (8002198 <HAL_ADC_Start+0x21c>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d106      	bne.n	80020f2 <HAL_ADC_Start+0x176>
 80020e4:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_ADC_Start+0x220>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f003 031f 	and.w	r3, r3, #31
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d03e      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 80020f0:	e005      	b.n	80020fe <HAL_ADC_Start+0x182>
 80020f2:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <HAL_ADC_Start+0x224>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 031f 	and.w	r3, r3, #31
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d037      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002106:	d004      	beq.n	8002112 <HAL_ADC_Start+0x196>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a22      	ldr	r2, [pc, #136]	; (8002198 <HAL_ADC_Start+0x21c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d106      	bne.n	8002120 <HAL_ADC_Start+0x1a4>
 8002112:	4b22      	ldr	r3, [pc, #136]	; (800219c <HAL_ADC_Start+0x220>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 031f 	and.w	r3, r3, #31
 800211a:	2b05      	cmp	r3, #5
 800211c:	d027      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 800211e:	e005      	b.n	800212c <HAL_ADC_Start+0x1b0>
 8002120:	4b1f      	ldr	r3, [pc, #124]	; (80021a0 <HAL_ADC_Start+0x224>)
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	f003 031f 	and.w	r3, r3, #31
 8002128:	2b05      	cmp	r3, #5
 800212a:	d020      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002134:	d004      	beq.n	8002140 <HAL_ADC_Start+0x1c4>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_ADC_Start+0x21c>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d106      	bne.n	800214e <HAL_ADC_Start+0x1d2>
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <HAL_ADC_Start+0x220>)
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	f003 031f 	and.w	r3, r3, #31
 8002148:	2b09      	cmp	r3, #9
 800214a:	d010      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 800214c:	e005      	b.n	800215a <HAL_ADC_Start+0x1de>
 800214e:	4b14      	ldr	r3, [pc, #80]	; (80021a0 <HAL_ADC_Start+0x224>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2b09      	cmp	r3, #9
 8002158:	d009      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002162:	d004      	beq.n	800216e <HAL_ADC_Start+0x1f2>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <HAL_ADC_Start+0x228>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d10f      	bne.n	800218e <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f042 0204 	orr.w	r2, r2, #4
 800217c:	609a      	str	r2, [r3, #8]
 800217e:	e006      	b.n	800218e <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002188:	e001      	b.n	800218e <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800218a:	2302      	movs	r3, #2
 800218c:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800218e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002190:	4618      	mov	r0, r3
 8002192:	3710      	adds	r7, #16
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	50000100 	.word	0x50000100
 800219c:	50000300 	.word	0x50000300
 80021a0:	50000700 	.word	0x50000700
 80021a4:	50000400 	.word	0x50000400

080021a8 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021b0:	2300      	movs	r3, #0
 80021b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_ADC_Stop+0x1a>
 80021be:	2302      	movs	r3, #2
 80021c0:	e023      	b.n	800220a <HAL_ADC_Stop+0x62>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80021ca:	216c      	movs	r1, #108	; 0x6c
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f000 fdd9 	bl	8002d84 <ADC_ConversionStop>
 80021d2:	4603      	mov	r3, r0
 80021d4:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80021d6:	7bfb      	ldrb	r3, [r7, #15]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 fd6b 	bl	8002cb8 <ADC_Disable>
 80021e2:	4603      	mov	r3, r0
 80021e4:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80021e6:	7bfb      	ldrb	r3, [r7, #15]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d109      	bne.n	8002200 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021f4:	f023 0301 	bic.w	r3, r3, #1
 80021f8:	f043 0201 	orr.w	r2, r3, #1
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002208:	7bfb      	ldrb	r3, [r7, #15]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
	...

08002214 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	2b08      	cmp	r3, #8
 8002228:	d102      	bne.n	8002230 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800222a:	2308      	movs	r3, #8
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	e03a      	b.n	80022a6 <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002238:	d004      	beq.n	8002244 <HAL_ADC_PollForConversion+0x30>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a72      	ldr	r2, [pc, #456]	; (8002408 <HAL_ADC_PollForConversion+0x1f4>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d101      	bne.n	8002248 <HAL_ADC_PollForConversion+0x34>
 8002244:	4b71      	ldr	r3, [pc, #452]	; (800240c <HAL_ADC_PollForConversion+0x1f8>)
 8002246:	e000      	b.n	800224a <HAL_ADC_PollForConversion+0x36>
 8002248:	4b71      	ldr	r3, [pc, #452]	; (8002410 <HAL_ADC_PollForConversion+0x1fc>)
 800224a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	f003 031f 	and.w	r3, r3, #31
 8002254:	2b00      	cmp	r3, #0
 8002256:	d112      	bne.n	800227e <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b01      	cmp	r3, #1
 8002264:	d11d      	bne.n	80022a2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f043 0220 	orr.w	r2, r3, #32
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0bf      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d00b      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0220 	orr.w	r2, r3, #32
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e0ad      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80022a2:	230c      	movs	r3, #12
 80022a4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ae:	d004      	beq.n	80022ba <HAL_ADC_PollForConversion+0xa6>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a54      	ldr	r2, [pc, #336]	; (8002408 <HAL_ADC_PollForConversion+0x1f4>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d106      	bne.n	80022c8 <HAL_ADC_PollForConversion+0xb4>
 80022ba:	4b54      	ldr	r3, [pc, #336]	; (800240c <HAL_ADC_PollForConversion+0x1f8>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 031f 	and.w	r3, r3, #31
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d010      	beq.n	80022e8 <HAL_ADC_PollForConversion+0xd4>
 80022c6:	e005      	b.n	80022d4 <HAL_ADC_PollForConversion+0xc0>
 80022c8:	4b51      	ldr	r3, [pc, #324]	; (8002410 <HAL_ADC_PollForConversion+0x1fc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d009      	beq.n	80022e8 <HAL_ADC_PollForConversion+0xd4>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022dc:	d004      	beq.n	80022e8 <HAL_ADC_PollForConversion+0xd4>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a4c      	ldr	r2, [pc, #304]	; (8002414 <HAL_ADC_PollForConversion+0x200>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d104      	bne.n	80022f2 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	e00f      	b.n	8002312 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022fa:	d004      	beq.n	8002306 <HAL_ADC_PollForConversion+0xf2>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a41      	ldr	r2, [pc, #260]	; (8002408 <HAL_ADC_PollForConversion+0x1f4>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d102      	bne.n	800230c <HAL_ADC_PollForConversion+0xf8>
 8002306:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800230a:	e000      	b.n	800230e <HAL_ADC_PollForConversion+0xfa>
 800230c:	4b41      	ldr	r3, [pc, #260]	; (8002414 <HAL_ADC_PollForConversion+0x200>)
 800230e:	68db      	ldr	r3, [r3, #12]
 8002310:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8002312:	f7ff fc0b 	bl	8001b2c <HAL_GetTick>
 8002316:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002318:	e021      	b.n	800235e <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002320:	d01d      	beq.n	800235e <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d007      	beq.n	8002338 <HAL_ADC_PollForConversion+0x124>
 8002328:	f7ff fc00 	bl	8001b2c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d212      	bcs.n	800235e <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	4013      	ands	r3, r2
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f043 0204 	orr.w	r2, r3, #4
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e04f      	b.n	80023fe <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0d6      	beq.n	800231a <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002370:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002382:	2b00      	cmp	r3, #0
 8002384:	d131      	bne.n	80023ea <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800238c:	2b00      	cmp	r3, #0
 800238e:	d12c      	bne.n	80023ea <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0308 	and.w	r3, r3, #8
 800239a:	2b08      	cmp	r3, #8
 800239c:	d125      	bne.n	80023ea <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d112      	bne.n	80023d2 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d112      	bne.n	80023ea <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
 80023d0:	e00b      	b.n	80023ea <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	f043 0220 	orr.w	r2, r3, #32
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e2:	f043 0201 	orr.w	r2, r3, #1
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d103      	bne.n	80023fc <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	50000100 	.word	0x50000100
 800240c:	50000300 	.word	0x50000300
 8002410:	50000700 	.word	0x50000700
 8002414:	50000400 	.word	0x50000400

08002418 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002426:	4618      	mov	r0, r3
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002434:	b480      	push	{r7}
 8002436:	b09b      	sub	sp, #108	; 0x6c
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_ConfigChannel+0x22>
 8002452:	2302      	movs	r3, #2
 8002454:	e2cb      	b.n	80029ee <HAL_ADC_ConfigChannel+0x5ba>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	f040 82af 	bne.w	80029cc <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b04      	cmp	r3, #4
 8002474:	d81c      	bhi.n	80024b0 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	005b      	lsls	r3, r3, #1
 8002488:	461a      	mov	r2, r3
 800248a:	231f      	movs	r3, #31
 800248c:	4093      	lsls	r3, r2
 800248e:	43db      	mvns	r3, r3
 8002490:	4019      	ands	r1, r3
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685a      	ldr	r2, [r3, #4]
 800249a:	4613      	mov	r3, r2
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4413      	add	r3, r2
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	fa00 f203 	lsl.w	r2, r0, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	430a      	orrs	r2, r1
 80024ac:	631a      	str	r2, [r3, #48]	; 0x30
 80024ae:	e063      	b.n	8002578 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	2b09      	cmp	r3, #9
 80024b6:	d81e      	bhi.n	80024f6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	4613      	mov	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	4413      	add	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	3b1e      	subs	r3, #30
 80024cc:	221f      	movs	r2, #31
 80024ce:	fa02 f303 	lsl.w	r3, r2, r3
 80024d2:	43db      	mvns	r3, r3
 80024d4:	4019      	ands	r1, r3
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	6818      	ldr	r0, [r3, #0]
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	4613      	mov	r3, r2
 80024e0:	005b      	lsls	r3, r3, #1
 80024e2:	4413      	add	r3, r2
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	3b1e      	subs	r3, #30
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	635a      	str	r2, [r3, #52]	; 0x34
 80024f4:	e040      	b.n	8002578 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b0e      	cmp	r3, #14
 80024fc:	d81e      	bhi.n	800253c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002504:	683b      	ldr	r3, [r7, #0]
 8002506:	685a      	ldr	r2, [r3, #4]
 8002508:	4613      	mov	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	4413      	add	r3, r2
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	3b3c      	subs	r3, #60	; 0x3c
 8002512:	221f      	movs	r2, #31
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	4019      	ands	r1, r3
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	6818      	ldr	r0, [r3, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	3b3c      	subs	r3, #60	; 0x3c
 800252e:	fa00 f203 	lsl.w	r2, r0, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	430a      	orrs	r2, r1
 8002538:	639a      	str	r2, [r3, #56]	; 0x38
 800253a:	e01d      	b.n	8002578 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	4613      	mov	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	3b5a      	subs	r3, #90	; 0x5a
 8002550:	221f      	movs	r2, #31
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	4019      	ands	r1, r3
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685a      	ldr	r2, [r3, #4]
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	3b5a      	subs	r3, #90	; 0x5a
 800256c:	fa00 f203 	lsl.w	r2, r0, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	f040 80e5 	bne.w	8002752 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2b09      	cmp	r3, #9
 800258e:	d91c      	bls.n	80025ca <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	6999      	ldr	r1, [r3, #24]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	3b1e      	subs	r3, #30
 80025a2:	2207      	movs	r2, #7
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	4019      	ands	r1, r3
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	6898      	ldr	r0, [r3, #8]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	3b1e      	subs	r3, #30
 80025bc:	fa00 f203 	lsl.w	r2, r0, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	430a      	orrs	r2, r1
 80025c6:	619a      	str	r2, [r3, #24]
 80025c8:	e019      	b.n	80025fe <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	6959      	ldr	r1, [r3, #20]
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	2207      	movs	r2, #7
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	43db      	mvns	r3, r3
 80025e2:	4019      	ands	r1, r3
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	6898      	ldr	r0, [r3, #8]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	fa00 f203 	lsl.w	r2, r0, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	68db      	ldr	r3, [r3, #12]
 8002608:	08db      	lsrs	r3, r3, #3
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	3b01      	subs	r3, #1
 800261c:	2b03      	cmp	r3, #3
 800261e:	d84f      	bhi.n	80026c0 <HAL_ADC_ConfigChannel+0x28c>
 8002620:	a201      	add	r2, pc, #4	; (adr r2, 8002628 <HAL_ADC_ConfigChannel+0x1f4>)
 8002622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002626:	bf00      	nop
 8002628:	08002639 	.word	0x08002639
 800262c:	0800265b 	.word	0x0800265b
 8002630:	0800267d 	.word	0x0800267d
 8002634:	0800269f 	.word	0x0800269f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800263e:	4b9f      	ldr	r3, [pc, #636]	; (80028bc <HAL_ADC_ConfigChannel+0x488>)
 8002640:	4013      	ands	r3, r2
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	6812      	ldr	r2, [r2, #0]
 8002646:	0691      	lsls	r1, r2, #26
 8002648:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800264a:	430a      	orrs	r2, r1
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002656:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002658:	e07e      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002660:	4b96      	ldr	r3, [pc, #600]	; (80028bc <HAL_ADC_ConfigChannel+0x488>)
 8002662:	4013      	ands	r3, r2
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	6812      	ldr	r2, [r2, #0]
 8002668:	0691      	lsls	r1, r2, #26
 800266a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800266c:	430a      	orrs	r2, r1
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002678:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800267a:	e06d      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002682:	4b8e      	ldr	r3, [pc, #568]	; (80028bc <HAL_ADC_ConfigChannel+0x488>)
 8002684:	4013      	ands	r3, r2
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	0691      	lsls	r1, r2, #26
 800268c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800268e:	430a      	orrs	r2, r1
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800269a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800269c:	e05c      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80026a4:	4b85      	ldr	r3, [pc, #532]	; (80028bc <HAL_ADC_ConfigChannel+0x488>)
 80026a6:	4013      	ands	r3, r2
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	0691      	lsls	r1, r2, #26
 80026ae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80026b0:	430a      	orrs	r2, r1
 80026b2:	431a      	orrs	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80026bc:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80026be:	e04b      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	069b      	lsls	r3, r3, #26
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d107      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026e2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	069b      	lsls	r3, r3, #26
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002706:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800270e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	069b      	lsls	r3, r3, #26
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800272a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002732:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	069b      	lsls	r3, r3, #26
 800273c:	429a      	cmp	r2, r3
 800273e:	d10a      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800274e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002750:	e001      	b.n	8002756 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002752:	bf00      	nop
 8002754:	e000      	b.n	8002758 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002756:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d108      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x344>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b01      	cmp	r3, #1
 8002772:	d101      	bne.n	8002778 <HAL_ADC_ConfigChannel+0x344>
 8002774:	2301      	movs	r3, #1
 8002776:	e000      	b.n	800277a <HAL_ADC_ConfigChannel+0x346>
 8002778:	2300      	movs	r3, #0
 800277a:	2b00      	cmp	r3, #0
 800277c:	f040 8131 	bne.w	80029e2 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d00f      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43da      	mvns	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	400a      	ands	r2, r1
 80027a2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 80027a6:	e049      	b.n	800283c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2201      	movs	r2, #1
 80027b6:	409a      	lsls	r2, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2b09      	cmp	r3, #9
 80027c8:	d91c      	bls.n	8002804 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	6999      	ldr	r1, [r3, #24]
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4613      	mov	r3, r2
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	4413      	add	r3, r2
 80027da:	3b1b      	subs	r3, #27
 80027dc:	2207      	movs	r2, #7
 80027de:	fa02 f303 	lsl.w	r3, r2, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	4019      	ands	r1, r3
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6898      	ldr	r0, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1b      	subs	r3, #27
 80027f6:	fa00 f203 	lsl.w	r2, r0, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	619a      	str	r2, [r3, #24]
 8002802:	e01b      	b.n	800283c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	6959      	ldr	r1, [r3, #20]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	2207      	movs	r2, #7
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	43db      	mvns	r3, r3
 800281e:	4019      	ands	r1, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	6898      	ldr	r0, [r3, #8]
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	1c5a      	adds	r2, r3, #1
 800282a:	4613      	mov	r3, r2
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4413      	add	r3, r2
 8002830:	fa00 f203 	lsl.w	r2, r0, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	430a      	orrs	r2, r1
 800283a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002844:	d004      	beq.n	8002850 <HAL_ADC_ConfigChannel+0x41c>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a1d      	ldr	r2, [pc, #116]	; (80028c0 <HAL_ADC_ConfigChannel+0x48c>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d101      	bne.n	8002854 <HAL_ADC_ConfigChannel+0x420>
 8002850:	4b1c      	ldr	r3, [pc, #112]	; (80028c4 <HAL_ADC_ConfigChannel+0x490>)
 8002852:	e000      	b.n	8002856 <HAL_ADC_ConfigChannel+0x422>
 8002854:	4b1c      	ldr	r3, [pc, #112]	; (80028c8 <HAL_ADC_ConfigChannel+0x494>)
 8002856:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2b10      	cmp	r3, #16
 800285e:	d105      	bne.n	800286c <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002860:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002870:	2b11      	cmp	r3, #17
 8002872:	d105      	bne.n	8002880 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800287c:	2b00      	cmp	r3, #0
 800287e:	d00b      	beq.n	8002898 <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002884:	2b12      	cmp	r3, #18
 8002886:	f040 80ac 	bne.w	80029e2 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800288a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002892:	2b00      	cmp	r3, #0
 8002894:	f040 80a5 	bne.w	80029e2 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028a0:	d102      	bne.n	80028a8 <HAL_ADC_ConfigChannel+0x474>
 80028a2:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <HAL_ADC_ConfigChannel+0x48c>)
 80028a4:	60fb      	str	r3, [r7, #12]
 80028a6:	e023      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x4bc>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a04      	ldr	r2, [pc, #16]	; (80028c0 <HAL_ADC_ConfigChannel+0x48c>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d10c      	bne.n	80028cc <HAL_ADC_ConfigChannel+0x498>
 80028b2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e01a      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x4bc>
 80028ba:	bf00      	nop
 80028bc:	83fff000 	.word	0x83fff000
 80028c0:	50000100 	.word	0x50000100
 80028c4:	50000300 	.word	0x50000300
 80028c8:	50000700 	.word	0x50000700
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a4a      	ldr	r2, [pc, #296]	; (80029fc <HAL_ADC_ConfigChannel+0x5c8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d102      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x4a8>
 80028d6:	4b4a      	ldr	r3, [pc, #296]	; (8002a00 <HAL_ADC_ConfigChannel+0x5cc>)
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	e009      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x4bc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a47      	ldr	r2, [pc, #284]	; (8002a00 <HAL_ADC_ConfigChannel+0x5cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d102      	bne.n	80028ec <HAL_ADC_ConfigChannel+0x4b8>
 80028e6:	4b45      	ldr	r3, [pc, #276]	; (80029fc <HAL_ADC_ConfigChannel+0x5c8>)
 80028e8:	60fb      	str	r3, [r7, #12]
 80028ea:	e001      	b.n	80028f0 <HAL_ADC_ConfigChannel+0x4bc>
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x4dc>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <HAL_ADC_ConfigChannel+0x4dc>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_ADC_ConfigChannel+0x4de>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d150      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002916:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002918:	2b00      	cmp	r3, #0
 800291a:	d010      	beq.n	800293e <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 0303 	and.w	r3, r3, #3
 8002924:	2b01      	cmp	r3, #1
 8002926:	d107      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x504>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x504>
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <HAL_ADC_ConfigChannel+0x506>
 8002938:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800293a:	2b00      	cmp	r3, #0
 800293c:	d13c      	bne.n	80029b8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b10      	cmp	r3, #16
 8002944:	d11d      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x54e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800294e:	d118      	bne.n	8002982 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002950:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002958:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800295a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800295c:	4b29      	ldr	r3, [pc, #164]	; (8002a04 <HAL_ADC_ConfigChannel+0x5d0>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a29      	ldr	r2, [pc, #164]	; (8002a08 <HAL_ADC_ConfigChannel+0x5d4>)
 8002962:	fba2 2303 	umull	r2, r3, r2, r3
 8002966:	0c9a      	lsrs	r2, r3, #18
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002972:	e002      	b.n	800297a <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	3b01      	subs	r3, #1
 8002978:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d1f9      	bne.n	8002974 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002980:	e02e      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2b11      	cmp	r3, #17
 8002988:	d10b      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x56e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002992:	d106      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002994:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800299c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029a0:	e01e      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	2b12      	cmp	r3, #18
 80029a8:	d11a      	bne.n	80029e0 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80029aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80029b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80029b4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029b6:	e013      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029bc:	f043 0220 	orr.w	r2, r3, #32
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029ca:	e00a      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	f043 0220 	orr.w	r2, r3, #32
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80029de:	e000      	b.n	80029e2 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80029e0:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80029ea:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	376c      	adds	r7, #108	; 0x6c
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	50000400 	.word	0x50000400
 8002a00:	50000500 	.word	0x50000500
 8002a04:	20000010 	.word	0x20000010
 8002a08:	431bde83 	.word	0x431bde83

08002a0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b099      	sub	sp, #100	; 0x64
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a16:	2300      	movs	r3, #0
 8002a18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a24:	d102      	bne.n	8002a2c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	e01a      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a6a      	ldr	r2, [pc, #424]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d103      	bne.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0x32>
 8002a36:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002a3a:	60bb      	str	r3, [r7, #8]
 8002a3c:	e011      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a67      	ldr	r2, [pc, #412]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d102      	bne.n	8002a4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002a48:	4b66      	ldr	r3, [pc, #408]	; (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	e009      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a64      	ldr	r2, [pc, #400]	; (8002be4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d102      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002a58:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002a5a:	60bb      	str	r3, [r7, #8]
 8002a5c:	e001      	b.n	8002a62 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0b0      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e0a9      	b.n	8002bce <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f040 808d 	bne.w	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f040 8086 	bne.w	8002bac <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aa8:	d004      	beq.n	8002ab4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a4b      	ldr	r2, [pc, #300]	; (8002bdc <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d101      	bne.n	8002ab8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002ab4:	4b4c      	ldr	r3, [pc, #304]	; (8002be8 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002ab6:	e000      	b.n	8002aba <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002ab8:	4b4c      	ldr	r3, [pc, #304]	; (8002bec <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 8002aba:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d040      	beq.n	8002b46 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002ac4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	6859      	ldr	r1, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ad6:	035b      	lsls	r3, r3, #13
 8002ad8:	430b      	orrs	r3, r1
 8002ada:	431a      	orrs	r2, r3
 8002adc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ade:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d108      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d101      	bne.n	8002b00 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d15c      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d107      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002b22:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d14b      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002b28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b30:	f023 030f 	bic.w	r3, r3, #15
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	6811      	ldr	r1, [r2, #0]
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	6892      	ldr	r2, [r2, #8]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b42:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b44:	e03c      	b.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002b46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b50:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d108      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e000      	b.n	8002b74 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002b72:	2300      	movs	r3, #0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d123      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	689b      	ldr	r3, [r3, #8]
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002b94:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d112      	bne.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002b9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ba2:	f023 030f 	bic.w	r3, r3, #15
 8002ba6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ba8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002baa:	e009      	b.n	8002bc0 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb0:	f043 0220 	orr.w	r2, r3, #32
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002bbe:	e000      	b.n	8002bc2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002bc0:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002bca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3764      	adds	r7, #100	; 0x64
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	50000100 	.word	0x50000100
 8002be0:	50000400 	.word	0x50000400
 8002be4:	50000500 	.word	0x50000500
 8002be8:	50000300 	.word	0x50000300
 8002bec:	50000700 	.word	0x50000700

08002bf0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b084      	sub	sp, #16
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0303 	and.w	r3, r3, #3
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <ADC_Enable+0x2c>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <ADC_Enable+0x2c>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <ADC_Enable+0x2e>
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d143      	bne.n	8002caa <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	4b22      	ldr	r3, [pc, #136]	; (8002cb4 <ADC_Enable+0xc4>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00d      	beq.n	8002c4c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c34:	f043 0210 	orr.w	r2, r3, #16
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c40:	f043 0201 	orr.w	r2, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e02f      	b.n	8002cac <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689a      	ldr	r2, [r3, #8]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f042 0201 	orr.w	r2, r2, #1
 8002c5a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002c5c:	f7fe ff66 	bl	8001b2c <HAL_GetTick>
 8002c60:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c62:	e01b      	b.n	8002c9c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c64:	f7fe ff62 	bl	8001b2c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d914      	bls.n	8002c9c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d00d      	beq.n	8002c9c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0210 	orr.w	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d1dc      	bne.n	8002c64 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	8000003f 	.word	0x8000003f

08002cb8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b084      	sub	sp, #16
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <ADC_Disable+0x2c>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <ADC_Disable+0x2c>
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e000      	b.n	8002ce6 <ADC_Disable+0x2e>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d047      	beq.n	8002d7a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 030d 	and.w	r3, r3, #13
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d10f      	bne.n	8002d18 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	689a      	ldr	r2, [r3, #8]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f042 0202 	orr.w	r2, r2, #2
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002d10:	f7fe ff0c 	bl	8001b2c <HAL_GetTick>
 8002d14:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d16:	e029      	b.n	8002d6c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f043 0210 	orr.w	r2, r3, #16
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d28:	f043 0201 	orr.w	r2, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e023      	b.n	8002d7c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d34:	f7fe fefa 	bl	8001b2c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d914      	bls.n	8002d6c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 0301 	and.w	r3, r3, #1
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d10d      	bne.n	8002d6c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	f043 0210 	orr.w	r2, r3, #16
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e007      	b.n	8002d7c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d0dc      	beq.n	8002d34 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002d7a:	2300      	movs	r3, #0
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3710      	adds	r7, #16
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002d92:	2300      	movs	r3, #0
 8002d94:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	689b      	ldr	r3, [r3, #8]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 809a 	beq.w	8002ede <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002db4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db8:	d12a      	bne.n	8002e10 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d126      	bne.n	8002e10 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d122      	bne.n	8002e10 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8002dca:	230c      	movs	r3, #12
 8002dcc:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002dce:	e014      	b.n	8002dfa <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	4a45      	ldr	r2, [pc, #276]	; (8002ee8 <ADC_ConversionStop+0x164>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d90d      	bls.n	8002df4 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ddc:	f043 0210 	orr.w	r2, r3, #16
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de8:	f043 0201 	orr.w	r2, r3, #1
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e075      	b.n	8002ee0 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	3301      	adds	r3, #1
 8002df8:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e04:	2b40      	cmp	r3, #64	; 0x40
 8002e06:	d1e3      	bne.n	8002dd0 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2240      	movs	r2, #64	; 0x40
 8002e0e:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	2b60      	cmp	r3, #96	; 0x60
 8002e14:	d015      	beq.n	8002e42 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0304 	and.w	r3, r3, #4
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	d10e      	bne.n	8002e42 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d107      	bne.n	8002e42 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f042 0210 	orr.w	r2, r2, #16
 8002e40:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b0c      	cmp	r3, #12
 8002e46:	d015      	beq.n	8002e74 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0308 	and.w	r3, r3, #8
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d10e      	bne.n	8002e74 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d107      	bne.n	8002e74 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0220 	orr.w	r2, r2, #32
 8002e72:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	2b60      	cmp	r3, #96	; 0x60
 8002e78:	d004      	beq.n	8002e84 <ADC_ConversionStop+0x100>
 8002e7a:	2b6c      	cmp	r3, #108	; 0x6c
 8002e7c:	d105      	bne.n	8002e8a <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002e7e:	230c      	movs	r3, #12
 8002e80:	617b      	str	r3, [r7, #20]
        break;
 8002e82:	e005      	b.n	8002e90 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002e84:	2308      	movs	r3, #8
 8002e86:	617b      	str	r3, [r7, #20]
        break;
 8002e88:	e002      	b.n	8002e90 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002e8a:	2304      	movs	r3, #4
 8002e8c:	617b      	str	r3, [r7, #20]
        break;
 8002e8e:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8002e90:	f7fe fe4c 	bl	8001b2c <HAL_GetTick>
 8002e94:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002e96:	e01b      	b.n	8002ed0 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002e98:	f7fe fe48 	bl	8001b2c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b0b      	cmp	r3, #11
 8002ea4:	d914      	bls.n	8002ed0 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f043 0210 	orr.w	r2, r3, #16
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec4:	f043 0201 	orr.w	r2, r3, #1
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e007      	b.n	8002ee0 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689a      	ldr	r2, [r3, #8]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1dc      	bne.n	8002e98 <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	000993ff 	.word	0x000993ff

08002eec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
         );
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030b4:	f7ff ff3e 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	68b9      	ldr	r1, [r7, #8]
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f7ff ff8e 	bl	8002fe0 <NVIC_EncodePriority>
 80030c4:	4602      	mov	r2, r0
 80030c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030ca:	4611      	mov	r1, r2
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7ff ff5d 	bl	8002f8c <__NVIC_SetPriority>
}
 80030d2:	bf00      	nop
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}

080030da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b082      	sub	sp, #8
 80030de:	af00      	add	r7, sp, #0
 80030e0:	4603      	mov	r3, r0
 80030e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff31 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ee:	bf00      	nop
 80030f0:	3708      	adds	r7, #8
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}

080030f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f6:	b580      	push	{r7, lr}
 80030f8:	b082      	sub	sp, #8
 80030fa:	af00      	add	r7, sp, #0
 80030fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff ffa2 	bl	8003048 <SysTick_Config>
 8003104:	4603      	mov	r3, r0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3708      	adds	r7, #8
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800310e:	b580      	push	{r7, lr}
 8003110:	b082      	sub	sp, #8
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e014      	b.n	800314a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	791b      	ldrb	r3, [r3, #4]
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f7fd ffdb 	bl	80010ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2202      	movs	r2, #2
 800313a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2201      	movs	r2, #1
 8003146:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3708      	adds	r7, #8
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8003152:	b480      	push	{r7}
 8003154:	b087      	sub	sp, #28
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800315e:	2300      	movs	r3, #0
 8003160:	617b      	str	r3, [r7, #20]
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	795b      	ldrb	r3, [r3, #5]
 800316a:	2b01      	cmp	r3, #1
 800316c:	d101      	bne.n	8003172 <HAL_DAC_ConfigChannel+0x20>
 800316e:	2302      	movs	r3, #2
 8003170:	e036      	b.n	80031e0 <HAL_DAC_ConfigChannel+0x8e>
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2201      	movs	r2, #1
 8003176:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2202      	movs	r2, #2
 800317c:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8003186:	f640 72fe 	movw	r2, #4094	; 0xffe
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	43db      	mvns	r3, r3
 8003192:	697a      	ldr	r2, [r7, #20]
 8003194:	4013      	ands	r3, r2
 8003196:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	4313      	orrs	r3, r2
 80031a2:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	4313      	orrs	r3, r2
 80031b0:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	697a      	ldr	r2, [r7, #20]
 80031b8:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6819      	ldr	r1, [r3, #0]
 80031c0:	22c0      	movs	r2, #192	; 0xc0
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	400a      	ands	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	371c      	adds	r7, #28
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e037      	b.n	8003272 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2202      	movs	r2, #2
 8003206:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003218:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800321c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003226:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003232:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800323e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003246:	68fa      	ldr	r2, [r7, #12]
 8003248:	4313      	orrs	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f000 f92b 	bl	80034b0 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}  
 8003272:	4618      	mov	r0, r3
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003288:	2b02      	cmp	r3, #2
 800328a:	d008      	beq.n	800329e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2204      	movs	r2, #4
 8003290:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e020      	b.n	80032e0 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 020e 	bic.w	r2, r2, #14
 80032ac:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80032de:	2300      	movs	r3, #0
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f4:	2300      	movs	r3, #0
 80032f6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d005      	beq.n	800330e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2204      	movs	r2, #4
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	73fb      	strb	r3, [r7, #15]
 800330c:	e027      	b.n	800335e <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 020e 	bic.w	r2, r2, #14
 800331c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003336:	2101      	movs	r1, #1
 8003338:	fa01 f202 	lsl.w	r2, r1, r2
 800333c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003352:	2b00      	cmp	r3, #0
 8003354:	d003      	beq.n	800335e <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	4798      	blx	r3
    } 
  }
  return status;
 800335e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003360:	4618      	mov	r0, r3
 8003362:	3710      	adds	r7, #16
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	2204      	movs	r2, #4
 8003386:	409a      	lsls	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d024      	beq.n	80033da <HAL_DMA_IRQHandler+0x72>
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01f      	beq.n	80033da <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0320 	and.w	r3, r3, #32
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0204 	bic.w	r2, r2, #4
 80033b6:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033c0:	2104      	movs	r1, #4
 80033c2:	fa01 f202 	lsl.w	r2, r1, r2
 80033c6:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d06a      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80033d8:	e065      	b.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	2202      	movs	r2, #2
 80033e0:	409a      	lsls	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d02c      	beq.n	8003444 <HAL_DMA_IRQHandler+0xdc>
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d027      	beq.n	8003444 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0320 	and.w	r3, r3, #32
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10b      	bne.n	800341a <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f022 020a 	bic.w	r2, r2, #10
 8003410:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	2102      	movs	r1, #2
 8003424:	fa01 f202 	lsl.w	r2, r1, r2
 8003428:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003436:	2b00      	cmp	r3, #0
 8003438:	d035      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8003442:	e030      	b.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	2208      	movs	r2, #8
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4013      	ands	r3, r2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d028      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f003 0308 	and.w	r3, r3, #8
 800345a:	2b00      	cmp	r3, #0
 800345c:	d023      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681a      	ldr	r2, [r3, #0]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f022 020e 	bic.w	r2, r2, #14
 800346c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003476:	2101      	movs	r1, #1
 8003478:	fa01 f202 	lsl.w	r2, r1, r2
 800347c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003498:	2b00      	cmp	r3, #0
 800349a:	d004      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	4798      	blx	r3
    }
  }
}  
 80034a4:	e7ff      	b.n	80034a6 <HAL_DMA_IRQHandler+0x13e>
 80034a6:	bf00      	nop
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
	...

080034b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	4b14      	ldr	r3, [pc, #80]	; (8003510 <DMA_CalcBaseAndBitshift+0x60>)
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d80f      	bhi.n	80034e4 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b12      	ldr	r3, [pc, #72]	; (8003514 <DMA_CalcBaseAndBitshift+0x64>)
 80034cc:	4413      	add	r3, r2
 80034ce:	4a12      	ldr	r2, [pc, #72]	; (8003518 <DMA_CalcBaseAndBitshift+0x68>)
 80034d0:	fba2 2303 	umull	r2, r3, r2, r3
 80034d4:	091b      	lsrs	r3, r3, #4
 80034d6:	009a      	lsls	r2, r3, #2
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a0f      	ldr	r2, [pc, #60]	; (800351c <DMA_CalcBaseAndBitshift+0x6c>)
 80034e0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80034e2:	e00e      	b.n	8003502 <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	461a      	mov	r2, r3
 80034ea:	4b0d      	ldr	r3, [pc, #52]	; (8003520 <DMA_CalcBaseAndBitshift+0x70>)
 80034ec:	4413      	add	r3, r2
 80034ee:	4a0a      	ldr	r2, [pc, #40]	; (8003518 <DMA_CalcBaseAndBitshift+0x68>)
 80034f0:	fba2 2303 	umull	r2, r3, r2, r3
 80034f4:	091b      	lsrs	r3, r3, #4
 80034f6:	009a      	lsls	r2, r3, #2
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a09      	ldr	r2, [pc, #36]	; (8003524 <DMA_CalcBaseAndBitshift+0x74>)
 8003500:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40020407 	.word	0x40020407
 8003514:	bffdfff8 	.word	0xbffdfff8
 8003518:	cccccccd 	.word	0xcccccccd
 800351c:	40020000 	.word	0x40020000
 8003520:	bffdfbf8 	.word	0xbffdfbf8
 8003524:	40020400 	.word	0x40020400

08003528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003532:	2300      	movs	r3, #0
 8003534:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003536:	e160      	b.n	80037fa <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	2101      	movs	r1, #1
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	fa01 f303 	lsl.w	r3, r1, r3
 8003544:	4013      	ands	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 8152 	beq.w	80037f4 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f003 0303 	and.w	r3, r3, #3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d005      	beq.n	8003568 <HAL_GPIO_Init+0x40>
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d130      	bne.n	80035ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	2203      	movs	r2, #3
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	43db      	mvns	r3, r3
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4013      	ands	r3, r2
 800357e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	68da      	ldr	r2, [r3, #12]
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fa02 f303 	lsl.w	r3, r2, r3
 800358c:	693a      	ldr	r2, [r7, #16]
 800358e:	4313      	orrs	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800359e:	2201      	movs	r2, #1
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	693a      	ldr	r2, [r7, #16]
 80035aa:	4013      	ands	r3, r2
 80035ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	091b      	lsrs	r3, r3, #4
 80035b4:	f003 0201 	and.w	r2, r3, #1
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	2b03      	cmp	r3, #3
 80035d4:	d017      	beq.n	8003606 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	2203      	movs	r2, #3
 80035e2:	fa02 f303 	lsl.w	r3, r2, r3
 80035e6:	43db      	mvns	r3, r3
 80035e8:	693a      	ldr	r2, [r7, #16]
 80035ea:	4013      	ands	r3, r2
 80035ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689a      	ldr	r2, [r3, #8]
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	fa02 f303 	lsl.w	r3, r2, r3
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d123      	bne.n	800365a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	08da      	lsrs	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	3208      	adds	r2, #8
 800361a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800361e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	220f      	movs	r2, #15
 800362a:	fa02 f303 	lsl.w	r3, r2, r3
 800362e:	43db      	mvns	r3, r3
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4013      	ands	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	691a      	ldr	r2, [r3, #16]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	693a      	ldr	r2, [r7, #16]
 8003648:	4313      	orrs	r3, r2
 800364a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	005b      	lsls	r3, r3, #1
 8003664:	2203      	movs	r2, #3
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	4013      	ands	r3, r2
 8003670:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f003 0203 	and.w	r2, r3, #3
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	693a      	ldr	r2, [r7, #16]
 8003684:	4313      	orrs	r3, r2
 8003686:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003696:	2b00      	cmp	r3, #0
 8003698:	f000 80ac 	beq.w	80037f4 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800369c:	4b5e      	ldr	r3, [pc, #376]	; (8003818 <HAL_GPIO_Init+0x2f0>)
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	4a5d      	ldr	r2, [pc, #372]	; (8003818 <HAL_GPIO_Init+0x2f0>)
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6193      	str	r3, [r2, #24]
 80036a8:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <HAL_GPIO_Init+0x2f0>)
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	f003 0301 	and.w	r3, r3, #1
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80036b4:	4a59      	ldr	r2, [pc, #356]	; (800381c <HAL_GPIO_Init+0x2f4>)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	089b      	lsrs	r3, r3, #2
 80036ba:	3302      	adds	r3, #2
 80036bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 0303 	and.w	r3, r3, #3
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	220f      	movs	r2, #15
 80036cc:	fa02 f303 	lsl.w	r3, r2, r3
 80036d0:	43db      	mvns	r3, r3
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4013      	ands	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80036de:	d025      	beq.n	800372c <HAL_GPIO_Init+0x204>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a4f      	ldr	r2, [pc, #316]	; (8003820 <HAL_GPIO_Init+0x2f8>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d01f      	beq.n	8003728 <HAL_GPIO_Init+0x200>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a4e      	ldr	r2, [pc, #312]	; (8003824 <HAL_GPIO_Init+0x2fc>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d019      	beq.n	8003724 <HAL_GPIO_Init+0x1fc>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a4d      	ldr	r2, [pc, #308]	; (8003828 <HAL_GPIO_Init+0x300>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d013      	beq.n	8003720 <HAL_GPIO_Init+0x1f8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a4c      	ldr	r2, [pc, #304]	; (800382c <HAL_GPIO_Init+0x304>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d00d      	beq.n	800371c <HAL_GPIO_Init+0x1f4>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <HAL_GPIO_Init+0x308>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d007      	beq.n	8003718 <HAL_GPIO_Init+0x1f0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a4a      	ldr	r2, [pc, #296]	; (8003834 <HAL_GPIO_Init+0x30c>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d101      	bne.n	8003714 <HAL_GPIO_Init+0x1ec>
 8003710:	2306      	movs	r3, #6
 8003712:	e00c      	b.n	800372e <HAL_GPIO_Init+0x206>
 8003714:	2307      	movs	r3, #7
 8003716:	e00a      	b.n	800372e <HAL_GPIO_Init+0x206>
 8003718:	2305      	movs	r3, #5
 800371a:	e008      	b.n	800372e <HAL_GPIO_Init+0x206>
 800371c:	2304      	movs	r3, #4
 800371e:	e006      	b.n	800372e <HAL_GPIO_Init+0x206>
 8003720:	2303      	movs	r3, #3
 8003722:	e004      	b.n	800372e <HAL_GPIO_Init+0x206>
 8003724:	2302      	movs	r3, #2
 8003726:	e002      	b.n	800372e <HAL_GPIO_Init+0x206>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_GPIO_Init+0x206>
 800372c:	2300      	movs	r3, #0
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	f002 0203 	and.w	r2, r2, #3
 8003734:	0092      	lsls	r2, r2, #2
 8003736:	4093      	lsls	r3, r2
 8003738:	693a      	ldr	r2, [r7, #16]
 800373a:	4313      	orrs	r3, r2
 800373c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800373e:	4937      	ldr	r1, [pc, #220]	; (800381c <HAL_GPIO_Init+0x2f4>)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	3302      	adds	r3, #2
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_GPIO_Init+0x310>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43db      	mvns	r3, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003770:	4a31      	ldr	r2, [pc, #196]	; (8003838 <HAL_GPIO_Init+0x310>)
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003776:	4b30      	ldr	r3, [pc, #192]	; (8003838 <HAL_GPIO_Init+0x310>)
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	43db      	mvns	r3, r3
 8003780:	693a      	ldr	r2, [r7, #16]
 8003782:	4013      	ands	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8003792:	693a      	ldr	r2, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4313      	orrs	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800379a:	4a27      	ldr	r2, [pc, #156]	; (8003838 <HAL_GPIO_Init+0x310>)
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037a0:	4b25      	ldr	r3, [pc, #148]	; (8003838 <HAL_GPIO_Init+0x310>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	43db      	mvns	r3, r3
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	4013      	ands	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d003      	beq.n	80037c4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80037c4:	4a1c      	ldr	r2, [pc, #112]	; (8003838 <HAL_GPIO_Init+0x310>)
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <HAL_GPIO_Init+0x310>)
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	43db      	mvns	r3, r3
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	4013      	ands	r3, r2
 80037d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <HAL_GPIO_Init+0x310>)
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	3301      	adds	r3, #1
 80037f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	fa22 f303 	lsr.w	r3, r2, r3
 8003804:	2b00      	cmp	r3, #0
 8003806:	f47f ae97 	bne.w	8003538 <HAL_GPIO_Init+0x10>
  }
}
 800380a:	bf00      	nop
 800380c:	371c      	adds	r7, #28
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40021000 	.word	0x40021000
 800381c:	40010000 	.word	0x40010000
 8003820:	48000400 	.word	0x48000400
 8003824:	48000800 	.word	0x48000800
 8003828:	48000c00 	.word	0x48000c00
 800382c:	48001000 	.word	0x48001000
 8003830:	48001400 	.word	0x48001400
 8003834:	48001800 	.word	0x48001800
 8003838:	40010400 	.word	0x40010400

0800383c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	460b      	mov	r3, r1
 8003846:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	887b      	ldrh	r3, [r7, #2]
 800384e:	4013      	ands	r3, r2
 8003850:	2b00      	cmp	r3, #0
 8003852:	d002      	beq.n	800385a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e001      	b.n	800385e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800385e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003860:	4618      	mov	r0, r3
 8003862:	3714      	adds	r7, #20
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
 8003874:	460b      	mov	r3, r1
 8003876:	807b      	strh	r3, [r7, #2]
 8003878:	4613      	mov	r3, r2
 800387a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800387c:	787b      	ldrb	r3, [r7, #1]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d003      	beq.n	800388a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003882:	887a      	ldrh	r2, [r7, #2]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003888:	e002      	b.n	8003890 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800388a:	887a      	ldrh	r2, [r7, #2]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003890:	bf00      	nop
 8003892:	370c      	adds	r7, #12
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038ae:	887a      	ldrh	r2, [r7, #2]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	4013      	ands	r3, r2
 80038b4:	041a      	lsls	r2, r3, #16
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	43d9      	mvns	r1, r3
 80038ba:	887b      	ldrh	r3, [r7, #2]
 80038bc:	400b      	ands	r3, r1
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	619a      	str	r2, [r3, #24]
}
 80038c4:	bf00      	nop
 80038c6:	3714      	adds	r7, #20
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4603      	mov	r3, r0
 80038d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038dc:	695a      	ldr	r2, [r3, #20]
 80038de:	88fb      	ldrh	r3, [r7, #6]
 80038e0:	4013      	ands	r3, r2
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d006      	beq.n	80038f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038e6:	4a05      	ldr	r2, [pc, #20]	; (80038fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038ec:	88fb      	ldrh	r3, [r7, #6]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fc ff72 	bl	80007d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40010400 	.word	0x40010400

08003900 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8003906:	af00      	add	r7, sp, #0
 8003908:	1d3b      	adds	r3, r7, #4
 800390a:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800390c:	1d3b      	adds	r3, r7, #4
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d102      	bne.n	800391a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f000 bf01 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800391a:	1d3b      	adds	r3, r7, #4
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8160 	beq.w	8003bea <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800392a:	4bae      	ldr	r3, [pc, #696]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 030c 	and.w	r3, r3, #12
 8003932:	2b04      	cmp	r3, #4
 8003934:	d00c      	beq.n	8003950 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003936:	4bab      	ldr	r3, [pc, #684]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f003 030c 	and.w	r3, r3, #12
 800393e:	2b08      	cmp	r3, #8
 8003940:	d159      	bne.n	80039f6 <HAL_RCC_OscConfig+0xf6>
 8003942:	4ba8      	ldr	r3, [pc, #672]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 800394a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800394e:	d152      	bne.n	80039f6 <HAL_RCC_OscConfig+0xf6>
 8003950:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003954:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003958:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800395c:	fa93 f3a3 	rbit	r3, r3
 8003960:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003964:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	fab3 f383 	clz	r3, r3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	095b      	lsrs	r3, r3, #5
 8003970:	b2db      	uxtb	r3, r3
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d102      	bne.n	8003982 <HAL_RCC_OscConfig+0x82>
 800397c:	4b99      	ldr	r3, [pc, #612]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	e015      	b.n	80039ae <HAL_RCC_OscConfig+0xae>
 8003982:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003986:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800398e:	fa93 f3a3 	rbit	r3, r3
 8003992:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8003996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800399a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800399e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80039a2:	fa93 f3a3 	rbit	r3, r3
 80039a6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80039aa:	4b8e      	ldr	r3, [pc, #568]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 80039ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80039b2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80039b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80039ba:	fa92 f2a2 	rbit	r2, r2
 80039be:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80039c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80039c6:	fab2 f282 	clz	r2, r2
 80039ca:	b2d2      	uxtb	r2, r2
 80039cc:	f042 0220 	orr.w	r2, r2, #32
 80039d0:	b2d2      	uxtb	r2, r2
 80039d2:	f002 021f 	and.w	r2, r2, #31
 80039d6:	2101      	movs	r1, #1
 80039d8:	fa01 f202 	lsl.w	r2, r1, r2
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8102 	beq.w	8003be8 <HAL_RCC_OscConfig+0x2e8>
 80039e4:	1d3b      	adds	r3, r7, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 80fc 	bne.w	8003be8 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f000 be93 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039f6:	1d3b      	adds	r3, r7, #4
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a00:	d106      	bne.n	8003a10 <HAL_RCC_OscConfig+0x110>
 8003a02:	4b78      	ldr	r3, [pc, #480]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a77      	ldr	r2, [pc, #476]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0c:	6013      	str	r3, [r2, #0]
 8003a0e:	e030      	b.n	8003a72 <HAL_RCC_OscConfig+0x172>
 8003a10:	1d3b      	adds	r3, r7, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x134>
 8003a1a:	4b72      	ldr	r3, [pc, #456]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a71      	ldr	r2, [pc, #452]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a24:	6013      	str	r3, [r2, #0]
 8003a26:	4b6f      	ldr	r3, [pc, #444]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a6e      	ldr	r2, [pc, #440]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a30:	6013      	str	r3, [r2, #0]
 8003a32:	e01e      	b.n	8003a72 <HAL_RCC_OscConfig+0x172>
 8003a34:	1d3b      	adds	r3, r7, #4
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a3e:	d10c      	bne.n	8003a5a <HAL_RCC_OscConfig+0x15a>
 8003a40:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a67      	ldr	r2, [pc, #412]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a46:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a4a:	6013      	str	r3, [r2, #0]
 8003a4c:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a64      	ldr	r2, [pc, #400]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a56:	6013      	str	r3, [r2, #0]
 8003a58:	e00b      	b.n	8003a72 <HAL_RCC_OscConfig+0x172>
 8003a5a:	4b62      	ldr	r3, [pc, #392]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a61      	ldr	r2, [pc, #388]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a64:	6013      	str	r3, [r2, #0]
 8003a66:	4b5f      	ldr	r3, [pc, #380]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003a6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a70:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a72:	1d3b      	adds	r3, r7, #4
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d059      	beq.n	8003b30 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f856 	bl	8001b2c <HAL_GetTick>
 8003a80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a84:	e00a      	b.n	8003a9c <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a86:	f7fe f851 	bl	8001b2c <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	; 0x64
 8003a94:	d902      	bls.n	8003a9c <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	f000 be40 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
 8003a9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aa0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8003ab0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab4:	fab3 f383 	clz	r3, r3
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	095b      	lsrs	r3, r3, #5
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d102      	bne.n	8003ace <HAL_RCC_OscConfig+0x1ce>
 8003ac8:	4b46      	ldr	r3, [pc, #280]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	e015      	b.n	8003afa <HAL_RCC_OscConfig+0x1fa>
 8003ace:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ad2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ad6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003ada:	fa93 f3a3 	rbit	r3, r3
 8003ade:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8003ae2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ae6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003aea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003aee:	fa93 f3a3 	rbit	r3, r3
 8003af2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003af6:	4b3b      	ldr	r3, [pc, #236]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003afe:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8003b02:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8003b06:	fa92 f2a2 	rbit	r2, r2
 8003b0a:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003b0e:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003b12:	fab2 f282 	clz	r2, r2
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f042 0220 	orr.w	r2, r2, #32
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f002 021f 	and.w	r2, r2, #31
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d0ab      	beq.n	8003a86 <HAL_RCC_OscConfig+0x186>
 8003b2e:	e05c      	b.n	8003bea <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fffc 	bl	8001b2c <HAL_GetTick>
 8003b34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b38:	e00a      	b.n	8003b50 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b3a:	f7fd fff7 	bl	8001b2c <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b64      	cmp	r3, #100	; 0x64
 8003b48:	d902      	bls.n	8003b50 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	f000 bde6 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
 8003b50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b54:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003b5c:	fa93 f3a3 	rbit	r3, r3
 8003b60:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8003b64:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b68:	fab3 f383 	clz	r3, r3
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	095b      	lsrs	r3, r3, #5
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d102      	bne.n	8003b82 <HAL_RCC_OscConfig+0x282>
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	e015      	b.n	8003bae <HAL_RCC_OscConfig+0x2ae>
 8003b82:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b86:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8003b8e:	fa93 f3a3 	rbit	r3, r3
 8003b92:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8003b96:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003b9a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003b9e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8003ba2:	fa93 f3a3 	rbit	r3, r3
 8003ba6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003baa:	4b0e      	ldr	r3, [pc, #56]	; (8003be4 <HAL_RCC_OscConfig+0x2e4>)
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003bb2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8003bb6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8003bba:	fa92 f2a2 	rbit	r2, r2
 8003bbe:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8003bc2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003bc6:	fab2 f282 	clz	r2, r2
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	f042 0220 	orr.w	r2, r2, #32
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	f002 021f 	and.w	r2, r2, #31
 8003bd6:	2101      	movs	r1, #1
 8003bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1ab      	bne.n	8003b3a <HAL_RCC_OscConfig+0x23a>
 8003be2:	e002      	b.n	8003bea <HAL_RCC_OscConfig+0x2ea>
 8003be4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bea:	1d3b      	adds	r3, r7, #4
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0302 	and.w	r3, r3, #2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 8170 	beq.w	8003eda <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003bfa:	4bd0      	ldr	r3, [pc, #832]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f003 030c 	and.w	r3, r3, #12
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00c      	beq.n	8003c20 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003c06:	4bcd      	ldr	r3, [pc, #820]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 030c 	and.w	r3, r3, #12
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d16d      	bne.n	8003cee <HAL_RCC_OscConfig+0x3ee>
 8003c12:	4bca      	ldr	r3, [pc, #808]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003c1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c1e:	d166      	bne.n	8003cee <HAL_RCC_OscConfig+0x3ee>
 8003c20:	2302      	movs	r3, #2
 8003c22:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c26:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003c2a:	fa93 f3a3 	rbit	r3, r3
 8003c2e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8003c32:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	fab3 f383 	clz	r3, r3
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	095b      	lsrs	r3, r3, #5
 8003c3e:	b2db      	uxtb	r3, r3
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d102      	bne.n	8003c50 <HAL_RCC_OscConfig+0x350>
 8003c4a:	4bbc      	ldr	r3, [pc, #752]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	e013      	b.n	8003c78 <HAL_RCC_OscConfig+0x378>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c56:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003c5a:	fa93 f3a3 	rbit	r3, r3
 8003c5e:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8003c62:	2302      	movs	r3, #2
 8003c64:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003c68:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8003c6c:	fa93 f3a3 	rbit	r3, r3
 8003c70:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003c74:	4bb1      	ldr	r3, [pc, #708]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	2202      	movs	r2, #2
 8003c7a:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8003c7e:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8003c82:	fa92 f2a2 	rbit	r2, r2
 8003c86:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8003c8a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003c8e:	fab2 f282 	clz	r2, r2
 8003c92:	b2d2      	uxtb	r2, r2
 8003c94:	f042 0220 	orr.w	r2, r2, #32
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	f002 021f 	and.w	r2, r2, #31
 8003c9e:	2101      	movs	r1, #1
 8003ca0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ca4:	4013      	ands	r3, r2
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d007      	beq.n	8003cba <HAL_RCC_OscConfig+0x3ba>
 8003caa:	1d3b      	adds	r3, r7, #4
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b01      	cmp	r3, #1
 8003cb2:	d002      	beq.n	8003cba <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f000 bd31 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cba:	4ba0      	ldr	r3, [pc, #640]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc2:	1d3b      	adds	r3, r7, #4
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	21f8      	movs	r1, #248	; 0xf8
 8003cca:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cce:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8003cd2:	fa91 f1a1 	rbit	r1, r1
 8003cd6:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003cda:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003cde:	fab1 f181 	clz	r1, r1
 8003ce2:	b2c9      	uxtb	r1, r1
 8003ce4:	408b      	lsls	r3, r1
 8003ce6:	4995      	ldr	r1, [pc, #596]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cec:	e0f5      	b.n	8003eda <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cee:	1d3b      	adds	r3, r7, #4
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	f000 8085 	beq.w	8003e04 <HAL_RCC_OscConfig+0x504>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d00:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8003d04:	fa93 f3a3 	rbit	r3, r3
 8003d08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003d0c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d10:	fab3 f383 	clz	r3, r3
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003d1a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	461a      	mov	r2, r3
 8003d22:	2301      	movs	r3, #1
 8003d24:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d26:	f7fd ff01 	bl	8001b2c <HAL_GetTick>
 8003d2a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d2e:	e00a      	b.n	8003d46 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d30:	f7fd fefc 	bl	8001b2c <HAL_GetTick>
 8003d34:	4602      	mov	r2, r0
 8003d36:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d902      	bls.n	8003d46 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	f000 bceb 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
 8003d46:	2302      	movs	r3, #2
 8003d48:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d4c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003d50:	fa93 f3a3 	rbit	r3, r3
 8003d54:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003d58:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	095b      	lsrs	r3, r3, #5
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	f043 0301 	orr.w	r3, r3, #1
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d102      	bne.n	8003d76 <HAL_RCC_OscConfig+0x476>
 8003d70:	4b72      	ldr	r3, [pc, #456]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	e013      	b.n	8003d9e <HAL_RCC_OscConfig+0x49e>
 8003d76:	2302      	movs	r3, #2
 8003d78:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d7c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8003d80:	fa93 f3a3 	rbit	r3, r3
 8003d84:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8003d88:	2302      	movs	r3, #2
 8003d8a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003d8e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8003d92:	fa93 f3a3 	rbit	r3, r3
 8003d96:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003d9a:	4b68      	ldr	r3, [pc, #416]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	2202      	movs	r2, #2
 8003da0:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8003da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8003da8:	fa92 f2a2 	rbit	r2, r2
 8003dac:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8003db0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003db4:	fab2 f282 	clz	r2, r2
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	f042 0220 	orr.w	r2, r2, #32
 8003dbe:	b2d2      	uxtb	r2, r2
 8003dc0:	f002 021f 	and.w	r2, r2, #31
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0af      	beq.n	8003d30 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dd0:	4b5a      	ldr	r3, [pc, #360]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003dd8:	1d3b      	adds	r3, r7, #4
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	21f8      	movs	r1, #248	; 0xf8
 8003de0:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de4:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003de8:	fa91 f1a1 	rbit	r1, r1
 8003dec:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003df0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003df4:	fab1 f181 	clz	r1, r1
 8003df8:	b2c9      	uxtb	r1, r1
 8003dfa:	408b      	lsls	r3, r1
 8003dfc:	494f      	ldr	r1, [pc, #316]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	600b      	str	r3, [r1, #0]
 8003e02:	e06a      	b.n	8003eda <HAL_RCC_OscConfig+0x5da>
 8003e04:	2301      	movs	r3, #1
 8003e06:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8003e16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e1a:	fab3 f383 	clz	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e28:	009b      	lsls	r3, r3, #2
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fd fe7c 	bl	8001b2c <HAL_GetTick>
 8003e34:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e38:	e00a      	b.n	8003e50 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e3a:	f7fd fe77 	bl	8001b2c <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d902      	bls.n	8003e50 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	f000 bc66 	b.w	800471c <HAL_RCC_OscConfig+0xe1c>
 8003e50:	2302      	movs	r3, #2
 8003e52:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e56:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003e5a:	fa93 f3a3 	rbit	r3, r3
 8003e5e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8003e62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e66:	fab3 f383 	clz	r3, r3
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	095b      	lsrs	r3, r3, #5
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	f043 0301 	orr.w	r3, r3, #1
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d102      	bne.n	8003e80 <HAL_RCC_OscConfig+0x580>
 8003e7a:	4b30      	ldr	r3, [pc, #192]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	e013      	b.n	8003ea8 <HAL_RCC_OscConfig+0x5a8>
 8003e80:	2302      	movs	r3, #2
 8003e82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8003e8a:	fa93 f3a3 	rbit	r3, r3
 8003e8e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8003e92:	2302      	movs	r3, #2
 8003e94:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8003e98:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8003e9c:	fa93 f3a3 	rbit	r3, r3
 8003ea0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8003ea4:	4b25      	ldr	r3, [pc, #148]	; (8003f3c <HAL_RCC_OscConfig+0x63c>)
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea8:	2202      	movs	r2, #2
 8003eaa:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8003eae:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8003eb2:	fa92 f2a2 	rbit	r2, r2
 8003eb6:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8003eba:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8003ebe:	fab2 f282 	clz	r2, r2
 8003ec2:	b2d2      	uxtb	r2, r2
 8003ec4:	f042 0220 	orr.w	r2, r2, #32
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	f002 021f 	and.w	r2, r2, #31
 8003ece:	2101      	movs	r1, #1
 8003ed0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1af      	bne.n	8003e3a <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eda:	1d3b      	adds	r3, r7, #4
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0308 	and.w	r3, r3, #8
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	f000 80da 	beq.w	800409e <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eea:	1d3b      	adds	r3, r7, #4
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d069      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x6c8>
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	fa93 f3a3 	rbit	r3, r3
 8003f02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8003f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0a:	fab3 f383 	clz	r3, r3
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	461a      	mov	r2, r3
 8003f12:	4b0b      	ldr	r3, [pc, #44]	; (8003f40 <HAL_RCC_OscConfig+0x640>)
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	461a      	mov	r2, r3
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f1e:	f7fd fe05 	bl	8001b2c <HAL_GetTick>
 8003f22:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e00d      	b.n	8003f44 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fd fe00 	bl	8001b2c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d905      	bls.n	8003f44 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	e3ef      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 8003f3c:	40021000 	.word	0x40021000
 8003f40:	10908120 	.word	0x10908120
 8003f44:	2302      	movs	r3, #2
 8003f46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4e:	fa93 f2a3 	rbit	r2, r3
 8003f52:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	fa93 f2a3 	rbit	r2, r3
 8003f6a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8003f6e:	601a      	str	r2, [r3, #0]
 8003f70:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
 8003f78:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	fa93 f2a3 	rbit	r2, r3
 8003f82:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8003f86:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f88:	4ba4      	ldr	r3, [pc, #656]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8003f8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f8c:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003f90:	2102      	movs	r1, #2
 8003f92:	6019      	str	r1, [r3, #0]
 8003f94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	fa93 f1a3 	rbit	r1, r3
 8003f9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fa2:	6019      	str	r1, [r3, #0]
  return result;
 8003fa4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	fab3 f383 	clz	r3, r3
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	f003 031f 	and.w	r3, r3, #31
 8003fba:	2101      	movs	r1, #1
 8003fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0b0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x628>
 8003fc6:	e06a      	b.n	800409e <HAL_RCC_OscConfig+0x79e>
 8003fc8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fcc:	2201      	movs	r2, #1
 8003fce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	fa93 f2a3 	rbit	r2, r3
 8003fda:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fde:	601a      	str	r2, [r3, #0]
  return result;
 8003fe0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003fe4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe6:	fab3 f383 	clz	r3, r3
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	461a      	mov	r2, r3
 8003fee:	4b8c      	ldr	r3, [pc, #560]	; (8004220 <HAL_RCC_OscConfig+0x920>)
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ffa:	f7fd fd97 	bl	8001b2c <HAL_GetTick>
 8003ffe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004002:	e009      	b.n	8004018 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004004:	f7fd fd92 	bl	8001b2c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e381      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 8004018:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800401c:	2202      	movs	r2, #2
 800401e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004020:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	fa93 f2a3 	rbit	r2, r3
 800402a:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800402e:	601a      	str	r2, [r3, #0]
 8004030:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004034:	2202      	movs	r2, #2
 8004036:	601a      	str	r2, [r3, #0]
 8004038:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	fa93 f2a3 	rbit	r2, r3
 8004042:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800404c:	2202      	movs	r2, #2
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	fa93 f2a3 	rbit	r2, r3
 800405a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800405e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004060:	4b6e      	ldr	r3, [pc, #440]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004064:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004068:	2102      	movs	r1, #2
 800406a:	6019      	str	r1, [r3, #0]
 800406c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	fa93 f1a3 	rbit	r1, r3
 8004076:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800407a:	6019      	str	r1, [r3, #0]
  return result;
 800407c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f003 031f 	and.w	r3, r3, #31
 8004092:	2101      	movs	r1, #1
 8004094:	fa01 f303 	lsl.w	r3, r1, r3
 8004098:	4013      	ands	r3, r2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1b2      	bne.n	8004004 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0304 	and.w	r3, r3, #4
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	f000 8157 	beq.w	800435c <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d112      	bne.n	80040e6 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c0:	4b56      	ldr	r3, [pc, #344]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	4a55      	ldr	r2, [pc, #340]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 80040c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ca:	61d3      	str	r3, [r2, #28]
 80040cc:	4b53      	ldr	r3, [pc, #332]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 80040ce:	69db      	ldr	r3, [r3, #28]
 80040d0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80040d4:	f107 030c 	add.w	r3, r7, #12
 80040d8:	601a      	str	r2, [r3, #0]
 80040da:	f107 030c 	add.w	r3, r7, #12
 80040de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80040e0:	2301      	movs	r3, #1
 80040e2:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e6:	4b4f      	ldr	r3, [pc, #316]	; (8004224 <HAL_RCC_OscConfig+0x924>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d11a      	bne.n	8004128 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040f2:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x924>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a4b      	ldr	r2, [pc, #300]	; (8004224 <HAL_RCC_OscConfig+0x924>)
 80040f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040fe:	f7fd fd15 	bl	8001b2c <HAL_GetTick>
 8004102:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004106:	e009      	b.n	800411c <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004108:	f7fd fd10 	bl	8001b2c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004112:	1ad3      	subs	r3, r2, r3
 8004114:	2b64      	cmp	r3, #100	; 0x64
 8004116:	d901      	bls.n	800411c <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8004118:	2303      	movs	r3, #3
 800411a:	e2ff      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411c:	4b41      	ldr	r3, [pc, #260]	; (8004224 <HAL_RCC_OscConfig+0x924>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0ef      	beq.n	8004108 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004128:	1d3b      	adds	r3, r7, #4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	2b01      	cmp	r3, #1
 8004130:	d106      	bne.n	8004140 <HAL_RCC_OscConfig+0x840>
 8004132:	4b3a      	ldr	r3, [pc, #232]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004134:	6a1b      	ldr	r3, [r3, #32]
 8004136:	4a39      	ldr	r2, [pc, #228]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004138:	f043 0301 	orr.w	r3, r3, #1
 800413c:	6213      	str	r3, [r2, #32]
 800413e:	e02f      	b.n	80041a0 <HAL_RCC_OscConfig+0x8a0>
 8004140:	1d3b      	adds	r3, r7, #4
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x864>
 800414a:	4b34      	ldr	r3, [pc, #208]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800414c:	6a1b      	ldr	r3, [r3, #32]
 800414e:	4a33      	ldr	r2, [pc, #204]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004150:	f023 0301 	bic.w	r3, r3, #1
 8004154:	6213      	str	r3, [r2, #32]
 8004156:	4b31      	ldr	r3, [pc, #196]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	4a30      	ldr	r2, [pc, #192]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	6213      	str	r3, [r2, #32]
 8004162:	e01d      	b.n	80041a0 <HAL_RCC_OscConfig+0x8a0>
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	2b05      	cmp	r3, #5
 800416c:	d10c      	bne.n	8004188 <HAL_RCC_OscConfig+0x888>
 800416e:	4b2b      	ldr	r3, [pc, #172]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004174:	f043 0304 	orr.w	r3, r3, #4
 8004178:	6213      	str	r3, [r2, #32]
 800417a:	4b28      	ldr	r3, [pc, #160]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	4a27      	ldr	r2, [pc, #156]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	6213      	str	r3, [r2, #32]
 8004186:	e00b      	b.n	80041a0 <HAL_RCC_OscConfig+0x8a0>
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	4a23      	ldr	r2, [pc, #140]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	6213      	str	r3, [r2, #32]
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	4a20      	ldr	r2, [pc, #128]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 800419a:	f023 0304 	bic.w	r3, r3, #4
 800419e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041a0:	1d3b      	adds	r3, r7, #4
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d06a      	beq.n	8004280 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fd fcbf 	bl	8001b2c <HAL_GetTick>
 80041ae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041b2:	e00b      	b.n	80041cc <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b4:	f7fd fcba 	bl	8001b2c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e2a7      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 80041cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041d0:	2202      	movs	r2, #2
 80041d2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	fa93 f2a3 	rbit	r2, r3
 80041de:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80041e8:	2202      	movs	r2, #2
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	fa93 f2a3 	rbit	r2, r3
 80041f6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80041fa:	601a      	str	r2, [r3, #0]
  return result;
 80041fc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8004200:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004202:	fab3 f383 	clz	r3, r3
 8004206:	b2db      	uxtb	r3, r3
 8004208:	095b      	lsrs	r3, r3, #5
 800420a:	b2db      	uxtb	r3, r3
 800420c:	f043 0302 	orr.w	r3, r3, #2
 8004210:	b2db      	uxtb	r3, r3
 8004212:	2b02      	cmp	r3, #2
 8004214:	d108      	bne.n	8004228 <HAL_RCC_OscConfig+0x928>
 8004216:	4b01      	ldr	r3, [pc, #4]	; (800421c <HAL_RCC_OscConfig+0x91c>)
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	e013      	b.n	8004244 <HAL_RCC_OscConfig+0x944>
 800421c:	40021000 	.word	0x40021000
 8004220:	10908120 	.word	0x10908120
 8004224:	40007000 	.word	0x40007000
 8004228:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800422c:	2202      	movs	r2, #2
 800422e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004230:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	fa93 f2a3 	rbit	r2, r3
 800423a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800423e:	601a      	str	r2, [r3, #0]
 8004240:	4bc0      	ldr	r3, [pc, #768]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004248:	2102      	movs	r1, #2
 800424a:	6011      	str	r1, [r2, #0]
 800424c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004250:	6812      	ldr	r2, [r2, #0]
 8004252:	fa92 f1a2 	rbit	r1, r2
 8004256:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800425a:	6011      	str	r1, [r2, #0]
  return result;
 800425c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8004260:	6812      	ldr	r2, [r2, #0]
 8004262:	fab2 f282 	clz	r2, r2
 8004266:	b2d2      	uxtb	r2, r2
 8004268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	f002 021f 	and.w	r2, r2, #31
 8004272:	2101      	movs	r1, #1
 8004274:	fa01 f202 	lsl.w	r2, r1, r2
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d09a      	beq.n	80041b4 <HAL_RCC_OscConfig+0x8b4>
 800427e:	e063      	b.n	8004348 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004280:	f7fd fc54 	bl	8001b2c <HAL_GetTick>
 8004284:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	e00b      	b.n	80042a2 <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7fd fc4f 	bl	8001b2c <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	f241 3288 	movw	r2, #5000	; 0x1388
 800429a:	4293      	cmp	r3, r2
 800429c:	d901      	bls.n	80042a2 <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e23c      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 80042a2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042a6:	2202      	movs	r2, #2
 80042a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042aa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	fa93 f2a3 	rbit	r2, r3
 80042b4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042be:	2202      	movs	r2, #2
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	fa93 f2a3 	rbit	r2, r3
 80042cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042d0:	601a      	str	r2, [r3, #0]
  return result;
 80042d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80042d6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d8:	fab3 f383 	clz	r3, r3
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	f043 0302 	orr.w	r3, r3, #2
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d102      	bne.n	80042f2 <HAL_RCC_OscConfig+0x9f2>
 80042ec:	4b95      	ldr	r3, [pc, #596]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 80042ee:	6a1b      	ldr	r3, [r3, #32]
 80042f0:	e00d      	b.n	800430e <HAL_RCC_OscConfig+0xa0e>
 80042f2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042f6:	2202      	movs	r2, #2
 80042f8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042fa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	fa93 f2a3 	rbit	r2, r3
 8004304:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8004308:	601a      	str	r2, [r3, #0]
 800430a:	4b8e      	ldr	r3, [pc, #568]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 800430c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8004312:	2102      	movs	r1, #2
 8004314:	6011      	str	r1, [r2, #0]
 8004316:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800431a:	6812      	ldr	r2, [r2, #0]
 800431c:	fa92 f1a2 	rbit	r1, r2
 8004320:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8004324:	6011      	str	r1, [r2, #0]
  return result;
 8004326:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	fab2 f282 	clz	r2, r2
 8004330:	b2d2      	uxtb	r2, r2
 8004332:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004336:	b2d2      	uxtb	r2, r2
 8004338:	f002 021f 	and.w	r2, r2, #31
 800433c:	2101      	movs	r1, #1
 800433e:	fa01 f202 	lsl.w	r2, r1, r2
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1a0      	bne.n	800428a <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004348:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800434c:	2b01      	cmp	r3, #1
 800434e:	d105      	bne.n	800435c <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004350:	4b7c      	ldr	r3, [pc, #496]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4a7b      	ldr	r2, [pc, #492]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800435a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800435c:	1d3b      	adds	r3, r7, #4
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 81d9 	beq.w	800471a <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004368:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 030c 	and.w	r3, r3, #12
 8004370:	2b08      	cmp	r3, #8
 8004372:	f000 81a6 	beq.w	80046c2 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004376:	1d3b      	adds	r3, r7, #4
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	699b      	ldr	r3, [r3, #24]
 800437c:	2b02      	cmp	r3, #2
 800437e:	f040 811e 	bne.w	80045be <HAL_RCC_OscConfig+0xcbe>
 8004382:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004386:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800438a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800438c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	fa93 f2a3 	rbit	r2, r3
 8004396:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800439a:	601a      	str	r2, [r3, #0]
  return result;
 800439c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80043a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a2:	fab3 f383 	clz	r3, r3
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80043ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	461a      	mov	r2, r3
 80043b4:	2300      	movs	r3, #0
 80043b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b8:	f7fd fbb8 	bl	8001b2c <HAL_GetTick>
 80043bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043c0:	e009      	b.n	80043d6 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd fbb3 	bl	8001b2c <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e1a2      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 80043d6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80043de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	fa93 f2a3 	rbit	r2, r3
 80043ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043ee:	601a      	str	r2, [r3, #0]
  return result;
 80043f0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80043f4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043f6:	fab3 f383 	clz	r3, r3
 80043fa:	b2db      	uxtb	r3, r3
 80043fc:	095b      	lsrs	r3, r3, #5
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f043 0301 	orr.w	r3, r3, #1
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b01      	cmp	r3, #1
 8004408:	d102      	bne.n	8004410 <HAL_RCC_OscConfig+0xb10>
 800440a:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	e01b      	b.n	8004448 <HAL_RCC_OscConfig+0xb48>
 8004410:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004414:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004418:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	fa93 f2a3 	rbit	r2, r3
 8004424:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8004428:	601a      	str	r2, [r3, #0]
 800442a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800442e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	fa93 f2a3 	rbit	r2, r3
 800443e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	4b3f      	ldr	r3, [pc, #252]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800444c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004450:	6011      	str	r1, [r2, #0]
 8004452:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004456:	6812      	ldr	r2, [r2, #0]
 8004458:	fa92 f1a2 	rbit	r1, r2
 800445c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004460:	6011      	str	r1, [r2, #0]
  return result;
 8004462:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004466:	6812      	ldr	r2, [r2, #0]
 8004468:	fab2 f282 	clz	r2, r2
 800446c:	b2d2      	uxtb	r2, r2
 800446e:	f042 0220 	orr.w	r2, r2, #32
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	f002 021f 	and.w	r2, r2, #31
 8004478:	2101      	movs	r1, #1
 800447a:	fa01 f202 	lsl.w	r2, r1, r2
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d19e      	bne.n	80043c2 <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	f023 020f 	bic.w	r2, r3, #15
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	492c      	ldr	r1, [pc, #176]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 8004494:	4313      	orrs	r3, r2
 8004496:	62cb      	str	r3, [r1, #44]	; 0x2c
 8004498:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 800449a:	685b      	ldr	r3, [r3, #4]
 800449c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80044a0:	1d3b      	adds	r3, r7, #4
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	6a19      	ldr	r1, [r3, #32]
 80044a6:	1d3b      	adds	r3, r7, #4
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	430b      	orrs	r3, r1
 80044ae:	4925      	ldr	r1, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 80044b0:	4313      	orrs	r3, r2
 80044b2:	604b      	str	r3, [r1, #4]
 80044b4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044be:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	fa93 f2a3 	rbit	r2, r3
 80044c8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044cc:	601a      	str	r2, [r3, #0]
  return result;
 80044ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044d2:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044d4:	fab3 f383 	clz	r3, r3
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	461a      	mov	r2, r3
 80044e6:	2301      	movs	r3, #1
 80044e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044ea:	f7fd fb1f 	bl	8001b2c <HAL_GetTick>
 80044ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80044f2:	e009      	b.n	8004508 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f4:	f7fd fb1a 	bl	8001b2c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e109      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 8004508:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800450c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004510:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004512:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	fa93 f2a3 	rbit	r2, r3
 800451c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004520:	601a      	str	r2, [r3, #0]
  return result;
 8004522:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004526:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004528:	fab3 f383 	clz	r3, r3
 800452c:	b2db      	uxtb	r3, r3
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	b2db      	uxtb	r3, r3
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d105      	bne.n	8004548 <HAL_RCC_OscConfig+0xc48>
 800453c:	4b01      	ldr	r3, [pc, #4]	; (8004544 <HAL_RCC_OscConfig+0xc44>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	e01e      	b.n	8004580 <HAL_RCC_OscConfig+0xc80>
 8004542:	bf00      	nop
 8004544:	40021000 	.word	0x40021000
 8004548:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800454c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004550:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	fa93 f2a3 	rbit	r2, r3
 800455c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004566:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	fa93 f2a3 	rbit	r2, r3
 8004576:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	4b6a      	ldr	r3, [pc, #424]	; (8004728 <HAL_RCC_OscConfig+0xe28>)
 800457e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004580:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004584:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8004588:	6011      	str	r1, [r2, #0]
 800458a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800458e:	6812      	ldr	r2, [r2, #0]
 8004590:	fa92 f1a2 	rbit	r1, r2
 8004594:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004598:	6011      	str	r1, [r2, #0]
  return result;
 800459a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	fab2 f282 	clz	r2, r2
 80045a4:	b2d2      	uxtb	r2, r2
 80045a6:	f042 0220 	orr.w	r2, r2, #32
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	f002 021f 	and.w	r2, r2, #31
 80045b0:	2101      	movs	r1, #1
 80045b2:	fa01 f202 	lsl.w	r2, r1, r2
 80045b6:	4013      	ands	r3, r2
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d09b      	beq.n	80044f4 <HAL_RCC_OscConfig+0xbf4>
 80045bc:	e0ad      	b.n	800471a <HAL_RCC_OscConfig+0xe1a>
 80045be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045c2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	fa93 f2a3 	rbit	r2, r3
 80045d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045d6:	601a      	str	r2, [r3, #0]
  return result;
 80045d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80045dc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80045e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	461a      	mov	r2, r3
 80045f0:	2300      	movs	r3, #0
 80045f2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045f4:	f7fd fa9a 	bl	8001b2c <HAL_GetTick>
 80045f8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045fc:	e009      	b.n	8004612 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045fe:	f7fd fa95 	bl	8001b2c <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	2b02      	cmp	r3, #2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e084      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
 8004612:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004616:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800461a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800461c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	fa93 f2a3 	rbit	r2, r3
 8004626:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800462a:	601a      	str	r2, [r3, #0]
  return result;
 800462c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004630:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	fab3 f383 	clz	r3, r3
 8004636:	b2db      	uxtb	r3, r3
 8004638:	095b      	lsrs	r3, r3, #5
 800463a:	b2db      	uxtb	r3, r3
 800463c:	f043 0301 	orr.w	r3, r3, #1
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d102      	bne.n	800464c <HAL_RCC_OscConfig+0xd4c>
 8004646:	4b38      	ldr	r3, [pc, #224]	; (8004728 <HAL_RCC_OscConfig+0xe28>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	e01b      	b.n	8004684 <HAL_RCC_OscConfig+0xd84>
 800464c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004654:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004656:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	fa93 f2a3 	rbit	r2, r3
 8004660:	f107 0320 	add.w	r3, r7, #32
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	f107 031c 	add.w	r3, r7, #28
 800466a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	f107 031c 	add.w	r3, r7, #28
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	fa93 f2a3 	rbit	r2, r3
 800467a:	f107 0318 	add.w	r3, r7, #24
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	4b29      	ldr	r3, [pc, #164]	; (8004728 <HAL_RCC_OscConfig+0xe28>)
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	f107 0214 	add.w	r2, r7, #20
 8004688:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800468c:	6011      	str	r1, [r2, #0]
 800468e:	f107 0214 	add.w	r2, r7, #20
 8004692:	6812      	ldr	r2, [r2, #0]
 8004694:	fa92 f1a2 	rbit	r1, r2
 8004698:	f107 0210 	add.w	r2, r7, #16
 800469c:	6011      	str	r1, [r2, #0]
  return result;
 800469e:	f107 0210 	add.w	r2, r7, #16
 80046a2:	6812      	ldr	r2, [r2, #0]
 80046a4:	fab2 f282 	clz	r2, r2
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	f042 0220 	orr.w	r2, r2, #32
 80046ae:	b2d2      	uxtb	r2, r2
 80046b0:	f002 021f 	and.w	r2, r2, #31
 80046b4:	2101      	movs	r1, #1
 80046b6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ba:	4013      	ands	r3, r2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d19e      	bne.n	80045fe <HAL_RCC_OscConfig+0xcfe>
 80046c0:	e02b      	b.n	800471a <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046c2:	1d3b      	adds	r3, r7, #4
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d101      	bne.n	80046d0 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e025      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80046d0:	4b15      	ldr	r3, [pc, #84]	; (8004728 <HAL_RCC_OscConfig+0xe28>)
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80046d8:	4b13      	ldr	r3, [pc, #76]	; (8004728 <HAL_RCC_OscConfig+0xe28>)
 80046da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046dc:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80046e0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046e4:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80046e8:	1d3b      	adds	r3, r7, #4
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d111      	bne.n	8004716 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80046f2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80046f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80046fa:	1d3b      	adds	r3, r7, #4
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004700:	429a      	cmp	r2, r3
 8004702:	d108      	bne.n	8004716 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8004704:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004708:	f003 020f 	and.w	r2, r3, #15
 800470c:	1d3b      	adds	r3, r7, #4
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004712:	429a      	cmp	r2, r3
 8004714:	d001      	beq.n	800471a <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40021000 	.word	0x40021000

0800472c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b09e      	sub	sp, #120	; 0x78
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004736:	2300      	movs	r3, #0
 8004738:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e162      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004744:	4b90      	ldr	r3, [pc, #576]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0307 	and.w	r3, r3, #7
 800474c:	683a      	ldr	r2, [r7, #0]
 800474e:	429a      	cmp	r2, r3
 8004750:	d910      	bls.n	8004774 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004752:	4b8d      	ldr	r3, [pc, #564]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 0207 	bic.w	r2, r3, #7
 800475a:	498b      	ldr	r1, [pc, #556]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	4313      	orrs	r3, r2
 8004760:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b89      	ldr	r3, [pc, #548]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e14a      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004780:	4b82      	ldr	r3, [pc, #520]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	497f      	ldr	r1, [pc, #508]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0301 	and.w	r3, r3, #1
 800479a:	2b00      	cmp	r3, #0
 800479c:	f000 80dc 	beq.w	8004958 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d13c      	bne.n	8004822 <HAL_RCC_ClockConfig+0xf6>
 80047a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047ac:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047b0:	fa93 f3a3 	rbit	r3, r3
 80047b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80047b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047b8:	fab3 f383 	clz	r3, r3
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	095b      	lsrs	r3, r3, #5
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	f043 0301 	orr.w	r3, r3, #1
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d102      	bne.n	80047d2 <HAL_RCC_ClockConfig+0xa6>
 80047cc:	4b6f      	ldr	r3, [pc, #444]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	e00f      	b.n	80047f2 <HAL_RCC_ClockConfig+0xc6>
 80047d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047d6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80047da:	fa93 f3a3 	rbit	r3, r3
 80047de:	667b      	str	r3, [r7, #100]	; 0x64
 80047e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80047e4:	663b      	str	r3, [r7, #96]	; 0x60
 80047e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047ee:	4b67      	ldr	r3, [pc, #412]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80047f6:	65ba      	str	r2, [r7, #88]	; 0x58
 80047f8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fa:	fa92 f2a2 	rbit	r2, r2
 80047fe:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004800:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004802:	fab2 f282 	clz	r2, r2
 8004806:	b2d2      	uxtb	r2, r2
 8004808:	f042 0220 	orr.w	r2, r2, #32
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	f002 021f 	and.w	r2, r2, #31
 8004812:	2101      	movs	r1, #1
 8004814:	fa01 f202 	lsl.w	r2, r1, r2
 8004818:	4013      	ands	r3, r2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d17b      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e0f3      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d13c      	bne.n	80048a4 <HAL_RCC_ClockConfig+0x178>
 800482a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800482e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004832:	fa93 f3a3 	rbit	r3, r3
 8004836:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004838:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	095b      	lsrs	r3, r3, #5
 8004842:	b2db      	uxtb	r3, r3
 8004844:	f043 0301 	orr.w	r3, r3, #1
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b01      	cmp	r3, #1
 800484c:	d102      	bne.n	8004854 <HAL_RCC_ClockConfig+0x128>
 800484e:	4b4f      	ldr	r3, [pc, #316]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	e00f      	b.n	8004874 <HAL_RCC_ClockConfig+0x148>
 8004854:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004858:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800485a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800485c:	fa93 f3a3 	rbit	r3, r3
 8004860:	647b      	str	r3, [r7, #68]	; 0x44
 8004862:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004866:	643b      	str	r3, [r7, #64]	; 0x40
 8004868:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800486a:	fa93 f3a3 	rbit	r3, r3
 800486e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004870:	4b46      	ldr	r3, [pc, #280]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004874:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004878:	63ba      	str	r2, [r7, #56]	; 0x38
 800487a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800487c:	fa92 f2a2 	rbit	r2, r2
 8004880:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004884:	fab2 f282 	clz	r2, r2
 8004888:	b2d2      	uxtb	r2, r2
 800488a:	f042 0220 	orr.w	r2, r2, #32
 800488e:	b2d2      	uxtb	r2, r2
 8004890:	f002 021f 	and.w	r2, r2, #31
 8004894:	2101      	movs	r1, #1
 8004896:	fa01 f202 	lsl.w	r2, r1, r2
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d13a      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e0b2      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
 80048a4:	2302      	movs	r3, #2
 80048a6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048aa:	fa93 f3a3 	rbit	r3, r3
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80048b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	095b      	lsrs	r3, r3, #5
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f043 0301 	orr.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d102      	bne.n	80048cc <HAL_RCC_ClockConfig+0x1a0>
 80048c6:	4b31      	ldr	r3, [pc, #196]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	e00d      	b.n	80048e8 <HAL_RCC_ClockConfig+0x1bc>
 80048cc:	2302      	movs	r3, #2
 80048ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d2:	fa93 f3a3 	rbit	r3, r3
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
 80048d8:	2302      	movs	r3, #2
 80048da:	623b      	str	r3, [r7, #32]
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	fa93 f3a3 	rbit	r3, r3
 80048e2:	61fb      	str	r3, [r7, #28]
 80048e4:	4b29      	ldr	r3, [pc, #164]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 80048e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048e8:	2202      	movs	r2, #2
 80048ea:	61ba      	str	r2, [r7, #24]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	fa92 f2a2 	rbit	r2, r2
 80048f2:	617a      	str	r2, [r7, #20]
  return result;
 80048f4:	697a      	ldr	r2, [r7, #20]
 80048f6:	fab2 f282 	clz	r2, r2
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	f042 0220 	orr.w	r2, r2, #32
 8004900:	b2d2      	uxtb	r2, r2
 8004902:	f002 021f 	and.w	r2, r2, #31
 8004906:	2101      	movs	r1, #1
 8004908:	fa01 f202 	lsl.w	r2, r1, r2
 800490c:	4013      	ands	r3, r2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d101      	bne.n	8004916 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e079      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004916:	4b1d      	ldr	r3, [pc, #116]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f023 0203 	bic.w	r2, r3, #3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	491a      	ldr	r1, [pc, #104]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004924:	4313      	orrs	r3, r2
 8004926:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004928:	f7fd f900 	bl	8001b2c <HAL_GetTick>
 800492c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800492e:	e00a      	b.n	8004946 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004930:	f7fd f8fc 	bl	8001b2c <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	f241 3288 	movw	r2, #5000	; 0x1388
 800493e:	4293      	cmp	r3, r2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e061      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004946:	4b11      	ldr	r3, [pc, #68]	; (800498c <HAL_RCC_ClockConfig+0x260>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f003 020c 	and.w	r2, r3, #12
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	429a      	cmp	r2, r3
 8004956:	d1eb      	bne.n	8004930 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d214      	bcs.n	8004990 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004966:	4b08      	ldr	r3, [pc, #32]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f023 0207 	bic.w	r2, r3, #7
 800496e:	4906      	ldr	r1, [pc, #24]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	4313      	orrs	r3, r2
 8004974:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004976:	4b04      	ldr	r3, [pc, #16]	; (8004988 <HAL_RCC_ClockConfig+0x25c>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0307 	and.w	r3, r3, #7
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d005      	beq.n	8004990 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	e040      	b.n	8004a0a <HAL_RCC_ClockConfig+0x2de>
 8004988:	40022000 	.word	0x40022000
 800498c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 0304 	and.w	r3, r3, #4
 8004998:	2b00      	cmp	r3, #0
 800499a:	d008      	beq.n	80049ae <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800499c:	4b1d      	ldr	r3, [pc, #116]	; (8004a14 <HAL_RCC_ClockConfig+0x2e8>)
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	491a      	ldr	r1, [pc, #104]	; (8004a14 <HAL_RCC_ClockConfig+0x2e8>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f003 0308 	and.w	r3, r3, #8
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80049ba:	4b16      	ldr	r3, [pc, #88]	; (8004a14 <HAL_RCC_ClockConfig+0x2e8>)
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	00db      	lsls	r3, r3, #3
 80049c8:	4912      	ldr	r1, [pc, #72]	; (8004a14 <HAL_RCC_ClockConfig+0x2e8>)
 80049ca:	4313      	orrs	r3, r2
 80049cc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80049ce:	f000 f829 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80049d2:	4601      	mov	r1, r0
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <HAL_RCC_ClockConfig+0x2e8>)
 80049d6:	685b      	ldr	r3, [r3, #4]
 80049d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049dc:	22f0      	movs	r2, #240	; 0xf0
 80049de:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	fa92 f2a2 	rbit	r2, r2
 80049e6:	60fa      	str	r2, [r7, #12]
  return result;
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	fab2 f282 	clz	r2, r2
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	40d3      	lsrs	r3, r2
 80049f2:	4a09      	ldr	r2, [pc, #36]	; (8004a18 <HAL_RCC_ClockConfig+0x2ec>)
 80049f4:	5cd3      	ldrb	r3, [r2, r3]
 80049f6:	fa21 f303 	lsr.w	r3, r1, r3
 80049fa:	4a08      	ldr	r2, [pc, #32]	; (8004a1c <HAL_RCC_ClockConfig+0x2f0>)
 80049fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <HAL_RCC_ClockConfig+0x2f4>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4618      	mov	r0, r3
 8004a04:	f7fd f84e 	bl	8001aa4 <HAL_InitTick>
  
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3778      	adds	r7, #120	; 0x78
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40021000 	.word	0x40021000
 8004a18:	08006f80 	.word	0x08006f80
 8004a1c:	20000010 	.word	0x20000010
 8004a20:	20000014 	.word	0x20000014

08004a24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b08b      	sub	sp, #44	; 0x2c
 8004a28:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	61fb      	str	r3, [r7, #28]
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	2300      	movs	r3, #0
 8004a34:	627b      	str	r3, [r7, #36]	; 0x24
 8004a36:	2300      	movs	r3, #0
 8004a38:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004a3e:	4b2a      	ldr	r3, [pc, #168]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d002      	beq.n	8004a54 <HAL_RCC_GetSysClockFreq+0x30>
 8004a4e:	2b08      	cmp	r3, #8
 8004a50:	d003      	beq.n	8004a5a <HAL_RCC_GetSysClockFreq+0x36>
 8004a52:	e03f      	b.n	8004ad4 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004a54:	4b25      	ldr	r3, [pc, #148]	; (8004aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004a56:	623b      	str	r3, [r7, #32]
      break;
 8004a58:	e03f      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004a60:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004a64:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	68ba      	ldr	r2, [r7, #8]
 8004a68:	fa92 f2a2 	rbit	r2, r2
 8004a6c:	607a      	str	r2, [r7, #4]
  return result;
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	fab2 f282 	clz	r2, r2
 8004a74:	b2d2      	uxtb	r2, r2
 8004a76:	40d3      	lsrs	r3, r2
 8004a78:	4a1d      	ldr	r2, [pc, #116]	; (8004af0 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004a7a:	5cd3      	ldrb	r3, [r2, r3]
 8004a7c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004a7e:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8004a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a82:	f003 030f 	and.w	r3, r3, #15
 8004a86:	220f      	movs	r2, #15
 8004a88:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a8a:	693a      	ldr	r2, [r7, #16]
 8004a8c:	fa92 f2a2 	rbit	r2, r2
 8004a90:	60fa      	str	r2, [r7, #12]
  return result;
 8004a92:	68fa      	ldr	r2, [r7, #12]
 8004a94:	fab2 f282 	clz	r2, r2
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	40d3      	lsrs	r3, r2
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004a9e:	5cd3      	ldrb	r3, [r2, r3]
 8004aa0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004aac:	4a0f      	ldr	r2, [pc, #60]	; (8004aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	fb02 f303 	mul.w	r3, r2, r3
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
 8004abc:	e007      	b.n	8004ace <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004abe:	4a0b      	ldr	r2, [pc, #44]	; (8004aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	fb02 f303 	mul.w	r3, r2, r3
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	623b      	str	r3, [r7, #32]
      break;
 8004ad2:	e002      	b.n	8004ada <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ad4:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetSysClockFreq+0xc8>)
 8004ad6:	623b      	str	r3, [r7, #32]
      break;
 8004ad8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ada:	6a3b      	ldr	r3, [r7, #32]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	372c      	adds	r7, #44	; 0x2c
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40021000 	.word	0x40021000
 8004aec:	007a1200 	.word	0x007a1200
 8004af0:	08006f98 	.word	0x08006f98
 8004af4:	08006fa8 	.word	0x08006fa8

08004af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004af8:	b480      	push	{r7}
 8004afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004afc:	4b03      	ldr	r3, [pc, #12]	; (8004b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8004afe:	681b      	ldr	r3, [r3, #0]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	20000010 	.word	0x20000010

08004b10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004b16:	f7ff ffef 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	; (8004b4c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b24:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b28:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	fa92 f2a2 	rbit	r2, r2
 8004b30:	603a      	str	r2, [r7, #0]
  return result;
 8004b32:	683a      	ldr	r2, [r7, #0]
 8004b34:	fab2 f282 	clz	r2, r2
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	40d3      	lsrs	r3, r2
 8004b3c:	4a04      	ldr	r2, [pc, #16]	; (8004b50 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004b3e:	5cd3      	ldrb	r3, [r2, r3]
 8004b40:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}
 8004b4c:	40021000 	.word	0x40021000
 8004b50:	08006f90 	.word	0x08006f90

08004b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b082      	sub	sp, #8
 8004b58:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004b5a:	f7ff ffcd 	bl	8004af8 <HAL_RCC_GetHCLKFreq>
 8004b5e:	4601      	mov	r1, r0
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004b68:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004b6c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	fa92 f2a2 	rbit	r2, r2
 8004b74:	603a      	str	r2, [r7, #0]
  return result;
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	fab2 f282 	clz	r2, r2
 8004b7c:	b2d2      	uxtb	r2, r2
 8004b7e:	40d3      	lsrs	r3, r2
 8004b80:	4a04      	ldr	r2, [pc, #16]	; (8004b94 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004b82:	5cd3      	ldrb	r3, [r2, r3]
 8004b84:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40021000 	.word	0x40021000
 8004b94:	08006f90 	.word	0x08006f90

08004b98 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b092      	sub	sp, #72	; 0x48
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f000 80d4 	beq.w	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bbc:	4b4e      	ldr	r3, [pc, #312]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bbe:	69db      	ldr	r3, [r3, #28]
 8004bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10e      	bne.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	4a4a      	ldr	r2, [pc, #296]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bd2:	61d3      	str	r3, [r2, #28]
 8004bd4:	4b48      	ldr	r3, [pc, #288]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bdc:	60bb      	str	r3, [r7, #8]
 8004bde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be6:	4b45      	ldr	r3, [pc, #276]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d118      	bne.n	8004c24 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bf2:	4b42      	ldr	r3, [pc, #264]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a41      	ldr	r2, [pc, #260]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bfe:	f7fc ff95 	bl	8001b2c <HAL_GetTick>
 8004c02:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c04:	e008      	b.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c06:	f7fc ff91 	bl	8001b2c <HAL_GetTick>
 8004c0a:	4602      	mov	r2, r0
 8004c0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c0e:	1ad3      	subs	r3, r2, r3
 8004c10:	2b64      	cmp	r3, #100	; 0x64
 8004c12:	d901      	bls.n	8004c18 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e1d6      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c18:	4b38      	ldr	r3, [pc, #224]	; (8004cfc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d0f0      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c24:	4b34      	ldr	r3, [pc, #208]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c26:	6a1b      	ldr	r3, [r3, #32]
 8004c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c2c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8084 	beq.w	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c3e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d07c      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c46:	6a1b      	ldr	r3, [r3, #32]
 8004c48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c56:	fa93 f3a3 	rbit	r3, r3
 8004c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c5e:	fab3 f383 	clz	r3, r3
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b26      	ldr	r3, [pc, #152]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c68:	4413      	add	r3, r2
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	2301      	movs	r3, #1
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7a:	fa93 f3a3 	rbit	r3, r3
 8004c7e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c82:	fab3 f383 	clz	r3, r3
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	461a      	mov	r2, r3
 8004c8a:	4b1d      	ldr	r3, [pc, #116]	; (8004d00 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004c8c:	4413      	add	r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	461a      	mov	r2, r3
 8004c92:	2300      	movs	r3, #0
 8004c94:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c9e:	f003 0301 	and.w	r3, r3, #1
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d04b      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca6:	f7fc ff41 	bl	8001b2c <HAL_GetTick>
 8004caa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cae:	f7fc ff3d 	bl	8001b2c <HAL_GetTick>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e180      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004cc4:	2302      	movs	r3, #2
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	fa93 f3a3 	rbit	r3, r3
 8004cce:	627b      	str	r3, [r7, #36]	; 0x24
 8004cd0:	2302      	movs	r3, #2
 8004cd2:	623b      	str	r3, [r7, #32]
 8004cd4:	6a3b      	ldr	r3, [r7, #32]
 8004cd6:	fa93 f3a3 	rbit	r3, r3
 8004cda:	61fb      	str	r3, [r7, #28]
  return result;
 8004cdc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	fab3 f383 	clz	r3, r3
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	095b      	lsrs	r3, r3, #5
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	f043 0302 	orr.w	r3, r3, #2
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d108      	bne.n	8004d04 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8004cf2:	4b01      	ldr	r3, [pc, #4]	; (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004cf4:	6a1b      	ldr	r3, [r3, #32]
 8004cf6:	e00d      	b.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004cf8:	40021000 	.word	0x40021000
 8004cfc:	40007000 	.word	0x40007000
 8004d00:	10908100 	.word	0x10908100
 8004d04:	2302      	movs	r3, #2
 8004d06:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	fa93 f3a3 	rbit	r3, r3
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	4ba0      	ldr	r3, [pc, #640]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d14:	2202      	movs	r2, #2
 8004d16:	613a      	str	r2, [r7, #16]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	fa92 f2a2 	rbit	r2, r2
 8004d1e:	60fa      	str	r2, [r7, #12]
  return result;
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	fab2 f282 	clz	r2, r2
 8004d26:	b2d2      	uxtb	r2, r2
 8004d28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d2c:	b2d2      	uxtb	r2, r2
 8004d2e:	f002 021f 	and.w	r2, r2, #31
 8004d32:	2101      	movs	r1, #1
 8004d34:	fa01 f202 	lsl.w	r2, r1, r2
 8004d38:	4013      	ands	r3, r2
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d0b7      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004d3e:	4b95      	ldr	r3, [pc, #596]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	4992      	ldr	r1, [pc, #584]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004d50:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d105      	bne.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d58:	4b8e      	ldr	r3, [pc, #568]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5a:	69db      	ldr	r3, [r3, #28]
 8004d5c:	4a8d      	ldr	r2, [pc, #564]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d008      	beq.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d70:	4b88      	ldr	r3, [pc, #544]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	f023 0203 	bic.w	r2, r3, #3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	4985      	ldr	r1, [pc, #532]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d008      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004d8e:	4b81      	ldr	r3, [pc, #516]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	497e      	ldr	r1, [pc, #504]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004d9c:	4313      	orrs	r3, r2
 8004d9e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0304 	and.w	r3, r3, #4
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d008      	beq.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dac:	4b79      	ldr	r3, [pc, #484]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	4976      	ldr	r1, [pc, #472]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0320 	and.w	r3, r3, #32
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d008      	beq.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dca:	4b72      	ldr	r3, [pc, #456]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dce:	f023 0210 	bic.w	r2, r3, #16
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	496f      	ldr	r1, [pc, #444]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d008      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004de8:	4b6a      	ldr	r3, [pc, #424]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df4:	4967      	ldr	r1, [pc, #412]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e06:	4b63      	ldr	r3, [pc, #396]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0a:	f023 0220 	bic.w	r2, r3, #32
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a1b      	ldr	r3, [r3, #32]
 8004e12:	4960      	ldr	r1, [pc, #384]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e24:	4b5b      	ldr	r3, [pc, #364]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e28:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4958      	ldr	r1, [pc, #352]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0308 	and.w	r3, r3, #8
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d008      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e42:	4b54      	ldr	r3, [pc, #336]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	4951      	ldr	r1, [pc, #324]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e50:	4313      	orrs	r3, r2
 8004e52:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d008      	beq.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e60:	4b4c      	ldr	r3, [pc, #304]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e64:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	4949      	ldr	r1, [pc, #292]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d008      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e7e:	4b45      	ldr	r3, [pc, #276]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8a:	4942      	ldr	r1, [pc, #264]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d008      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004e9c:	4b3d      	ldr	r3, [pc, #244]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ea8:	493a      	ldr	r1, [pc, #232]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d008      	beq.n	8004ecc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004eba:	4b36      	ldr	r3, [pc, #216]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebe:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec6:	4933      	ldr	r1, [pc, #204]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d008      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004ed8:	4b2e      	ldr	r3, [pc, #184]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004edc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee4:	492b      	ldr	r1, [pc, #172]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d008      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8004ef6:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f02:	4924      	ldr	r1, [pc, #144]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d008      	beq.n	8004f26 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004f14:	4b1f      	ldr	r3, [pc, #124]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f18:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f20:	491c      	ldr	r1, [pc, #112]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d008      	beq.n	8004f44 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004f32:	4b18      	ldr	r3, [pc, #96]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f3e:	4915      	ldr	r1, [pc, #84]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d008      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004f50:	4b10      	ldr	r3, [pc, #64]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	490d      	ldr	r1, [pc, #52]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d008      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004f6e:	4b09      	ldr	r3, [pc, #36]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f72:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f7a:	4906      	ldr	r1, [pc, #24]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004f8c:	4b01      	ldr	r3, [pc, #4]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f90:	e002      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8004f92:	bf00      	nop
 8004f94:	40021000 	.word	0x40021000
 8004f98:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fa0:	490b      	ldr	r1, [pc, #44]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d008      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004fb2:	4b07      	ldr	r3, [pc, #28]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb6:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fbe:	4904      	ldr	r1, [pc, #16]	; (8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3748      	adds	r7, #72	; 0x48
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
 8004fce:	bf00      	nop
 8004fd0:	40021000 	.word	0x40021000

08004fd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e049      	b.n	800507a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d106      	bne.n	8005000 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f7fc f8e8 	bl	80011d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	3304      	adds	r3, #4
 8005010:	4619      	mov	r1, r3
 8005012:	4610      	mov	r0, r2
 8005014:	f000 fb14 	bl	8005640 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2201      	movs	r2, #1
 800502c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2201      	movs	r2, #1
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2201      	movs	r2, #1
 800503c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2201      	movs	r2, #1
 8005044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2201      	movs	r2, #1
 8005054:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2201      	movs	r2, #1
 800506c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
	...

08005084 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005092:	b2db      	uxtb	r3, r3
 8005094:	2b01      	cmp	r3, #1
 8005096:	d001      	beq.n	800509c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e047      	b.n	800512c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a23      	ldr	r2, [pc, #140]	; (8005138 <HAL_TIM_Base_Start+0xb4>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d01d      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b6:	d018      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a1f      	ldr	r2, [pc, #124]	; (800513c <HAL_TIM_Base_Start+0xb8>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d013      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a1e      	ldr	r2, [pc, #120]	; (8005140 <HAL_TIM_Base_Start+0xbc>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d00e      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a1c      	ldr	r2, [pc, #112]	; (8005144 <HAL_TIM_Base_Start+0xc0>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d009      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a1b      	ldr	r2, [pc, #108]	; (8005148 <HAL_TIM_Base_Start+0xc4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d004      	beq.n	80050ea <HAL_TIM_Base_Start+0x66>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a19      	ldr	r2, [pc, #100]	; (800514c <HAL_TIM_Base_Start+0xc8>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d115      	bne.n	8005116 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <HAL_TIM_Base_Start+0xcc>)
 80050f2:	4013      	ands	r3, r2
 80050f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	d015      	beq.n	8005128 <HAL_TIM_Base_Start+0xa4>
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005102:	d011      	beq.n	8005128 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005114:	e008      	b.n	8005128 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	681a      	ldr	r2, [r3, #0]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	e000      	b.n	800512a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005128:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800512a:	2300      	movs	r3, #0
}
 800512c:	4618      	mov	r0, r3
 800512e:	3714      	adds	r7, #20
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr
 8005138:	40012c00 	.word	0x40012c00
 800513c:	40000400 	.word	0x40000400
 8005140:	40000800 	.word	0x40000800
 8005144:	40013400 	.word	0x40013400
 8005148:	40014000 	.word	0x40014000
 800514c:	40015000 	.word	0x40015000
 8005150:	00010007 	.word	0x00010007

08005154 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005154:	b480      	push	{r7}
 8005156:	b085      	sub	sp, #20
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005162:	b2db      	uxtb	r3, r3
 8005164:	2b01      	cmp	r3, #1
 8005166:	d001      	beq.n	800516c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e04f      	b.n	800520c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68da      	ldr	r2, [r3, #12]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0201 	orr.w	r2, r2, #1
 8005182:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a23      	ldr	r2, [pc, #140]	; (8005218 <HAL_TIM_Base_Start_IT+0xc4>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d01d      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d018      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_TIM_Base_Start_IT+0xc8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d013      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a1e      	ldr	r2, [pc, #120]	; (8005220 <HAL_TIM_Base_Start_IT+0xcc>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d00e      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <HAL_TIM_Base_Start_IT+0xd0>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d009      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <HAL_TIM_Base_Start_IT+0xd4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d004      	beq.n	80051ca <HAL_TIM_Base_Start_IT+0x76>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_TIM_Base_Start_IT+0xd8>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d115      	bne.n	80051f6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	689a      	ldr	r2, [r3, #8]
 80051d0:	4b17      	ldr	r3, [pc, #92]	; (8005230 <HAL_TIM_Base_Start_IT+0xdc>)
 80051d2:	4013      	ands	r3, r2
 80051d4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b06      	cmp	r3, #6
 80051da:	d015      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80051e2:	d011      	beq.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051f4:	e008      	b.n	8005208 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f042 0201 	orr.w	r2, r2, #1
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e000      	b.n	800520a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005208:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3714      	adds	r7, #20
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40000400 	.word	0x40000400
 8005220:	40000800 	.word	0x40000800
 8005224:	40013400 	.word	0x40013400
 8005228:	40014000 	.word	0x40014000
 800522c:	40015000 	.word	0x40015000
 8005230:	00010007 	.word	0x00010007

08005234 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0302 	and.w	r3, r3, #2
 8005246:	2b02      	cmp	r3, #2
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0302 	and.w	r3, r3, #2
 8005254:	2b02      	cmp	r3, #2
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0202 	mvn.w	r2, #2
 8005260:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9c3 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 f9b5 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f9c6 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0304 	and.w	r3, r3, #4
 800529a:	2b04      	cmp	r3, #4
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b04      	cmp	r3, #4
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0204 	mvn.w	r2, #4
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2202      	movs	r2, #2
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f999 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f98b 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 f99c 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b08      	cmp	r3, #8
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b08      	cmp	r3, #8
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0208 	mvn.w	r2, #8
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2204      	movs	r2, #4
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f96f 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f961 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 f972 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d122      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0310 	and.w	r3, r3, #16
 8005350:	2b10      	cmp	r3, #16
 8005352:	d11b      	bne.n	800538c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0210 	mvn.w	r2, #16
 800535c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2208      	movs	r2, #8
 8005362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536e:	2b00      	cmp	r3, #0
 8005370:	d003      	beq.n	800537a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f945 	bl	8005602 <HAL_TIM_IC_CaptureCallback>
 8005378:	e005      	b.n	8005386 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f937 	bl	80055ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f948 	bl	8005616 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	691b      	ldr	r3, [r3, #16]
 8005392:	f003 0301 	and.w	r3, r3, #1
 8005396:	2b01      	cmp	r3, #1
 8005398:	d10e      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0301 	and.w	r3, r3, #1
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f06f 0201 	mvn.w	r2, #1
 80053b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7fb fe1c 	bl	8000ff0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053c2:	2b80      	cmp	r3, #128	; 0x80
 80053c4:	d10e      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053d0:	2b80      	cmp	r3, #128	; 0x80
 80053d2:	d107      	bne.n	80053e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	f000 fafc 	bl	80059dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f2:	d10e      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fe:	2b80      	cmp	r3, #128	; 0x80
 8005400:	d107      	bne.n	8005412 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800540a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 faef 	bl	80059f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b40      	cmp	r3, #64	; 0x40
 800541e:	d10e      	bne.n	800543e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542a:	2b40      	cmp	r3, #64	; 0x40
 800542c:	d107      	bne.n	800543e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005436:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f000 f8f6 	bl	800562a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	f003 0320 	and.w	r3, r3, #32
 8005448:	2b20      	cmp	r3, #32
 800544a:	d10e      	bne.n	800546a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0320 	and.w	r3, r3, #32
 8005456:	2b20      	cmp	r3, #32
 8005458:	d107      	bne.n	800546a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f06f 0220 	mvn.w	r2, #32
 8005462:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 faaf 	bl	80059c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800546a:	bf00      	nop
 800546c:	3708      	adds	r7, #8
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b084      	sub	sp, #16
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800547c:	2300      	movs	r3, #0
 800547e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_TIM_ConfigClockSource+0x1c>
 800548a:	2302      	movs	r3, #2
 800548c:	e0ab      	b.n	80055e6 <HAL_TIM_ConfigClockSource+0x174>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2201      	movs	r2, #1
 8005492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2202      	movs	r2, #2
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d067      	beq.n	800559a <HAL_TIM_ConfigClockSource+0x128>
 80054ca:	2b40      	cmp	r3, #64	; 0x40
 80054cc:	d80b      	bhi.n	80054e6 <HAL_TIM_ConfigClockSource+0x74>
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d073      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x148>
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d802      	bhi.n	80054dc <HAL_TIM_ConfigClockSource+0x6a>
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d06f      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x148>
 80054da:	e077      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x15a>
 80054dc:	2b20      	cmp	r3, #32
 80054de:	d06c      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x148>
 80054e0:	2b30      	cmp	r3, #48	; 0x30
 80054e2:	d06a      	beq.n	80055ba <HAL_TIM_ConfigClockSource+0x148>
 80054e4:	e072      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x15a>
 80054e6:	2b70      	cmp	r3, #112	; 0x70
 80054e8:	d00d      	beq.n	8005506 <HAL_TIM_ConfigClockSource+0x94>
 80054ea:	2b70      	cmp	r3, #112	; 0x70
 80054ec:	d804      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x86>
 80054ee:	2b50      	cmp	r3, #80	; 0x50
 80054f0:	d033      	beq.n	800555a <HAL_TIM_ConfigClockSource+0xe8>
 80054f2:	2b60      	cmp	r3, #96	; 0x60
 80054f4:	d041      	beq.n	800557a <HAL_TIM_ConfigClockSource+0x108>
 80054f6:	e069      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x15a>
 80054f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fc:	d069      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x160>
 80054fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005502:	d017      	beq.n	8005534 <HAL_TIM_ConfigClockSource+0xc2>
 8005504:	e062      	b.n	80055cc <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6818      	ldr	r0, [r3, #0]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	6899      	ldr	r1, [r3, #8]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f000 f9ab 	bl	8005870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	68ba      	ldr	r2, [r7, #8]
 8005530:	609a      	str	r2, [r3, #8]
      break;
 8005532:	e04f      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6818      	ldr	r0, [r3, #0]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	6899      	ldr	r1, [r3, #8]
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f000 f994 	bl	8005870 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689a      	ldr	r2, [r3, #8]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005556:	609a      	str	r2, [r3, #8]
      break;
 8005558:	e03c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6818      	ldr	r0, [r3, #0]
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	6859      	ldr	r1, [r3, #4]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	461a      	mov	r2, r3
 8005568:	f000 f908 	bl	800577c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	2150      	movs	r1, #80	; 0x50
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f961 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 8005578:	e02c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6818      	ldr	r0, [r3, #0]
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	6859      	ldr	r1, [r3, #4]
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	461a      	mov	r2, r3
 8005588:	f000 f927 	bl	80057da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2160      	movs	r1, #96	; 0x60
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f951 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 8005598:	e01c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6818      	ldr	r0, [r3, #0]
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	6859      	ldr	r1, [r3, #4]
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	461a      	mov	r2, r3
 80055a8:	f000 f8e8 	bl	800577c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2140      	movs	r1, #64	; 0x40
 80055b2:	4618      	mov	r0, r3
 80055b4:	f000 f941 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 80055b8:	e00c      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4619      	mov	r1, r3
 80055c4:	4610      	mov	r0, r2
 80055c6:	f000 f938 	bl	800583a <TIM_ITRx_SetConfig>
      break;
 80055ca:	e003      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	73fb      	strb	r3, [r7, #15]
      break;
 80055d0:	e000      	b.n	80055d4 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80055d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055ee:	b480      	push	{r7}
 80055f0:	b083      	sub	sp, #12
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f6:	bf00      	nop
 80055f8:	370c      	adds	r7, #12
 80055fa:	46bd      	mov	sp, r7
 80055fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005600:	4770      	bx	lr

08005602 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005602:	b480      	push	{r7}
 8005604:	b083      	sub	sp, #12
 8005606:	af00      	add	r7, sp, #0
 8005608:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005616:	b480      	push	{r7}
 8005618:	b083      	sub	sp, #12
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800562a:	b480      	push	{r7}
 800562c:	b083      	sub	sp, #12
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005632:	bf00      	nop
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
	...

08005640 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005640:	b480      	push	{r7}
 8005642:	b085      	sub	sp, #20
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a42      	ldr	r2, [pc, #264]	; (800575c <TIM_Base_SetConfig+0x11c>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d013      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800565e:	d00f      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3f      	ldr	r2, [pc, #252]	; (8005760 <TIM_Base_SetConfig+0x120>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d00b      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3e      	ldr	r2, [pc, #248]	; (8005764 <TIM_Base_SetConfig+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d007      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3d      	ldr	r2, [pc, #244]	; (8005768 <TIM_Base_SetConfig+0x128>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d003      	beq.n	8005680 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a3c      	ldr	r2, [pc, #240]	; (800576c <TIM_Base_SetConfig+0x12c>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d108      	bne.n	8005692 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005686:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a31      	ldr	r2, [pc, #196]	; (800575c <TIM_Base_SetConfig+0x11c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d01f      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a0:	d01b      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2e      	ldr	r2, [pc, #184]	; (8005760 <TIM_Base_SetConfig+0x120>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d017      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2d      	ldr	r2, [pc, #180]	; (8005764 <TIM_Base_SetConfig+0x124>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a2c      	ldr	r2, [pc, #176]	; (8005768 <TIM_Base_SetConfig+0x128>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d00f      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a2c      	ldr	r2, [pc, #176]	; (8005770 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d00b      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a2b      	ldr	r2, [pc, #172]	; (8005774 <TIM_Base_SetConfig+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d007      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2a      	ldr	r2, [pc, #168]	; (8005778 <TIM_Base_SetConfig+0x138>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d003      	beq.n	80056da <TIM_Base_SetConfig+0x9a>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0x12c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d108      	bne.n	80056ec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	68db      	ldr	r3, [r3, #12]
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	689a      	ldr	r2, [r3, #8]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <TIM_Base_SetConfig+0x11c>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d013      	beq.n	8005740 <TIM_Base_SetConfig+0x100>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a13      	ldr	r2, [pc, #76]	; (8005768 <TIM_Base_SetConfig+0x128>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d00f      	beq.n	8005740 <TIM_Base_SetConfig+0x100>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a13      	ldr	r2, [pc, #76]	; (8005770 <TIM_Base_SetConfig+0x130>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00b      	beq.n	8005740 <TIM_Base_SetConfig+0x100>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a12      	ldr	r2, [pc, #72]	; (8005774 <TIM_Base_SetConfig+0x134>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d007      	beq.n	8005740 <TIM_Base_SetConfig+0x100>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a11      	ldr	r2, [pc, #68]	; (8005778 <TIM_Base_SetConfig+0x138>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d003      	beq.n	8005740 <TIM_Base_SetConfig+0x100>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a0c      	ldr	r2, [pc, #48]	; (800576c <TIM_Base_SetConfig+0x12c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d103      	bne.n	8005748 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	691a      	ldr	r2, [r3, #16]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2201      	movs	r2, #1
 800574c:	615a      	str	r2, [r3, #20]
}
 800574e:	bf00      	nop
 8005750:	3714      	adds	r7, #20
 8005752:	46bd      	mov	sp, r7
 8005754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40000400 	.word	0x40000400
 8005764:	40000800 	.word	0x40000800
 8005768:	40013400 	.word	0x40013400
 800576c:	40015000 	.word	0x40015000
 8005770:	40014000 	.word	0x40014000
 8005774:	40014400 	.word	0x40014400
 8005778:	40014800 	.word	0x40014800

0800577c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800577c:	b480      	push	{r7}
 800577e:	b087      	sub	sp, #28
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6a1b      	ldr	r3, [r3, #32]
 800578c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	011b      	lsls	r3, r3, #4
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f023 030a 	bic.w	r3, r3, #10
 80057b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4313      	orrs	r3, r2
 80057c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	693a      	ldr	r2, [r7, #16]
 80057c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	697a      	ldr	r2, [r7, #20]
 80057cc:	621a      	str	r2, [r3, #32]
}
 80057ce:	bf00      	nop
 80057d0:	371c      	adds	r7, #28
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057da:	b480      	push	{r7}
 80057dc:	b087      	sub	sp, #28
 80057de:	af00      	add	r7, sp, #0
 80057e0:	60f8      	str	r0, [r7, #12]
 80057e2:	60b9      	str	r1, [r7, #8]
 80057e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6a1b      	ldr	r3, [r3, #32]
 80057ea:	f023 0210 	bic.w	r2, r3, #16
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	699b      	ldr	r3, [r3, #24]
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005804:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	031b      	lsls	r3, r3, #12
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	4313      	orrs	r3, r2
 800580e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005816:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	011b      	lsls	r3, r3, #4
 800581c:	693a      	ldr	r2, [r7, #16]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	693a      	ldr	r2, [r7, #16]
 800582c:	621a      	str	r2, [r3, #32]
}
 800582e:	bf00      	nop
 8005830:	371c      	adds	r7, #28
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800583a:	b480      	push	{r7}
 800583c:	b085      	sub	sp, #20
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
 8005842:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005850:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	4313      	orrs	r3, r2
 8005858:	f043 0307 	orr.w	r3, r3, #7
 800585c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	609a      	str	r2, [r3, #8]
}
 8005864:	bf00      	nop
 8005866:	3714      	adds	r7, #20
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	60f8      	str	r0, [r7, #12]
 8005878:	60b9      	str	r1, [r7, #8]
 800587a:	607a      	str	r2, [r7, #4]
 800587c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800588a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	021a      	lsls	r2, r3, #8
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	431a      	orrs	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4313      	orrs	r3, r2
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	4313      	orrs	r3, r2
 800589c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	609a      	str	r2, [r3, #8]
}
 80058a4:	bf00      	nop
 80058a6:	371c      	adds	r7, #28
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d101      	bne.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058c4:	2302      	movs	r3, #2
 80058c6:	e06d      	b.n	80059a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a30      	ldr	r2, [pc, #192]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d009      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	4a2f      	ldr	r2, [pc, #188]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d004      	beq.n	8005906 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800590c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800591e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	4313      	orrs	r3, r2
 8005928:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	4a1e      	ldr	r2, [pc, #120]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d01d      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005944:	d018      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	4a1c      	ldr	r2, [pc, #112]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d013      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	4a1a      	ldr	r2, [pc, #104]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d00e      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d009      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4a16      	ldr	r2, [pc, #88]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d004      	beq.n	8005978 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005974:	4293      	cmp	r3, r2
 8005976:	d10c      	bne.n	8005992 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	68ba      	ldr	r2, [r7, #8]
 8005986:	4313      	orrs	r3, r2
 8005988:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3714      	adds	r7, #20
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40015000 	.word	0x40015000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40014000 	.word	0x40014000

080059c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a12:	2301      	movs	r3, #1
 8005a14:	e040      	b.n	8005a98 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d106      	bne.n	8005a2c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb fc12 	bl	8001250 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2224      	movs	r2, #36	; 0x24
 8005a30:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f022 0201 	bic.w	r2, r2, #1
 8005a40:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 fc0e 	bl	8006264 <UART_SetConfig>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e022      	b.n	8005a98 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d002      	beq.n	8005a60 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fdd6 	bl	800660c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	685a      	ldr	r2, [r3, #4]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a6e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	689a      	ldr	r2, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a7e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f042 0201 	orr.w	r2, r2, #1
 8005a8e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 fe5d 	bl	8006750 <UART_CheckIdleState>
 8005a96:	4603      	mov	r3, r0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b08a      	sub	sp, #40	; 0x28
 8005aa4:	af02      	add	r7, sp, #8
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	603b      	str	r3, [r7, #0]
 8005aac:	4613      	mov	r3, r2
 8005aae:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ab4:	2b20      	cmp	r3, #32
 8005ab6:	f040 8082 	bne.w	8005bbe <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_Transmit+0x26>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e07a      	b.n	8005bc0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Transmit+0x38>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e073      	b.n	8005bc0 <HAL_UART_Transmit+0x120>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	2221      	movs	r2, #33	; 0x21
 8005aec:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005aee:	f7fc f81d 	bl	8001b2c <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	88fa      	ldrh	r2, [r7, #6]
 8005af8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	88fa      	ldrh	r2, [r7, #6]
 8005b00:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b0c:	d108      	bne.n	8005b20 <HAL_UART_Transmit+0x80>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d104      	bne.n	8005b20 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	61bb      	str	r3, [r7, #24]
 8005b1e:	e003      	b.n	8005b28 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8005b30:	e02d      	b.n	8005b8e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	9300      	str	r3, [sp, #0]
 8005b36:	697b      	ldr	r3, [r7, #20]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 fe50 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d001      	beq.n	8005b4c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	e039      	b.n	8005bc0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10b      	bne.n	8005b6a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b5e:	b292      	uxth	r2, r2
 8005b60:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	3302      	adds	r3, #2
 8005b66:	61bb      	str	r3, [r7, #24]
 8005b68:	e008      	b.n	8005b7c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	781a      	ldrb	r2, [r3, #0]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	b292      	uxth	r2, r2
 8005b74:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	3b01      	subs	r3, #1
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1cb      	bne.n	8005b32 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	9300      	str	r3, [sp, #0]
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	68f8      	ldr	r0, [r7, #12]
 8005ba6:	f000 fe1c 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 8005baa:	4603      	mov	r3, r0
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d001      	beq.n	8005bb4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8005bb0:	2303      	movs	r3, #3
 8005bb2:	e005      	b.n	8005bc0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2220      	movs	r2, #32
 8005bb8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	e000      	b.n	8005bc0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005bbe:	2302      	movs	r3, #2
  }
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	3720      	adds	r7, #32
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08a      	sub	sp, #40	; 0x28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bda:	2b20      	cmp	r3, #32
 8005bdc:	d13d      	bne.n	8005c5a <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <HAL_UART_Receive_IT+0x22>
 8005be4:	88fb      	ldrh	r3, [r7, #6]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d101      	bne.n	8005bee <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e036      	b.n	8005c5c <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d101      	bne.n	8005bfc <HAL_UART_Receive_IT+0x34>
 8005bf8:	2302      	movs	r3, #2
 8005bfa:	e02f      	b.n	8005c5c <HAL_UART_Receive_IT+0x94>
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d018      	beq.n	8005c4a <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	e853 3f00 	ldrex	r3, [r3]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	461a      	mov	r2, r3
 8005c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c36:	623b      	str	r3, [r7, #32]
 8005c38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	69f9      	ldr	r1, [r7, #28]
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e6      	bne.n	8005c18 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005c4a:	88fb      	ldrh	r3, [r7, #6]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 fe8b 	bl	800696c <UART_Start_Receive_IT>
 8005c56:	4603      	mov	r3, r0
 8005c58:	e000      	b.n	8005c5c <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c5a:	2302      	movs	r3, #2
  }
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3728      	adds	r7, #40	; 0x28
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0ba      	sub	sp, #232	; 0xe8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69db      	ldr	r3, [r3, #28]
 8005c72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005c8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005c8e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005c92:	4013      	ands	r3, r2
 8005c94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005c98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d115      	bne.n	8005ccc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00f      	beq.n	8005ccc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb0:	f003 0320 	and.w	r3, r3, #32
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d009      	beq.n	8005ccc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 82a4 	beq.w	800620a <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	4798      	blx	r3
      }
      return;
 8005cca:	e29e      	b.n	800620a <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	f000 8117 	beq.w	8005f04 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005cd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d106      	bne.n	8005cf0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ce2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ce6:	4b85      	ldr	r3, [pc, #532]	; (8005efc <HAL_UART_IRQHandler+0x298>)
 8005ce8:	4013      	ands	r3, r2
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	f000 810a 	beq.w	8005f04 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d011      	beq.n	8005d20 <HAL_UART_IRQHandler+0xbc>
 8005cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d00b      	beq.n	8005d20 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d16:	f043 0201 	orr.w	r2, r3, #1
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d011      	beq.n	8005d50 <HAL_UART_IRQHandler+0xec>
 8005d2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d00b      	beq.n	8005d50 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2202      	movs	r2, #2
 8005d3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d46:	f043 0204 	orr.w	r2, r3, #4
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005d50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d011      	beq.n	8005d80 <HAL_UART_IRQHandler+0x11c>
 8005d5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d60:	f003 0301 	and.w	r3, r3, #1
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00b      	beq.n	8005d80 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2204      	movs	r2, #4
 8005d6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d76:	f043 0202 	orr.w	r2, r3, #2
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d017      	beq.n	8005dbc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d105      	bne.n	8005da4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d9c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d00b      	beq.n	8005dbc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	2208      	movs	r2, #8
 8005daa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005db2:	f043 0208 	orr.w	r2, r3, #8
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d012      	beq.n	8005dee <HAL_UART_IRQHandler+0x18a>
 8005dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dcc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ddc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005de4:	f043 0220 	orr.w	r2, r3, #32
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	f000 820a 	beq.w	800620e <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e0a:	f003 0320 	and.w	r3, r3, #32
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d007      	beq.n	8005e22 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d003      	beq.n	8005e22 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005e28:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e36:	2b40      	cmp	r3, #64	; 0x40
 8005e38:	d005      	beq.n	8005e46 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005e3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e3e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d04f      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f000 fe3c 	bl	8006ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	689b      	ldr	r3, [r3, #8]
 8005e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e56:	2b40      	cmp	r3, #64	; 0x40
 8005e58:	d141      	bne.n	8005ede <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3308      	adds	r3, #8
 8005e60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e68:	e853 3f00 	ldrex	r3, [r3]
 8005e6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005e70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005e74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	3308      	adds	r3, #8
 8005e82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005e86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005e8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005e92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005e9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d1d9      	bne.n	8005e5a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d013      	beq.n	8005ed6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eb2:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <HAL_UART_IRQHandler+0x29c>)
 8005eb4:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f7fd fa16 	bl	80032ec <HAL_DMA_Abort_IT>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d017      	beq.n	8005ef6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ed4:	e00f      	b.n	8005ef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 f9ae 	bl	8006238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	e00b      	b.n	8005ef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f9aa 	bl	8006238 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	e007      	b.n	8005ef6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 f9a6 	bl	8006238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005ef4:	e18b      	b.n	800620e <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ef6:	bf00      	nop
    return;
 8005ef8:	e189      	b.n	800620e <HAL_UART_IRQHandler+0x5aa>
 8005efa:	bf00      	nop
 8005efc:	04000120 	.word	0x04000120
 8005f00:	08006b8b 	.word	0x08006b8b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	f040 8143 	bne.w	8006194 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005f0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f12:	f003 0310 	and.w	r3, r3, #16
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 813c 	beq.w	8006194 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f20:	f003 0310 	and.w	r3, r3, #16
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8135 	beq.w	8006194 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	689b      	ldr	r3, [r3, #8]
 8005f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3c:	2b40      	cmp	r3, #64	; 0x40
 8005f3e:	f040 80b1 	bne.w	80060a4 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 815d 	beq.w	8006212 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f62:	429a      	cmp	r2, r3
 8005f64:	f080 8155 	bcs.w	8006212 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005f6e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f76:	699b      	ldr	r3, [r3, #24]
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	f000 8085 	beq.w	8006088 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f8a:	e853 3f00 	ldrex	r3, [r3]
 8005f8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005f92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fa8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005fac:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005fb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005fc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1da      	bne.n	8005f7e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd2:	e853 3f00 	ldrex	r3, [r3]
 8005fd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fda:	f023 0301 	bic.w	r3, r3, #1
 8005fde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	3308      	adds	r3, #8
 8005fe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005fec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ff0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ff2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ff8:	e841 2300 	strex	r3, r2, [r1]
 8005ffc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006000:	2b00      	cmp	r3, #0
 8006002:	d1e1      	bne.n	8005fc8 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	3308      	adds	r3, #8
 800600a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800600c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800600e:	e853 3f00 	ldrex	r3, [r3]
 8006012:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800601a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3308      	adds	r3, #8
 8006024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006028:	66fa      	str	r2, [r7, #108]	; 0x6c
 800602a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800602c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800602e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006030:	e841 2300 	strex	r3, r2, [r1]
 8006034:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1e3      	bne.n	8006004 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800604e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006050:	e853 3f00 	ldrex	r3, [r3]
 8006054:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006058:	f023 0310 	bic.w	r3, r3, #16
 800605c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	461a      	mov	r2, r3
 8006066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606a:	65bb      	str	r3, [r7, #88]	; 0x58
 800606c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800606e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006070:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006072:	e841 2300 	strex	r3, r2, [r1]
 8006076:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1e4      	bne.n	8006048 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006082:	4618      	mov	r0, r3
 8006084:	f7fd f8f9 	bl	800327a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006094:	b29b      	uxth	r3, r3
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	b29b      	uxth	r3, r3
 800609a:	4619      	mov	r1, r3
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 f8d5 	bl	800624c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060a2:	e0b6      	b.n	8006212 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80060be:	b29b      	uxth	r3, r3
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	f000 80a8 	beq.w	8006216 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 80060c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f000 80a3 	beq.w	8006216 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060d8:	e853 3f00 	ldrex	r3, [r3]
 80060dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80060de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80060e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060f2:	647b      	str	r3, [r7, #68]	; 0x44
 80060f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060fa:	e841 2300 	strex	r3, r2, [r1]
 80060fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1e4      	bne.n	80060d0 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	3308      	adds	r3, #8
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	623b      	str	r3, [r7, #32]
   return(result);
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	f023 0301 	bic.w	r3, r3, #1
 800611c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	3308      	adds	r3, #8
 8006126:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800612a:	633a      	str	r2, [r7, #48]	; 0x30
 800612c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006132:	e841 2300 	strex	r3, r2, [r1]
 8006136:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	2b00      	cmp	r3, #0
 800613c:	d1e3      	bne.n	8006106 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	2200      	movs	r2, #0
 800614e:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	e853 3f00 	ldrex	r3, [r3]
 800615c:	60fb      	str	r3, [r7, #12]
   return(result);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f023 0310 	bic.w	r3, r3, #16
 8006164:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	461a      	mov	r2, r3
 800616e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006172:	61fb      	str	r3, [r7, #28]
 8006174:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006176:	69b9      	ldr	r1, [r7, #24]
 8006178:	69fa      	ldr	r2, [r7, #28]
 800617a:	e841 2300 	strex	r3, r2, [r1]
 800617e:	617b      	str	r3, [r7, #20]
   return(result);
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1e4      	bne.n	8006150 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006186:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800618a:	4619      	mov	r1, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f000 f85d 	bl	800624c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006192:	e040      	b.n	8006216 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006194:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006198:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00e      	beq.n	80061be <HAL_UART_IRQHandler+0x55a>
 80061a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d008      	beq.n	80061be <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80061b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f000 fe83 	bl	8006ec2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80061bc:	e02e      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80061be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00e      	beq.n	80061e8 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80061ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d01d      	beq.n	800621a <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	4798      	blx	r3
    }
    return;
 80061e6:	e018      	b.n	800621a <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80061e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d013      	beq.n	800621c <HAL_UART_IRQHandler+0x5b8>
 80061f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00d      	beq.n	800621c <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fcd8 	bl	8006bb6 <UART_EndTransmit_IT>
    return;
 8006206:	bf00      	nop
 8006208:	e008      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
      return;
 800620a:	bf00      	nop
 800620c:	e006      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
    return;
 800620e:	bf00      	nop
 8006210:	e004      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006212:	bf00      	nop
 8006214:	e002      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
      return;
 8006216:	bf00      	nop
 8006218:	e000      	b.n	800621c <HAL_UART_IRQHandler+0x5b8>
    return;
 800621a:	bf00      	nop
  }

}
 800621c:	37e8      	adds	r7, #232	; 0xe8
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop

08006224 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b088      	sub	sp, #32
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800626c:	2300      	movs	r3, #0
 800626e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	689a      	ldr	r2, [r3, #8]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	431a      	orrs	r2, r3
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	695b      	ldr	r3, [r3, #20]
 800627e:	431a      	orrs	r2, r3
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	69db      	ldr	r3, [r3, #28]
 8006284:	4313      	orrs	r3, r2
 8006286:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4baa      	ldr	r3, [pc, #680]	; (8006538 <UART_SetConfig+0x2d4>)
 8006290:	4013      	ands	r3, r2
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	6812      	ldr	r2, [r2, #0]
 8006296:	6979      	ldr	r1, [r7, #20]
 8006298:	430b      	orrs	r3, r1
 800629a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	68da      	ldr	r2, [r3, #12]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	4313      	orrs	r3, r2
 80062c0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	4a98      	ldr	r2, [pc, #608]	; (800653c <UART_SetConfig+0x2d8>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d121      	bne.n	8006324 <UART_SetConfig+0xc0>
 80062e0:	4b97      	ldr	r3, [pc, #604]	; (8006540 <UART_SetConfig+0x2dc>)
 80062e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062e4:	f003 0303 	and.w	r3, r3, #3
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d817      	bhi.n	800631c <UART_SetConfig+0xb8>
 80062ec:	a201      	add	r2, pc, #4	; (adr r2, 80062f4 <UART_SetConfig+0x90>)
 80062ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f2:	bf00      	nop
 80062f4:	08006305 	.word	0x08006305
 80062f8:	08006311 	.word	0x08006311
 80062fc:	08006317 	.word	0x08006317
 8006300:	0800630b 	.word	0x0800630b
 8006304:	2301      	movs	r3, #1
 8006306:	77fb      	strb	r3, [r7, #31]
 8006308:	e0b2      	b.n	8006470 <UART_SetConfig+0x20c>
 800630a:	2302      	movs	r3, #2
 800630c:	77fb      	strb	r3, [r7, #31]
 800630e:	e0af      	b.n	8006470 <UART_SetConfig+0x20c>
 8006310:	2304      	movs	r3, #4
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e0ac      	b.n	8006470 <UART_SetConfig+0x20c>
 8006316:	2308      	movs	r3, #8
 8006318:	77fb      	strb	r3, [r7, #31]
 800631a:	e0a9      	b.n	8006470 <UART_SetConfig+0x20c>
 800631c:	2310      	movs	r3, #16
 800631e:	77fb      	strb	r3, [r7, #31]
 8006320:	bf00      	nop
 8006322:	e0a5      	b.n	8006470 <UART_SetConfig+0x20c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	4a86      	ldr	r2, [pc, #536]	; (8006544 <UART_SetConfig+0x2e0>)
 800632a:	4293      	cmp	r3, r2
 800632c:	d123      	bne.n	8006376 <UART_SetConfig+0x112>
 800632e:	4b84      	ldr	r3, [pc, #528]	; (8006540 <UART_SetConfig+0x2dc>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006332:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d012      	beq.n	8006362 <UART_SetConfig+0xfe>
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d802      	bhi.n	8006348 <UART_SetConfig+0xe4>
 8006342:	2b00      	cmp	r3, #0
 8006344:	d007      	beq.n	8006356 <UART_SetConfig+0xf2>
 8006346:	e012      	b.n	800636e <UART_SetConfig+0x10a>
 8006348:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800634c:	d00c      	beq.n	8006368 <UART_SetConfig+0x104>
 800634e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006352:	d003      	beq.n	800635c <UART_SetConfig+0xf8>
 8006354:	e00b      	b.n	800636e <UART_SetConfig+0x10a>
 8006356:	2300      	movs	r3, #0
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e089      	b.n	8006470 <UART_SetConfig+0x20c>
 800635c:	2302      	movs	r3, #2
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e086      	b.n	8006470 <UART_SetConfig+0x20c>
 8006362:	2304      	movs	r3, #4
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e083      	b.n	8006470 <UART_SetConfig+0x20c>
 8006368:	2308      	movs	r3, #8
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e080      	b.n	8006470 <UART_SetConfig+0x20c>
 800636e:	2310      	movs	r3, #16
 8006370:	77fb      	strb	r3, [r7, #31]
 8006372:	bf00      	nop
 8006374:	e07c      	b.n	8006470 <UART_SetConfig+0x20c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a73      	ldr	r2, [pc, #460]	; (8006548 <UART_SetConfig+0x2e4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d123      	bne.n	80063c8 <UART_SetConfig+0x164>
 8006380:	4b6f      	ldr	r3, [pc, #444]	; (8006540 <UART_SetConfig+0x2dc>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8006388:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800638c:	d012      	beq.n	80063b4 <UART_SetConfig+0x150>
 800638e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006392:	d802      	bhi.n	800639a <UART_SetConfig+0x136>
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <UART_SetConfig+0x144>
 8006398:	e012      	b.n	80063c0 <UART_SetConfig+0x15c>
 800639a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800639e:	d00c      	beq.n	80063ba <UART_SetConfig+0x156>
 80063a0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80063a4:	d003      	beq.n	80063ae <UART_SetConfig+0x14a>
 80063a6:	e00b      	b.n	80063c0 <UART_SetConfig+0x15c>
 80063a8:	2300      	movs	r3, #0
 80063aa:	77fb      	strb	r3, [r7, #31]
 80063ac:	e060      	b.n	8006470 <UART_SetConfig+0x20c>
 80063ae:	2302      	movs	r3, #2
 80063b0:	77fb      	strb	r3, [r7, #31]
 80063b2:	e05d      	b.n	8006470 <UART_SetConfig+0x20c>
 80063b4:	2304      	movs	r3, #4
 80063b6:	77fb      	strb	r3, [r7, #31]
 80063b8:	e05a      	b.n	8006470 <UART_SetConfig+0x20c>
 80063ba:	2308      	movs	r3, #8
 80063bc:	77fb      	strb	r3, [r7, #31]
 80063be:	e057      	b.n	8006470 <UART_SetConfig+0x20c>
 80063c0:	2310      	movs	r3, #16
 80063c2:	77fb      	strb	r3, [r7, #31]
 80063c4:	bf00      	nop
 80063c6:	e053      	b.n	8006470 <UART_SetConfig+0x20c>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5f      	ldr	r2, [pc, #380]	; (800654c <UART_SetConfig+0x2e8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d123      	bne.n	800641a <UART_SetConfig+0x1b6>
 80063d2:	4b5b      	ldr	r3, [pc, #364]	; (8006540 <UART_SetConfig+0x2dc>)
 80063d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80063da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063de:	d012      	beq.n	8006406 <UART_SetConfig+0x1a2>
 80063e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e4:	d802      	bhi.n	80063ec <UART_SetConfig+0x188>
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d007      	beq.n	80063fa <UART_SetConfig+0x196>
 80063ea:	e012      	b.n	8006412 <UART_SetConfig+0x1ae>
 80063ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80063f0:	d00c      	beq.n	800640c <UART_SetConfig+0x1a8>
 80063f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80063f6:	d003      	beq.n	8006400 <UART_SetConfig+0x19c>
 80063f8:	e00b      	b.n	8006412 <UART_SetConfig+0x1ae>
 80063fa:	2300      	movs	r3, #0
 80063fc:	77fb      	strb	r3, [r7, #31]
 80063fe:	e037      	b.n	8006470 <UART_SetConfig+0x20c>
 8006400:	2302      	movs	r3, #2
 8006402:	77fb      	strb	r3, [r7, #31]
 8006404:	e034      	b.n	8006470 <UART_SetConfig+0x20c>
 8006406:	2304      	movs	r3, #4
 8006408:	77fb      	strb	r3, [r7, #31]
 800640a:	e031      	b.n	8006470 <UART_SetConfig+0x20c>
 800640c:	2308      	movs	r3, #8
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e02e      	b.n	8006470 <UART_SetConfig+0x20c>
 8006412:	2310      	movs	r3, #16
 8006414:	77fb      	strb	r3, [r7, #31]
 8006416:	bf00      	nop
 8006418:	e02a      	b.n	8006470 <UART_SetConfig+0x20c>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a4c      	ldr	r2, [pc, #304]	; (8006550 <UART_SetConfig+0x2ec>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d123      	bne.n	800646c <UART_SetConfig+0x208>
 8006424:	4b46      	ldr	r3, [pc, #280]	; (8006540 <UART_SetConfig+0x2dc>)
 8006426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006428:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 800642c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006430:	d012      	beq.n	8006458 <UART_SetConfig+0x1f4>
 8006432:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006436:	d802      	bhi.n	800643e <UART_SetConfig+0x1da>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d007      	beq.n	800644c <UART_SetConfig+0x1e8>
 800643c:	e012      	b.n	8006464 <UART_SetConfig+0x200>
 800643e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006442:	d00c      	beq.n	800645e <UART_SetConfig+0x1fa>
 8006444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006448:	d003      	beq.n	8006452 <UART_SetConfig+0x1ee>
 800644a:	e00b      	b.n	8006464 <UART_SetConfig+0x200>
 800644c:	2300      	movs	r3, #0
 800644e:	77fb      	strb	r3, [r7, #31]
 8006450:	e00e      	b.n	8006470 <UART_SetConfig+0x20c>
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
 8006456:	e00b      	b.n	8006470 <UART_SetConfig+0x20c>
 8006458:	2304      	movs	r3, #4
 800645a:	77fb      	strb	r3, [r7, #31]
 800645c:	e008      	b.n	8006470 <UART_SetConfig+0x20c>
 800645e:	2308      	movs	r3, #8
 8006460:	77fb      	strb	r3, [r7, #31]
 8006462:	e005      	b.n	8006470 <UART_SetConfig+0x20c>
 8006464:	2310      	movs	r3, #16
 8006466:	77fb      	strb	r3, [r7, #31]
 8006468:	bf00      	nop
 800646a:	e001      	b.n	8006470 <UART_SetConfig+0x20c>
 800646c:	2310      	movs	r3, #16
 800646e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	69db      	ldr	r3, [r3, #28]
 8006474:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006478:	d16e      	bne.n	8006558 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800647a:	7ffb      	ldrb	r3, [r7, #31]
 800647c:	2b08      	cmp	r3, #8
 800647e:	d828      	bhi.n	80064d2 <UART_SetConfig+0x26e>
 8006480:	a201      	add	r2, pc, #4	; (adr r2, 8006488 <UART_SetConfig+0x224>)
 8006482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006486:	bf00      	nop
 8006488:	080064ad 	.word	0x080064ad
 800648c:	080064b5 	.word	0x080064b5
 8006490:	080064bd 	.word	0x080064bd
 8006494:	080064d3 	.word	0x080064d3
 8006498:	080064c3 	.word	0x080064c3
 800649c:	080064d3 	.word	0x080064d3
 80064a0:	080064d3 	.word	0x080064d3
 80064a4:	080064d3 	.word	0x080064d3
 80064a8:	080064cb 	.word	0x080064cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064ac:	f7fe fb30 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 80064b0:	61b8      	str	r0, [r7, #24]
        break;
 80064b2:	e013      	b.n	80064dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b4:	f7fe fb4e 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 80064b8:	61b8      	str	r0, [r7, #24]
        break;
 80064ba:	e00f      	b.n	80064dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064bc:	4b25      	ldr	r3, [pc, #148]	; (8006554 <UART_SetConfig+0x2f0>)
 80064be:	61bb      	str	r3, [r7, #24]
        break;
 80064c0:	e00c      	b.n	80064dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064c2:	f7fe faaf 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80064c6:	61b8      	str	r0, [r7, #24]
        break;
 80064c8:	e008      	b.n	80064dc <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ce:	61bb      	str	r3, [r7, #24]
        break;
 80064d0:	e004      	b.n	80064dc <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	77bb      	strb	r3, [r7, #30]
        break;
 80064da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064dc:	69bb      	ldr	r3, [r7, #24]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 8086 	beq.w	80065f0 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064e4:	69bb      	ldr	r3, [r7, #24]
 80064e6:	005a      	lsls	r2, r3, #1
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	685b      	ldr	r3, [r3, #4]
 80064ec:	085b      	lsrs	r3, r3, #1
 80064ee:	441a      	add	r2, r3
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	2b0f      	cmp	r3, #15
 8006500:	d916      	bls.n	8006530 <UART_SetConfig+0x2cc>
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006508:	d212      	bcs.n	8006530 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	b29b      	uxth	r3, r3
 800650e:	f023 030f 	bic.w	r3, r3, #15
 8006512:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	085b      	lsrs	r3, r3, #1
 8006518:	b29b      	uxth	r3, r3
 800651a:	f003 0307 	and.w	r3, r3, #7
 800651e:	b29a      	uxth	r2, r3
 8006520:	89fb      	ldrh	r3, [r7, #14]
 8006522:	4313      	orrs	r3, r2
 8006524:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	89fa      	ldrh	r2, [r7, #14]
 800652c:	60da      	str	r2, [r3, #12]
 800652e:	e05f      	b.n	80065f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	77bb      	strb	r3, [r7, #30]
 8006534:	e05c      	b.n	80065f0 <UART_SetConfig+0x38c>
 8006536:	bf00      	nop
 8006538:	efff69f3 	.word	0xefff69f3
 800653c:	40013800 	.word	0x40013800
 8006540:	40021000 	.word	0x40021000
 8006544:	40004400 	.word	0x40004400
 8006548:	40004800 	.word	0x40004800
 800654c:	40004c00 	.word	0x40004c00
 8006550:	40005000 	.word	0x40005000
 8006554:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8006558:	7ffb      	ldrb	r3, [r7, #31]
 800655a:	2b08      	cmp	r3, #8
 800655c:	d827      	bhi.n	80065ae <UART_SetConfig+0x34a>
 800655e:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <UART_SetConfig+0x300>)
 8006560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006564:	08006589 	.word	0x08006589
 8006568:	08006591 	.word	0x08006591
 800656c:	08006599 	.word	0x08006599
 8006570:	080065af 	.word	0x080065af
 8006574:	0800659f 	.word	0x0800659f
 8006578:	080065af 	.word	0x080065af
 800657c:	080065af 	.word	0x080065af
 8006580:	080065af 	.word	0x080065af
 8006584:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006588:	f7fe fac2 	bl	8004b10 <HAL_RCC_GetPCLK1Freq>
 800658c:	61b8      	str	r0, [r7, #24]
        break;
 800658e:	e013      	b.n	80065b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7fe fae0 	bl	8004b54 <HAL_RCC_GetPCLK2Freq>
 8006594:	61b8      	str	r0, [r7, #24]
        break;
 8006596:	e00f      	b.n	80065b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b1b      	ldr	r3, [pc, #108]	; (8006608 <UART_SetConfig+0x3a4>)
 800659a:	61bb      	str	r3, [r7, #24]
        break;
 800659c:	e00c      	b.n	80065b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe fa41 	bl	8004a24 <HAL_RCC_GetSysClockFreq>
 80065a2:	61b8      	str	r0, [r7, #24]
        break;
 80065a4:	e008      	b.n	80065b8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61bb      	str	r3, [r7, #24]
        break;
 80065ac:	e004      	b.n	80065b8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77bb      	strb	r3, [r7, #30]
        break;
 80065b6:	bf00      	nop
    }

    if (pclk != 0U)
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d018      	beq.n	80065f0 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	085a      	lsrs	r2, r3, #1
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	441a      	add	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	2b0f      	cmp	r3, #15
 80065d8:	d908      	bls.n	80065ec <UART_SetConfig+0x388>
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065e0:	d204      	bcs.n	80065ec <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	693a      	ldr	r2, [r7, #16]
 80065e8:	60da      	str	r2, [r3, #12]
 80065ea:	e001      	b.n	80065f0 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2200      	movs	r2, #0
 80065f4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80065fc:	7fbb      	ldrb	r3, [r7, #30]
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3720      	adds	r7, #32
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	007a1200 	.word	0x007a1200

0800660c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	f003 0304 	and.w	r3, r3, #4
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	f003 0308 	and.w	r3, r3, #8
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01a      	beq.n	8006722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800670a:	d10a      	bne.n	8006722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006760:	f7fb f9e4 	bl	8001b2c <HAL_GetTick>
 8006764:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d10e      	bne.n	8006792 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f82d 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d001      	beq.n	8006792 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e023      	b.n	80067da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b04      	cmp	r3, #4
 800679e:	d10e      	bne.n	80067be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067a4:	9300      	str	r3, [sp, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f000 f817 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067ba:	2303      	movs	r3, #3
 80067bc:	e00d      	b.n	80067da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2220      	movs	r2, #32
 80067c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2220      	movs	r2, #32
 80067c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b09c      	sub	sp, #112	; 0x70
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f2:	e0a5      	b.n	8006940 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067fa:	f000 80a1 	beq.w	8006940 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067fe:	f7fb f995 	bl	8001b2c <HAL_GetTick>
 8006802:	4602      	mov	r2, r0
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800680a:	429a      	cmp	r2, r3
 800680c:	d302      	bcc.n	8006814 <UART_WaitOnFlagUntilTimeout+0x32>
 800680e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006810:	2b00      	cmp	r3, #0
 8006812:	d13e      	bne.n	8006892 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006828:	667b      	str	r3, [r7, #100]	; 0x64
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	461a      	mov	r2, r3
 8006830:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006832:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006834:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006840:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e6      	bne.n	8006814 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	663b      	str	r3, [r7, #96]	; 0x60
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006866:	64ba      	str	r2, [r7, #72]	; 0x48
 8006868:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800686c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006874:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2220      	movs	r2, #32
 8006884:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e067      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0304 	and.w	r3, r3, #4
 800689c:	2b00      	cmp	r3, #0
 800689e:	d04f      	beq.n	8006940 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69db      	ldr	r3, [r3, #28]
 80068a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ae:	d147      	bne.n	8006940 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c2:	e853 3f00 	ldrex	r3, [r3]
 80068c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	461a      	mov	r2, r3
 80068d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d8:	637b      	str	r3, [r7, #52]	; 0x34
 80068da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80068de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80068e0:	e841 2300 	strex	r3, r2, [r1]
 80068e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d1e6      	bne.n	80068ba <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	3308      	adds	r3, #8
 80068f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	613b      	str	r3, [r7, #16]
   return(result);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f023 0301 	bic.w	r3, r3, #1
 8006902:	66bb      	str	r3, [r7, #104]	; 0x68
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3308      	adds	r3, #8
 800690a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800690c:	623a      	str	r2, [r7, #32]
 800690e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	69f9      	ldr	r1, [r7, #28]
 8006912:	6a3a      	ldr	r2, [r7, #32]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	61bb      	str	r3, [r7, #24]
   return(result);
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e5      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2220      	movs	r2, #32
 8006924:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2220      	movs	r2, #32
 800692a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2220      	movs	r2, #32
 8006930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2200      	movs	r2, #0
 8006938:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800693c:	2303      	movs	r3, #3
 800693e:	e010      	b.n	8006962 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	4013      	ands	r3, r2
 800694a:	68ba      	ldr	r2, [r7, #8]
 800694c:	429a      	cmp	r2, r3
 800694e:	bf0c      	ite	eq
 8006950:	2301      	moveq	r3, #1
 8006952:	2300      	movne	r3, #0
 8006954:	b2db      	uxtb	r3, r3
 8006956:	461a      	mov	r2, r3
 8006958:	79fb      	ldrb	r3, [r7, #7]
 800695a:	429a      	cmp	r2, r3
 800695c:	f43f af4a 	beq.w	80067f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3770      	adds	r7, #112	; 0x70
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
	...

0800696c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800696c:	b480      	push	{r7}
 800696e:	b091      	sub	sp, #68	; 0x44
 8006970:	af00      	add	r7, sp, #0
 8006972:	60f8      	str	r0, [r7, #12]
 8006974:	60b9      	str	r1, [r7, #8]
 8006976:	4613      	mov	r3, r2
 8006978:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	68ba      	ldr	r2, [r7, #8]
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	88fa      	ldrh	r2, [r7, #6]
 8006984:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	88fa      	ldrh	r2, [r7, #6]
 800698c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2200      	movs	r2, #0
 8006994:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699e:	d10e      	bne.n	80069be <UART_Start_Receive_IT+0x52>
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d105      	bne.n	80069b4 <UART_Start_Receive_IT+0x48>
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069b2:	e02d      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	22ff      	movs	r2, #255	; 0xff
 80069b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069bc:	e028      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d10d      	bne.n	80069e2 <UART_Start_Receive_IT+0x76>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d104      	bne.n	80069d8 <UART_Start_Receive_IT+0x6c>
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	22ff      	movs	r2, #255	; 0xff
 80069d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069d6:	e01b      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	227f      	movs	r2, #127	; 0x7f
 80069dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069e0:	e016      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80069ea:	d10d      	bne.n	8006a08 <UART_Start_Receive_IT+0x9c>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d104      	bne.n	80069fe <UART_Start_Receive_IT+0x92>
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	227f      	movs	r2, #127	; 0x7f
 80069f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80069fc:	e008      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	223f      	movs	r2, #63	; 0x3f
 8006a02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8006a06:	e003      	b.n	8006a10 <UART_Start_Receive_IT+0xa4>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2222      	movs	r2, #34	; 0x22
 8006a1c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3308      	adds	r3, #8
 8006a24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	f043 0301 	orr.w	r3, r3, #1
 8006a34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	3308      	adds	r3, #8
 8006a3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006a3e:	637a      	str	r2, [r7, #52]	; 0x34
 8006a40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e5      	bne.n	8006a1e <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a5a:	d107      	bne.n	8006a6c <UART_Start_Receive_IT+0x100>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	691b      	ldr	r3, [r3, #16]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d103      	bne.n	8006a6c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	4a15      	ldr	r2, [pc, #84]	; (8006abc <UART_Start_Receive_IT+0x150>)
 8006a68:	665a      	str	r2, [r3, #100]	; 0x64
 8006a6a:	e002      	b.n	8006a72 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4a14      	ldr	r2, [pc, #80]	; (8006ac0 <UART_Start_Receive_IT+0x154>)
 8006a70:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	e853 3f00 	ldrex	r3, [r3]
 8006a86:	613b      	str	r3, [r7, #16]
   return(result);
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006a8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	461a      	mov	r2, r3
 8006a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a98:	623b      	str	r3, [r7, #32]
 8006a9a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a9c:	69f9      	ldr	r1, [r7, #28]
 8006a9e:	6a3a      	ldr	r2, [r7, #32]
 8006aa0:	e841 2300 	strex	r3, r2, [r1]
 8006aa4:	61bb      	str	r3, [r7, #24]
   return(result);
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1e6      	bne.n	8006a7a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3744      	adds	r7, #68	; 0x44
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	08006d67 	.word	0x08006d67
 8006ac0:	08006c0b 	.word	0x08006c0b

08006ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b095      	sub	sp, #84	; 0x54
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ad4:	e853 3f00 	ldrex	r3, [r3]
 8006ad8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aea:	643b      	str	r3, [r7, #64]	; 0x40
 8006aec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006af0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006af2:	e841 2300 	strex	r3, r2, [r1]
 8006af6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d1e6      	bne.n	8006acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	3308      	adds	r3, #8
 8006b04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	e853 3f00 	ldrex	r3, [r3]
 8006b0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	f023 0301 	bic.w	r3, r3, #1
 8006b14:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	3308      	adds	r3, #8
 8006b1c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b22:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b26:	e841 2300 	strex	r3, r2, [r1]
 8006b2a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1e5      	bne.n	8006afe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b36:	2b01      	cmp	r3, #1
 8006b38:	d118      	bne.n	8006b6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	e853 3f00 	ldrex	r3, [r3]
 8006b46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	f023 0310 	bic.w	r3, r3, #16
 8006b4e:	647b      	str	r3, [r7, #68]	; 0x44
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	461a      	mov	r2, r3
 8006b56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b58:	61bb      	str	r3, [r7, #24]
 8006b5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b5c:	6979      	ldr	r1, [r7, #20]
 8006b5e:	69ba      	ldr	r2, [r7, #24]
 8006b60:	e841 2300 	strex	r3, r2, [r1]
 8006b64:	613b      	str	r3, [r7, #16]
   return(result);
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d1e6      	bne.n	8006b3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2220      	movs	r2, #32
 8006b70:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006b7e:	bf00      	nop
 8006b80:	3754      	adds	r7, #84	; 0x54
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr

08006b8a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	b084      	sub	sp, #16
 8006b8e:	af00      	add	r7, sp, #0
 8006b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	f7ff fb45 	bl	8006238 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b088      	sub	sp, #32
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	e853 3f00 	ldrex	r3, [r3]
 8006bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd2:	61fb      	str	r3, [r7, #28]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	461a      	mov	r2, r3
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	61bb      	str	r3, [r7, #24]
 8006bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be0:	6979      	ldr	r1, [r7, #20]
 8006be2:	69ba      	ldr	r2, [r7, #24]
 8006be4:	e841 2300 	strex	r3, r2, [r1]
 8006be8:	613b      	str	r3, [r7, #16]
   return(result);
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d1e6      	bne.n	8006bbe <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7ff fb11 	bl	8006224 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3720      	adds	r7, #32
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b096      	sub	sp, #88	; 0x58
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c18:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c20:	2b22      	cmp	r3, #34	; 0x22
 8006c22:	f040 8094 	bne.w	8006d4e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006c2c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006c30:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8006c34:	b2d9      	uxtb	r1, r3
 8006c36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c40:	400a      	ands	r2, r1
 8006c42:	b2d2      	uxtb	r2, r2
 8006c44:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	1c5a      	adds	r2, r3, #1
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29a      	uxth	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d177      	bne.n	8006d5e <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	e853 3f00 	ldrex	r3, [r3]
 8006c7a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c82:	653b      	str	r3, [r7, #80]	; 0x50
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	461a      	mov	r2, r3
 8006c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e6      	bne.n	8006c6e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	3308      	adds	r3, #8
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	623b      	str	r3, [r7, #32]
   return(result);
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	f023 0301 	bic.w	r3, r3, #1
 8006cb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006cc0:	633a      	str	r2, [r7, #48]	; 0x30
 8006cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e5      	bne.n	8006ca0 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	2220      	movs	r2, #32
 8006cd8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d12e      	bne.n	8006d46 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2200      	movs	r2, #0
 8006cec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	e853 3f00 	ldrex	r3, [r3]
 8006cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f023 0310 	bic.w	r3, r3, #16
 8006d02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	461a      	mov	r2, r3
 8006d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d0c:	61fb      	str	r3, [r7, #28]
 8006d0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d10:	69b9      	ldr	r1, [r7, #24]
 8006d12:	69fa      	ldr	r2, [r7, #28]
 8006d14:	e841 2300 	strex	r3, r2, [r1]
 8006d18:	617b      	str	r3, [r7, #20]
   return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d1e6      	bne.n	8006cee <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	69db      	ldr	r3, [r3, #28]
 8006d26:	f003 0310 	and.w	r3, r3, #16
 8006d2a:	2b10      	cmp	r3, #16
 8006d2c:	d103      	bne.n	8006d36 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	2210      	movs	r2, #16
 8006d34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d3c:	4619      	mov	r1, r3
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f7ff fa84 	bl	800624c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d44:	e00b      	b.n	8006d5e <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f7f9 fd36 	bl	80007b8 <HAL_UART_RxCpltCallback>
}
 8006d4c:	e007      	b.n	8006d5e <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	699a      	ldr	r2, [r3, #24]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f042 0208 	orr.w	r2, r2, #8
 8006d5c:	619a      	str	r2, [r3, #24]
}
 8006d5e:	bf00      	nop
 8006d60:	3758      	adds	r7, #88	; 0x58
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b096      	sub	sp, #88	; 0x58
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d74:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006d7c:	2b22      	cmp	r3, #34	; 0x22
 8006d7e:	f040 8094 	bne.w	8006eaa <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006d88:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d90:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006d92:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006d96:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006d9a:	4013      	ands	r3, r2
 8006d9c:	b29a      	uxth	r2, r3
 8006d9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006da0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006da6:	1c9a      	adds	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d177      	bne.n	8006eba <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dd2:	e853 3f00 	ldrex	r3, [r3]
 8006dd6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dde:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	461a      	mov	r2, r3
 8006de6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de8:	643b      	str	r3, [r7, #64]	; 0x40
 8006dea:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006df0:	e841 2300 	strex	r3, r2, [r1]
 8006df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1e6      	bne.n	8006dca <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	3308      	adds	r3, #8
 8006e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	e853 3f00 	ldrex	r3, [r3]
 8006e0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e0c:	69fb      	ldr	r3, [r7, #28]
 8006e0e:	f023 0301 	bic.w	r3, r3, #1
 8006e12:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3308      	adds	r3, #8
 8006e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e24:	e841 2300 	strex	r3, r2, [r1]
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d1e5      	bne.n	8006dfc <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2220      	movs	r2, #32
 8006e34:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d12e      	bne.n	8006ea2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	2200      	movs	r2, #0
 8006e48:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	e853 3f00 	ldrex	r3, [r3]
 8006e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f023 0310 	bic.w	r3, r3, #16
 8006e5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e68:	61bb      	str	r3, [r7, #24]
 8006e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6c:	6979      	ldr	r1, [r7, #20]
 8006e6e:	69ba      	ldr	r2, [r7, #24]
 8006e70:	e841 2300 	strex	r3, r2, [r1]
 8006e74:	613b      	str	r3, [r7, #16]
   return(result);
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1e6      	bne.n	8006e4a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	69db      	ldr	r3, [r3, #28]
 8006e82:	f003 0310 	and.w	r3, r3, #16
 8006e86:	2b10      	cmp	r3, #16
 8006e88:	d103      	bne.n	8006e92 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2210      	movs	r2, #16
 8006e90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006e98:	4619      	mov	r1, r3
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f7ff f9d6 	bl	800624c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ea0:	e00b      	b.n	8006eba <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7f9 fc88 	bl	80007b8 <HAL_UART_RxCpltCallback>
}
 8006ea8:	e007      	b.n	8006eba <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	699a      	ldr	r2, [r3, #24]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f042 0208 	orr.w	r2, r2, #8
 8006eb8:	619a      	str	r2, [r3, #24]
}
 8006eba:	bf00      	nop
 8006ebc:	3758      	adds	r7, #88	; 0x58
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}

08006ec2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006ec2:	b480      	push	{r7}
 8006ec4:	b083      	sub	sp, #12
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006eca:	bf00      	nop
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <__libc_init_array>:
 8006ed8:	b570      	push	{r4, r5, r6, lr}
 8006eda:	4e0d      	ldr	r6, [pc, #52]	; (8006f10 <__libc_init_array+0x38>)
 8006edc:	4c0d      	ldr	r4, [pc, #52]	; (8006f14 <__libc_init_array+0x3c>)
 8006ede:	1ba4      	subs	r4, r4, r6
 8006ee0:	10a4      	asrs	r4, r4, #2
 8006ee2:	2500      	movs	r5, #0
 8006ee4:	42a5      	cmp	r5, r4
 8006ee6:	d109      	bne.n	8006efc <__libc_init_array+0x24>
 8006ee8:	4e0b      	ldr	r6, [pc, #44]	; (8006f18 <__libc_init_array+0x40>)
 8006eea:	4c0c      	ldr	r4, [pc, #48]	; (8006f1c <__libc_init_array+0x44>)
 8006eec:	f000 f820 	bl	8006f30 <_init>
 8006ef0:	1ba4      	subs	r4, r4, r6
 8006ef2:	10a4      	asrs	r4, r4, #2
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	42a5      	cmp	r5, r4
 8006ef8:	d105      	bne.n	8006f06 <__libc_init_array+0x2e>
 8006efa:	bd70      	pop	{r4, r5, r6, pc}
 8006efc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f00:	4798      	blx	r3
 8006f02:	3501      	adds	r5, #1
 8006f04:	e7ee      	b.n	8006ee4 <__libc_init_array+0xc>
 8006f06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006f0a:	4798      	blx	r3
 8006f0c:	3501      	adds	r5, #1
 8006f0e:	e7f2      	b.n	8006ef6 <__libc_init_array+0x1e>
 8006f10:	08006fb8 	.word	0x08006fb8
 8006f14:	08006fb8 	.word	0x08006fb8
 8006f18:	08006fb8 	.word	0x08006fb8
 8006f1c:	08006fbc 	.word	0x08006fbc

08006f20 <memset>:
 8006f20:	4402      	add	r2, r0
 8006f22:	4603      	mov	r3, r0
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d100      	bne.n	8006f2a <memset+0xa>
 8006f28:	4770      	bx	lr
 8006f2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2e:	e7f9      	b.n	8006f24 <memset+0x4>

08006f30 <_init>:
 8006f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f32:	bf00      	nop
 8006f34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f36:	bc08      	pop	{r3}
 8006f38:	469e      	mov	lr, r3
 8006f3a:	4770      	bx	lr

08006f3c <_fini>:
 8006f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f3e:	bf00      	nop
 8006f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f42:	bc08      	pop	{r3}
 8006f44:	469e      	mov	lr, r3
 8006f46:	4770      	bx	lr
