
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006660  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08006800  08006800  00016800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068e0  080068e0  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080068e0  080068e0  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080068e0  080068e0  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068e0  080068e0  000168e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068e4  080068e4  000168e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080068e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000080  08006968  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08006968  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001322f  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021c0  00000000  00000000  000332df  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000eb8  00000000  00000000  000354a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00036358  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021ee0  00000000  00000000  00037138  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ea67  00000000  00000000  00059018  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d3ea0  00000000  00000000  00067a7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013b91f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000412c  00000000  00000000  0013b99c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067e8 	.word	0x080067e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080067e8 	.word	0x080067e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <HAL_UART_RxCpltCallback>:
uint8_t measurement_mode = 0;
uint8_t display_state = 1; // Default of 1 is Measurement Display State
uint8_t output_active = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	message_received = 1;
 8000298:	4b04      	ldr	r3, [pc, #16]	; (80002ac <HAL_UART_RxCpltCallback+0x1c>)
 800029a:	2201      	movs	r2, #1
 800029c:	701a      	strb	r2, [r3, #0]
}
 800029e:	bf00      	nop
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
 80002aa:	bf00      	nop
 80002ac:	2000009c 	.word	0x2000009c

080002b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 80002ba:	f001 f88b 	bl	80013d4 <HAL_GetTick>
 80002be:	4602      	mov	r2, r0
 80002c0:	4b15      	ldr	r3, [pc, #84]	; (8000318 <HAL_GPIO_EXTI_Callback+0x68>)
 80002c2:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 80002c4:	88fb      	ldrh	r3, [r7, #6]
 80002c6:	2b40      	cmp	r3, #64	; 0x40
 80002c8:	d103      	bne.n	80002d2 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 80002ca:	4b14      	ldr	r3, [pc, #80]	; (800031c <HAL_GPIO_EXTI_Callback+0x6c>)
 80002cc:	2201      	movs	r2, #1
 80002ce:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 80002d0:	e01d      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 80002d2:	88fb      	ldrh	r3, [r7, #6]
 80002d4:	2b80      	cmp	r3, #128	; 0x80
 80002d6:	d103      	bne.n	80002e0 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 80002d8:	4b11      	ldr	r3, [pc, #68]	; (8000320 <HAL_GPIO_EXTI_Callback+0x70>)
 80002da:	2201      	movs	r2, #1
 80002dc:	701a      	strb	r2, [r3, #0]
}
 80002de:	e016      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 80002e0:	88fb      	ldrh	r3, [r7, #6]
 80002e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80002e6:	d103      	bne.n	80002f0 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 80002e8:	4b0e      	ldr	r3, [pc, #56]	; (8000324 <HAL_GPIO_EXTI_Callback+0x74>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	701a      	strb	r2, [r3, #0]
}
 80002ee:	e00e      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 80002f0:	88fb      	ldrh	r3, [r7, #6]
 80002f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80002f6:	d103      	bne.n	8000300 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <HAL_GPIO_EXTI_Callback+0x78>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	701a      	strb	r2, [r3, #0]
}
 80002fe:	e006      	b.n	800030e <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8000300:	88fb      	ldrh	r3, [r7, #6]
 8000302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000306:	d102      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <HAL_GPIO_EXTI_Callback+0x7c>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	200000a4 	.word	0x200000a4
 800031c:	2000009d 	.word	0x2000009d
 8000320:	2000009e 	.word	0x2000009e
 8000324:	2000009f 	.word	0x2000009f
 8000328:	200000a0 	.word	0x200000a0
 800032c:	200000a1 	.word	0x200000a1

08000330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000330:	b580      	push	{r7, lr}
 8000332:	f5ad 6d06 	sub.w	sp, sp, #2144	; 0x860
 8000336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint16_t raw;
	uint16_t millivolts;
	char msg[100];
	uint16_t adc_array[1000];
	uint16_t adc_count = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e


	uint8_t rx_bytes[10] = {0};
 800033e:	463b      	mov	r3, r7
 8000340:	2200      	movs	r2, #0
 8000342:	601a      	str	r2, [r3, #0]
 8000344:	605a      	str	r2, [r3, #4]
 8000346:	811a      	strh	r2, [r3, #8]
	uint8_t rx_bytes_counter = 0;
 8000348:	2300      	movs	r3, #0
 800034a:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800034e:	f000 ffe7 	bl	8001320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000352:	f000 f9ef 	bl	8000734 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000356:	f000 fb19 	bl	800098c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800035a:	f000 fae7 	bl	800092c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 800035e:	f000 fabf 	bl	80008e0 <MX_TIM16_Init>
  MX_ADC1_Init();
 8000362:	f000 fa4d 	bl	8000800 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8000366:	230a      	movs	r3, #10
 8000368:	220d      	movs	r2, #13
 800036a:	49be      	ldr	r1, [pc, #760]	; (8000664 <main+0x334>)
 800036c:	48be      	ldr	r0, [pc, #760]	; (8000668 <main+0x338>)
 800036e:	f004 fbe7 	bl	8004b40 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000372:	2201      	movs	r2, #1
 8000374:	49bd      	ldr	r1, [pc, #756]	; (800066c <main+0x33c>)
 8000376:	48bc      	ldr	r0, [pc, #752]	; (8000668 <main+0x338>)
 8000378:	f004 fc76 	bl	8004c68 <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim16);
 800037c:	48bc      	ldr	r0, [pc, #752]	; (8000670 <main+0x340>)
 800037e:	f004 f91d 	bl	80045bc <HAL_TIM_Base_Start_IT>


  // Set up the default state of the device
  display_state = changeDisplayState(1); // 1 == Measurement mode
 8000382:	2001      	movs	r0, #1
 8000384:	f000 fbd0 	bl	8000b28 <changeDisplayState>
 8000388:	4603      	mov	r3, r0
 800038a:	461a      	mov	r2, r3
 800038c:	4bb9      	ldr	r3, [pc, #740]	; (8000674 <main+0x344>)
 800038e:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(message_received && rx_byte[0] != '\n')
 8000390:	4bb9      	ldr	r3, [pc, #740]	; (8000678 <main+0x348>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d03a      	beq.n	800040e <main+0xde>
 8000398:	4bb4      	ldr	r3, [pc, #720]	; (800066c <main+0x33c>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	2b0a      	cmp	r3, #10
 800039e:	d036      	beq.n	800040e <main+0xde>
	  {
		  rx_bytes[rx_bytes_counter] = rx_byte[0];
 80003a0:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 80003a4:	4ab1      	ldr	r2, [pc, #708]	; (800066c <main+0x33c>)
 80003a6:	7811      	ldrb	r1, [r2, #0]
 80003a8:	463a      	mov	r2, r7
 80003aa:	54d1      	strb	r1, [r2, r3]
		  if(rx_bytes_counter == 0 && rx_byte[0] == '@'){
 80003ac:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d109      	bne.n	80003c8 <main+0x98>
 80003b4:	4bad      	ldr	r3, [pc, #692]	; (800066c <main+0x33c>)
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	2b40      	cmp	r3, #64	; 0x40
 80003ba:	d105      	bne.n	80003c8 <main+0x98>
			  rx_bytes_counter++;
 80003bc:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 80003c0:	3301      	adds	r3, #1
 80003c2:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
 80003c6:	e01a      	b.n	80003fe <main+0xce>
		  } else if(rx_bytes_counter > 0){
 80003c8:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d016      	beq.n	80003fe <main+0xce>
			  rx_bytes_counter++;
 80003d0:	f897 385d 	ldrb.w	r3, [r7, #2141]	; 0x85d
 80003d4:	3301      	adds	r3, #1
 80003d6:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
			  if(uartRxComplete(rx_byte[0]))
 80003da:	4ba4      	ldr	r3, [pc, #656]	; (800066c <main+0x33c>)
 80003dc:	781b      	ldrb	r3, [r3, #0]
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 fc14 	bl	8000c0c <uartRxComplete>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d009      	beq.n	80003fe <main+0xce>
			  {
				  interpret_rx_message(rx_bytes, rx_bytes_counter);
 80003ea:	f897 285d 	ldrb.w	r2, [r7, #2141]	; 0x85d
 80003ee:	463b      	mov	r3, r7
 80003f0:	4611      	mov	r1, r2
 80003f2:	4618      	mov	r0, r3
 80003f4:	f000 fc1c 	bl	8000c30 <interpret_rx_message>
				  rx_bytes_counter = 0;
 80003f8:	2300      	movs	r3, #0
 80003fa:	f887 385d 	strb.w	r3, [r7, #2141]	; 0x85d
			  }
		  }
		  HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80003fe:	2201      	movs	r2, #1
 8000400:	499a      	ldr	r1, [pc, #616]	; (800066c <main+0x33c>)
 8000402:	4899      	ldr	r0, [pc, #612]	; (8000668 <main+0x338>)
 8000404:	f004 fc30 	bl	8004c68 <HAL_UART_Receive_IT>
		  message_received = 0;
 8000408:	4b9b      	ldr	r3, [pc, #620]	; (8000678 <main+0x348>)
 800040a:	2200      	movs	r2, #0
 800040c:	701a      	strb	r2, [r3, #0]
	  }
	  if(btn_up_flag)
 800040e:	4b9b      	ldr	r3, [pc, #620]	; (800067c <main+0x34c>)
 8000410:	781b      	ldrb	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d010      	beq.n	8000438 <main+0x108>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000416:	f000 ffdd 	bl	80013d4 <HAL_GetTick>
 800041a:	4602      	mov	r2, r0
 800041c:	4b98      	ldr	r3, [pc, #608]	; (8000680 <main+0x350>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	1ad3      	subs	r3, r2, r3
 8000422:	2b03      	cmp	r3, #3
 8000424:	d96d      	bls.n	8000502 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8000426:	f44f 7100 	mov.w	r1, #512	; 0x200
 800042a:	4896      	ldr	r0, [pc, #600]	; (8000684 <main+0x354>)
 800042c:	f002 fca2 	bl	8002d74 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_up_flag = 0;
 8000430:	4b92      	ldr	r3, [pc, #584]	; (800067c <main+0x34c>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
 8000436:	e064      	b.n	8000502 <main+0x1d2>
		  }
	  }
	  else if(btn_left_flag)
 8000438:	4b93      	ldr	r3, [pc, #588]	; (8000688 <main+0x358>)
 800043a:	781b      	ldrb	r3, [r3, #0]
 800043c:	2b00      	cmp	r3, #0
 800043e:	d010      	beq.n	8000462 <main+0x132>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000440:	f000 ffc8 	bl	80013d4 <HAL_GetTick>
 8000444:	4602      	mov	r2, r0
 8000446:	4b8e      	ldr	r3, [pc, #568]	; (8000680 <main+0x350>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	2b03      	cmp	r3, #3
 800044e:	d958      	bls.n	8000502 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8000450:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000454:	488b      	ldr	r0, [pc, #556]	; (8000684 <main+0x354>)
 8000456:	f002 fc8d 	bl	8002d74 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
			  }
			  btn_left_flag = 0;
 800045a:	4b8b      	ldr	r3, [pc, #556]	; (8000688 <main+0x358>)
 800045c:	2200      	movs	r2, #0
 800045e:	701a      	strb	r2, [r3, #0]
 8000460:	e04f      	b.n	8000502 <main+0x1d2>
		  }
	  }
	  else if(btn_down_flag)
 8000462:	4b8a      	ldr	r3, [pc, #552]	; (800068c <main+0x35c>)
 8000464:	781b      	ldrb	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d010      	beq.n	800048c <main+0x15c>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 800046a:	f000 ffb3 	bl	80013d4 <HAL_GetTick>
 800046e:	4602      	mov	r2, r0
 8000470:	4b83      	ldr	r3, [pc, #524]	; (8000680 <main+0x350>)
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	1ad3      	subs	r3, r2, r3
 8000476:	2b03      	cmp	r3, #3
 8000478:	d943      	bls.n	8000502 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 800047a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800047e:	4881      	ldr	r0, [pc, #516]	; (8000684 <main+0x354>)
 8000480:	f002 fc78 	bl	8002d74 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 8000484:	4b81      	ldr	r3, [pc, #516]	; (800068c <main+0x35c>)
 8000486:	2200      	movs	r2, #0
 8000488:	701a      	strb	r2, [r3, #0]
 800048a:	e03a      	b.n	8000502 <main+0x1d2>
		  }
	  }
	  else if(btn_right_flag)
 800048c:	4b80      	ldr	r3, [pc, #512]	; (8000690 <main+0x360>)
 800048e:	781b      	ldrb	r3, [r3, #0]
 8000490:	2b00      	cmp	r3, #0
 8000492:	d010      	beq.n	80004b6 <main+0x186>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 8000494:	f000 ff9e 	bl	80013d4 <HAL_GetTick>
 8000498:	4602      	mov	r2, r0
 800049a:	4b79      	ldr	r3, [pc, #484]	; (8000680 <main+0x350>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	1ad3      	subs	r3, r2, r3
 80004a0:	2b03      	cmp	r3, #3
 80004a2:	d92e      	bls.n	8000502 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 80004a4:	2180      	movs	r1, #128	; 0x80
 80004a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004aa:	f002 fc63 	bl	8002d74 <HAL_GPIO_ReadPin>
			  {
//				  HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
			  }
			  btn_right_flag = 0;
 80004ae:	4b78      	ldr	r3, [pc, #480]	; (8000690 <main+0x360>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e025      	b.n	8000502 <main+0x1d2>
		  }
	  }
	  else if(btn_mid_flag)
 80004b6:	4b77      	ldr	r3, [pc, #476]	; (8000694 <main+0x364>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d021      	beq.n	8000502 <main+0x1d2>
	  {
		  if(HAL_GetTick() - last_ticks >= 4)
 80004be:	f000 ff89 	bl	80013d4 <HAL_GetTick>
 80004c2:	4602      	mov	r2, r0
 80004c4:	4b6e      	ldr	r3, [pc, #440]	; (8000680 <main+0x350>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	1ad3      	subs	r3, r2, r3
 80004ca:	2b03      	cmp	r3, #3
 80004cc:	d919      	bls.n	8000502 <main+0x1d2>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 80004ce:	2140      	movs	r1, #64	; 0x40
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f002 fc4e 	bl	8002d74 <HAL_GPIO_ReadPin>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d00e      	beq.n	80004fc <main+0x1cc>
			  {
				  // Toggle Menu Display state
				  if(display_state == 0){
 80004de:	4b65      	ldr	r3, [pc, #404]	; (8000674 <main+0x344>)
 80004e0:	781b      	ldrb	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d103      	bne.n	80004ee <main+0x1be>
					  changeDisplayState(1);
 80004e6:	2001      	movs	r0, #1
 80004e8:	f000 fb1e 	bl	8000b28 <changeDisplayState>
 80004ec:	e006      	b.n	80004fc <main+0x1cc>
				  } else if(display_state == 1){
 80004ee:	4b61      	ldr	r3, [pc, #388]	; (8000674 <main+0x344>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	2b01      	cmp	r3, #1
 80004f4:	d102      	bne.n	80004fc <main+0x1cc>
					  changeDisplayState(0);
 80004f6:	2000      	movs	r0, #0
 80004f8:	f000 fb16 	bl	8000b28 <changeDisplayState>
				  }
//				  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
			  }
			  btn_mid_flag = 0;
 80004fc:	4b65      	ldr	r3, [pc, #404]	; (8000694 <main+0x364>)
 80004fe:	2200      	movs	r2, #0
 8000500:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC TIM16 interrupt
	  if(adc_timer_flag)
 8000502:	4b65      	ldr	r3, [pc, #404]	; (8000698 <main+0x368>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	f43f af42 	beq.w	8000390 <main+0x60>
	  {
		  if(adc_count > 999)
 800050c:	f8b7 385e 	ldrh.w	r3, [r7, #2142]	; 0x85e
 8000510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000514:	f0c0 80d0 	bcc.w	80006b8 <main+0x388>
		  {
			  // Do calculations every 1000 readings
			  adc_count = 0;
 8000518:	2300      	movs	r3, #0
 800051a:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
			  uint32_t total = 0;
 800051e:	2300      	movs	r3, #0
 8000520:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
			  uint16_t max = 0;
 8000524:	2300      	movs	r3, #0
 8000526:	f8a7 3856 	strh.w	r3, [r7, #2134]	; 0x856
			  uint16_t min = adc_array[99]; // arbitrary value
 800052a:	f107 030c 	add.w	r3, r7, #12
 800052e:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000532:	f8a7 3854 	strh.w	r3, [r7, #2132]	; 0x854
			  int16_t diff = 0;
 8000536:	2300      	movs	r3, #0
 8000538:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
			  int16_t prev_diff = 0;
 800053c:	2300      	movs	r3, #0
 800053e:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
			  uint16_t mid_passes = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	f8a7 3850 	strh.w	r3, [r7, #2128]	; 0x850
			  // 1000 measurements at 5kHz take 200ms
			  for(int x = 0; x < 1000; x++)
 8000548:	2300      	movs	r3, #0
 800054a:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 800054e:	e035      	b.n	80005bc <main+0x28c>
			  {
				  total += adc_array[x];
 8000550:	f107 030c 	add.w	r3, r7, #12
 8000554:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000558:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800055c:	461a      	mov	r2, r3
 800055e:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 8000562:	4413      	add	r3, r2
 8000564:	f8c7 3858 	str.w	r3, [r7, #2136]	; 0x858
				  if(adc_array[x] > max)
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000570:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000574:	f8b7 2856 	ldrh.w	r2, [r7, #2134]	; 0x856
 8000578:	429a      	cmp	r2, r3
 800057a:	d208      	bcs.n	800058e <main+0x25e>
				  {
					  max = adc_array[x];
 800057c:	f107 030c 	add.w	r3, r7, #12
 8000580:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000584:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8000588:	f8a7 3856 	strh.w	r3, [r7, #2134]	; 0x856
 800058c:	e011      	b.n	80005b2 <main+0x282>
				  }
				  else if(adc_array[x] < min)
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 8000596:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800059a:	f8b7 2854 	ldrh.w	r2, [r7, #2132]	; 0x854
 800059e:	429a      	cmp	r2, r3
 80005a0:	d907      	bls.n	80005b2 <main+0x282>
				  {
					  min = adc_array[x];
 80005a2:	f107 030c 	add.w	r3, r7, #12
 80005a6:	f8d7 284c 	ldr.w	r2, [r7, #2124]	; 0x84c
 80005aa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80005ae:	f8a7 3854 	strh.w	r3, [r7, #2132]	; 0x854
			  for(int x = 0; x < 1000; x++)
 80005b2:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80005b6:	3301      	adds	r3, #1
 80005b8:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 80005bc:	f8d7 384c 	ldr.w	r3, [r7, #2124]	; 0x84c
 80005c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005c4:	dbc4      	blt.n	8000550 <main+0x220>
				  }
			  }
			  offset = total/1000;
 80005c6:	f8d7 3858 	ldr.w	r3, [r7, #2136]	; 0x858
 80005ca:	4a34      	ldr	r2, [pc, #208]	; (800069c <main+0x36c>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	099b      	lsrs	r3, r3, #6
 80005d2:	b29a      	uxth	r2, r3
 80005d4:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <main+0x370>)
 80005d6:	801a      	strh	r2, [r3, #0]
			  for(int x = 0; x < 1000; x++)
 80005d8:	2300      	movs	r3, #0
 80005da:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 80005de:	e021      	b.n	8000624 <main+0x2f4>
			  {
				  // Calculate frequency
				  diff = adc_array[x] - offset;
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	f8d7 2848 	ldr.w	r2, [r7, #2120]	; 0x848
 80005e8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80005ec:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <main+0x370>)
 80005ee:	881b      	ldrh	r3, [r3, #0]
 80005f0:	1ad3      	subs	r3, r2, r3
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	f8a7 3842 	strh.w	r3, [r7, #2114]	; 0x842
				  if(diff > 0 && prev_diff < 0)
 80005f8:	f9b7 3842 	ldrsh.w	r3, [r7, #2114]	; 0x842
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	dd08      	ble.n	8000612 <main+0x2e2>
 8000600:	f9b7 3852 	ldrsh.w	r3, [r7, #2130]	; 0x852
 8000604:	2b00      	cmp	r3, #0
 8000606:	da04      	bge.n	8000612 <main+0x2e2>
				  {
					  mid_passes++;
 8000608:	f8b7 3850 	ldrh.w	r3, [r7, #2128]	; 0x850
 800060c:	3301      	adds	r3, #1
 800060e:	f8a7 3850 	strh.w	r3, [r7, #2128]	; 0x850
				  }
				  prev_diff = diff;
 8000612:	f8b7 3842 	ldrh.w	r3, [r7, #2114]	; 0x842
 8000616:	f8a7 3852 	strh.w	r3, [r7, #2130]	; 0x852
			  for(int x = 0; x < 1000; x++)
 800061a:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 800061e:	3301      	adds	r3, #1
 8000620:	f8c7 3848 	str.w	r3, [r7, #2120]	; 0x848
 8000624:	f8d7 3848 	ldr.w	r3, [r7, #2120]	; 0x848
 8000628:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800062c:	dbd8      	blt.n	80005e0 <main+0x2b0>
			  }
			  period = 200000/(mid_passes);
 800062e:	f8b7 3850 	ldrh.w	r3, [r7, #2128]	; 0x850
 8000632:	4a1c      	ldr	r2, [pc, #112]	; (80006a4 <main+0x374>)
 8000634:	fb92 f3f3 	sdiv	r3, r2, r3
 8000638:	b29a      	uxth	r2, r3
 800063a:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <main+0x378>)
 800063c:	801a      	strh	r2, [r3, #0]
			  frequency = 1000000/period;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <main+0x378>)
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	461a      	mov	r2, r3
 8000644:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x37c>)
 8000646:	fb93 f3f2 	sdiv	r3, r3, r2
 800064a:	b29a      	uxth	r2, r3
 800064c:	4b18      	ldr	r3, [pc, #96]	; (80006b0 <main+0x380>)
 800064e:	801a      	strh	r2, [r3, #0]
			  amplitude = max - min;
 8000650:	f8b7 2856 	ldrh.w	r2, [r7, #2134]	; 0x856
 8000654:	f8b7 3854 	ldrh.w	r3, [r7, #2132]	; 0x854
 8000658:	1ad3      	subs	r3, r2, r3
 800065a:	b29a      	uxth	r2, r3
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <main+0x384>)
 800065e:	801a      	strh	r2, [r3, #0]
 8000660:	e057      	b.n	8000712 <main+0x3e2>
 8000662:	bf00      	nop
 8000664:	20000000 	.word	0x20000000
 8000668:	20000114 	.word	0x20000114
 800066c:	20000110 	.word	0x20000110
 8000670:	20000198 	.word	0x20000198
 8000674:	2000000d 	.word	0x2000000d
 8000678:	2000009c 	.word	0x2000009c
 800067c:	2000009f 	.word	0x2000009f
 8000680:	200000a4 	.word	0x200000a4
 8000684:	48000400 	.word	0x48000400
 8000688:	200000a0 	.word	0x200000a0
 800068c:	200000a1 	.word	0x200000a1
 8000690:	2000009e 	.word	0x2000009e
 8000694:	2000009d 	.word	0x2000009d
 8000698:	200000a2 	.word	0x200000a2
 800069c:	10624dd3 	.word	0x10624dd3
 80006a0:	200000ae 	.word	0x200000ae
 80006a4:	00030d40 	.word	0x00030d40
 80006a8:	200000ac 	.word	0x200000ac
 80006ac:	000f4240 	.word	0x000f4240
 80006b0:	200000aa 	.word	0x200000aa
 80006b4:	200000a8 	.word	0x200000a8
//			  sprintf(msg, "Max: %u\nMin: %u\nOffset: %u\nFrequency: %u\nAmplitude: %u\n\n", max, min, offset, frequency, amplitude);
//			  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		  }
		  else
		  {
			  HAL_ADC_Start(&hadc1);
 80006b8:	481a      	ldr	r0, [pc, #104]	; (8000724 <main+0x3f4>)
 80006ba:	f001 f891 	bl	80017e0 <HAL_ADC_Start>
			  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80006be:	f04f 31ff 	mov.w	r1, #4294967295
 80006c2:	4818      	ldr	r0, [pc, #96]	; (8000724 <main+0x3f4>)
 80006c4:	f001 f9d8 	bl	8001a78 <HAL_ADC_PollForConversion>
			  raw = HAL_ADC_GetValue(&hadc1);
 80006c8:	4816      	ldr	r0, [pc, #88]	; (8000724 <main+0x3f4>)
 80006ca:	f001 fad7 	bl	8001c7c <HAL_ADC_GetValue>
 80006ce:	4603      	mov	r3, r0
 80006d0:	f8a7 3846 	strh.w	r3, [r7, #2118]	; 0x846
			  HAL_ADC_Stop(&hadc1);
 80006d4:	4813      	ldr	r0, [pc, #76]	; (8000724 <main+0x3f4>)
 80006d6:	f001 f999 	bl	8001a0c <HAL_ADC_Stop>
			  millivolts = raw*3300/4095;
 80006da:	f8b7 3846 	ldrh.w	r3, [r7, #2118]	; 0x846
 80006de:	f640 42e4 	movw	r2, #3300	; 0xce4
 80006e2:	fb02 f303 	mul.w	r3, r2, r3
 80006e6:	4a10      	ldr	r2, [pc, #64]	; (8000728 <main+0x3f8>)
 80006e8:	fb82 1203 	smull	r1, r2, r2, r3
 80006ec:	441a      	add	r2, r3
 80006ee:	12d2      	asrs	r2, r2, #11
 80006f0:	17db      	asrs	r3, r3, #31
 80006f2:	1ad3      	subs	r3, r2, r3
 80006f4:	f8a7 3844 	strh.w	r3, [r7, #2116]	; 0x844
			  adc_array[adc_count] = millivolts;
 80006f8:	f8b7 285e 	ldrh.w	r2, [r7, #2142]	; 0x85e
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	f8b7 1844 	ldrh.w	r1, [r7, #2116]	; 0x844
 8000704:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
			  adc_count++;
 8000708:	f8b7 385e 	ldrh.w	r3, [r7, #2142]	; 0x85e
 800070c:	3301      	adds	r3, #1
 800070e:	f8a7 385e 	strh.w	r3, [r7, #2142]	; 0x85e
		  }

		  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000712:	2110      	movs	r1, #16
 8000714:	4805      	ldr	r0, [pc, #20]	; (800072c <main+0x3fc>)
 8000716:	f002 fb5d 	bl	8002dd4 <HAL_GPIO_TogglePin>
		  adc_timer_flag = 0;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <main+0x400>)
 800071c:	2200      	movs	r2, #0
 800071e:	701a      	strb	r2, [r3, #0]
	  if(message_received && rx_byte[0] != '\n')
 8000720:	e636      	b.n	8000390 <main+0x60>
 8000722:	bf00      	nop
 8000724:	200000c0 	.word	0x200000c0
 8000728:	80080081 	.word	0x80080081
 800072c:	48000800 	.word	0x48000800
 8000730:	200000a2 	.word	0x200000a2

08000734 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b0a6      	sub	sp, #152	; 0x98
 8000738:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800073e:	2228      	movs	r2, #40	; 0x28
 8000740:	2100      	movs	r1, #0
 8000742:	4618      	mov	r0, r3
 8000744:	f005 fc42 	bl	8005fcc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000748:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000758:	1d3b      	adds	r3, r7, #4
 800075a:	2258      	movs	r2, #88	; 0x58
 800075c:	2100      	movs	r1, #0
 800075e:	4618      	mov	r0, r3
 8000760:	f005 fc34 	bl	8005fcc <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000772:	2302      	movs	r3, #2
 8000774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800077c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000780:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000784:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fb50 	bl	8002e38 <HAL_RCC_OscConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800079e:	f000 fc1f 	bl	8000fe0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a2:	230f      	movs	r3, #15
 80007a4:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a6:	2302      	movs	r3, #2
 80007a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80007b2:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007b8:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80007bc:	2102      	movs	r1, #2
 80007be:	4618      	mov	r0, r3
 80007c0:	f003 fa50 	bl	8003c64 <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80007ca:	f000 fc09 	bl	8000fe0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM16
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <SystemClock_Config+0xc8>)
 80007d0:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80007dc:	2300      	movs	r3, #0
 80007de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	4618      	mov	r0, r3
 80007e4:	f003 fc74 	bl	80040d0 <HAL_RCCEx_PeriphCLKConfig>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80007ee:	f000 fbf7 	bl	8000fe0 <Error_Handler>
  }
}
 80007f2:	bf00      	nop
 80007f4:	3798      	adds	r7, #152	; 0x98
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	00800082 	.word	0x00800082

08000800 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000806:	f107 031c 	add.w	r3, r7, #28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]
 8000820:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000824:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000828:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800082a:	4b2c      	ldr	r3, [pc, #176]	; (80008dc <MX_ADC1_Init+0xdc>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000830:	4b2a      	ldr	r3, [pc, #168]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800083c:	4b27      	ldr	r3, [pc, #156]	; (80008dc <MX_ADC1_Init+0xdc>)
 800083e:	2200      	movs	r2, #0
 8000840:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000842:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084a:	4b24      	ldr	r3, [pc, #144]	; (80008dc <MX_ADC1_Init+0xdc>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000850:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000852:	2201      	movs	r2, #1
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b21      	ldr	r3, [pc, #132]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800085c:	4b1f      	ldr	r3, [pc, #124]	; (80008dc <MX_ADC1_Init+0xdc>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000862:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <MX_ADC1_Init+0xdc>)
 800086c:	2204      	movs	r2, #4
 800086e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000870:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000872:	2200      	movs	r2, #0
 8000874:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000878:	2200      	movs	r2, #0
 800087a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800087c:	4817      	ldr	r0, [pc, #92]	; (80008dc <MX_ADC1_Init+0xdc>)
 800087e:	f000 fdb5 	bl	80013ec <HAL_ADC_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 8000888:	f000 fbaa 	bl	8000fe0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800088c:	2300      	movs	r3, #0
 800088e:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	4811      	ldr	r0, [pc, #68]	; (80008dc <MX_ADC1_Init+0xdc>)
 8000898:	f001 fcea 	bl	8002270 <HAL_ADCEx_MultiModeConfigChannel>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80008a2:	f000 fb9d 	bl	8000fe0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008ae:	2300      	movs	r3, #0
 80008b0:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008ba:	2300      	movs	r3, #0
 80008bc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_ADC1_Init+0xdc>)
 80008c4:	f001 f9e8 	bl	8001c98 <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80008ce:	f000 fb87 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000c0 	.word	0x200000c0

080008e0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80008e4:	4b0f      	ldr	r3, [pc, #60]	; (8000924 <MX_TIM16_Init+0x44>)
 80008e6:	4a10      	ldr	r2, [pc, #64]	; (8000928 <MX_TIM16_Init+0x48>)
 80008e8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_TIM16_Init+0x44>)
 80008ec:	2247      	movs	r2, #71	; 0x47
 80008ee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_TIM16_Init+0x44>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 200 - 1;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_TIM16_Init+0x44>)
 80008f8:	22c7      	movs	r2, #199	; 0xc7
 80008fa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_TIM16_Init+0x44>)
 80008fe:	2200      	movs	r2, #0
 8000900:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_TIM16_Init+0x44>)
 8000904:	2200      	movs	r2, #0
 8000906:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_TIM16_Init+0x44>)
 800090a:	2200      	movs	r2, #0
 800090c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_TIM16_Init+0x44>)
 8000910:	f003 fdfc 	bl	800450c <HAL_TIM_Base_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 800091a:	f000 fb61 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000198 	.word	0x20000198
 8000928:	40014400 	.word	0x40014400

0800092c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000930:	4b14      	ldr	r3, [pc, #80]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000932:	4a15      	ldr	r2, [pc, #84]	; (8000988 <MX_USART2_UART_Init+0x5c>)
 8000934:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000938:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800093c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800093e:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000940:	2200      	movs	r2, #0
 8000942:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000946:	2200      	movs	r2, #0
 8000948:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800094c:	2200      	movs	r2, #0
 800094e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000952:	220c      	movs	r2, #12
 8000954:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x58>)
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x58>)
 8000970:	f004 f898 	bl	8004aa4 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800097a:	f000 fb31 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000114 	.word	0x20000114
 8000988:	40004400 	.word	0x40004400

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	; 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	4b53      	ldr	r3, [pc, #332]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009a4:	695b      	ldr	r3, [r3, #20]
 80009a6:	4a52      	ldr	r2, [pc, #328]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80009ac:	6153      	str	r3, [r2, #20]
 80009ae:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ba:	4b4d      	ldr	r3, [pc, #308]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009bc:	695b      	ldr	r3, [r3, #20]
 80009be:	4a4c      	ldr	r2, [pc, #304]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009c0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c4:	6153      	str	r3, [r2, #20]
 80009c6:	4b4a      	ldr	r3, [pc, #296]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009c8:	695b      	ldr	r3, [r3, #20]
 80009ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009d4:	695b      	ldr	r3, [r3, #20]
 80009d6:	4a46      	ldr	r2, [pc, #280]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009dc:	6153      	str	r3, [r2, #20]
 80009de:	4b44      	ldr	r3, [pc, #272]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b41      	ldr	r3, [pc, #260]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009ec:	695b      	ldr	r3, [r3, #20]
 80009ee:	4a40      	ldr	r2, [pc, #256]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f4:	6153      	str	r3, [r2, #20]
 80009f6:	4b3e      	ldr	r3, [pc, #248]	; (8000af0 <MX_GPIO_Init+0x164>)
 80009f8:	695b      	ldr	r3, [r3, #20]
 80009fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8000a08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0c:	f002 f9ca 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|LD3_Pin, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2190      	movs	r1, #144	; 0x90
 8000a14:	4837      	ldr	r0, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x168>)
 8000a16:	f002 f9c5 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a1a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a20:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	4830      	ldr	r0, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x168>)
 8000a32:	f002 f815 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8000a36:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 8000a3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a44:	2300      	movs	r3, #0
 8000a46:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a52:	f002 f805 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a5a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6e:	f001 fff7 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 8000a72:	2380      	movs	r3, #128	; 0x80
 8000a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 8000a80:	f107 0314 	add.w	r3, r7, #20
 8000a84:	4619      	mov	r1, r3
 8000a86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a8a:	f001 ffe9 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 8000a8e:	2390      	movs	r3, #144	; 0x90
 8000a90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a92:	2301      	movs	r3, #1
 8000a94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4813      	ldr	r0, [pc, #76]	; (8000af4 <MX_GPIO_Init+0x168>)
 8000aa6:	f001 ffdb 	bl	8002a60 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 8000aaa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000aae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ab0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_GPIO_Init+0x16c>)
 8000ac2:	f001 ffcd 	bl	8002a60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2100      	movs	r1, #0
 8000aca:	2017      	movs	r0, #23
 8000acc:	f001 ff1b 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ad0:	2017      	movs	r0, #23
 8000ad2:	f001 ff34 	bl	800293e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	2100      	movs	r1, #0
 8000ada:	2028      	movs	r0, #40	; 0x28
 8000adc:	f001 ff13 	bl	8002906 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ae0:	2028      	movs	r0, #40	; 0x28
 8000ae2:	f001 ff2c 	bl	800293e <HAL_NVIC_EnableIRQ>

}
 8000ae6:	bf00      	nop
 8000ae8:	3728      	adds	r7, #40	; 0x28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000
 8000af4:	48000800 	.word	0x48000800
 8000af8:	48000400 	.word	0x48000400

08000afc <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a06      	ldr	r2, [pc, #24]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d102      	bne.n	8000b12 <HAL_TIM_PeriodElapsedCallback+0x16>
	{
		adc_timer_flag = 1;
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000b0e:	2201      	movs	r2, #1
 8000b10:	701a      	strb	r2, [r3, #0]
	}
}
 8000b12:	bf00      	nop
 8000b14:	370c      	adds	r7, #12
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000198 	.word	0x20000198
 8000b24:	200000a2 	.word	0x200000a2

08000b28 <changeDisplayState>:

uint8_t changeDisplayState(uint8_t code)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
	if (code == 0)
 8000b32:	79fb      	ldrb	r3, [r7, #7]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d11d      	bne.n	8000b74 <changeDisplayState+0x4c>
	{
		// Change to Menu Display State
		display_state = 0;
 8000b38:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <changeDisplayState+0xdc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000b3e:	2201      	movs	r2, #1
 8000b40:	2120      	movs	r1, #32
 8000b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b46:	f002 f92d 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	2180      	movs	r1, #128	; 0x80
 8000b4e:	482e      	ldr	r0, [pc, #184]	; (8000c08 <changeDisplayState+0xe0>)
 8000b50:	f002 f928 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b54:	2200      	movs	r2, #0
 8000b56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b5e:	f002 f921 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b68:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b6c:	f002 f91a 	bl	8002da4 <HAL_GPIO_WritePin>
		return 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	e042      	b.n	8000bfa <changeDisplayState+0xd2>
	}
	else if (code == 1)
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d11d      	bne.n	8000bb6 <changeDisplayState+0x8e>
	{
		// Change to Measurement Display State
		display_state = 1;
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <changeDisplayState+0xdc>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2120      	movs	r1, #32
 8000b84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b88:	f002 f90c 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	481d      	ldr	r0, [pc, #116]	; (8000c08 <changeDisplayState+0xe0>)
 8000b92:	f002 f907 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f002 f900 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f002 f8f9 	bl	8002da4 <HAL_GPIO_WritePin>
		return 1;
 8000bb2:	2301      	movs	r3, #1
 8000bb4:	e021      	b.n	8000bfa <changeDisplayState+0xd2>
	}
	else if (code == 2)
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	2b02      	cmp	r3, #2
 8000bba:	d11d      	bne.n	8000bf8 <changeDisplayState+0xd0>
	{
		// Change to Output Display State
		display_state = 2;
 8000bbc:	4b11      	ldr	r3, [pc, #68]	; (8000c04 <changeDisplayState+0xdc>)
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f002 f8eb 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2180      	movs	r1, #128	; 0x80
 8000bd2:	480d      	ldr	r0, [pc, #52]	; (8000c08 <changeDisplayState+0xe0>)
 8000bd4:	f002 f8e6 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be2:	f002 f8df 	bl	8002da4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000be6:	2200      	movs	r2, #0
 8000be8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf0:	f002 f8d8 	bl	8002da4 <HAL_GPIO_WritePin>
		return 2;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e000      	b.n	8000bfa <changeDisplayState+0xd2>
	}
	else
	{
		// An error has occurred
		return 3;
 8000bf8:	2303      	movs	r3, #3
	}
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	2000000d 	.word	0x2000000d
 8000c08:	48000800 	.word	0x48000800

08000c0c <uartRxComplete>:

bool uartRxComplete(uint8_t last_byte)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	2b21      	cmp	r3, #33	; 0x21
 8000c1a:	d101      	bne.n	8000c20 <uartRxComplete+0x14>
	{
		return true;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e000      	b.n	8000c22 <uartRxComplete+0x16>
	}
	else
	{
		return false;
 8000c20:	2300      	movs	r3, #0
	}
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
	...

08000c30 <interpret_rx_message>:

void interpret_rx_message(uint8_t *rx_array, uint8_t length)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	70fb      	strb	r3, [r7, #3]

//	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
//	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);

	if(length > 7)
 8000c3c:	78fb      	ldrb	r3, [r7, #3]
 8000c3e:	2b07      	cmp	r3, #7
 8000c40:	d957      	bls.n	8000cf2 <interpret_rx_message+0xc2>
	{
		if(rx_array[2] == '*')
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	3302      	adds	r3, #2
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	2b2a      	cmp	r3, #42	; 0x2a
 8000c4a:	d115      	bne.n	8000c78 <interpret_rx_message+0x48>
		{
			// Requests
//			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
			switch(rx_array[4])
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3304      	adds	r3, #4
 8000c50:	781b      	ldrb	r3, [r3, #0]
 8000c52:	2b6d      	cmp	r3, #109	; 0x6d
 8000c54:	d002      	beq.n	8000c5c <interpret_rx_message+0x2c>
 8000c56:	2b73      	cmp	r3, #115	; 0x73
 8000c58:	d007      	beq.n	8000c6a <interpret_rx_message+0x3a>
					request_status(rx_array[6]);
					break;

				default:
					// Problems
					break;
 8000c5a:	e04a      	b.n	8000cf2 <interpret_rx_message+0xc2>
					request_measurement(rx_array[6]);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3306      	adds	r3, #6
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f84c 	bl	8000d00 <request_measurement>
					break;
 8000c68:	e043      	b.n	8000cf2 <interpret_rx_message+0xc2>
					request_status(rx_array[6]);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	3306      	adds	r3, #6
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	4618      	mov	r0, r3
 8000c72:	f000 f8e3 	bl	8000e3c <request_status>
					break;
 8000c76:	e03c      	b.n	8000cf2 <interpret_rx_message+0xc2>
			}
		}
		else if(rx_array[2] == '$')
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3302      	adds	r3, #2
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	2b24      	cmp	r3, #36	; 0x24
 8000c80:	d137      	bne.n	8000cf2 <interpret_rx_message+0xc2>
		{
			// Set
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
			uint8_t key1 = rx_array[4];
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	791b      	ldrb	r3, [r3, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
			uint8_t key2 = rx_array[5];
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	795b      	ldrb	r3, [r3, #5]
 8000c8c:	73bb      	strb	r3, [r7, #14]
			if(key1 == 'D' && key2 == 'V'){
 8000c8e:	7bfb      	ldrb	r3, [r7, #15]
 8000c90:	2b44      	cmp	r3, #68	; 0x44
 8000c92:	d106      	bne.n	8000ca2 <interpret_rx_message+0x72>
 8000c94:	7bbb      	ldrb	r3, [r7, #14]
 8000c96:	2b56      	cmp	r3, #86	; 0x56
 8000c98:	d103      	bne.n	8000ca2 <interpret_rx_message+0x72>
				// DC Voltage
				measurement_mode = 0;
 8000c9a:	4b18      	ldr	r3, [pc, #96]	; (8000cfc <interpret_rx_message+0xcc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
 8000ca0:	e027      	b.n	8000cf2 <interpret_rx_message+0xc2>
			} else if (key1 == 'A' && key2 == 'V'){
 8000ca2:	7bfb      	ldrb	r3, [r7, #15]
 8000ca4:	2b41      	cmp	r3, #65	; 0x41
 8000ca6:	d106      	bne.n	8000cb6 <interpret_rx_message+0x86>
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	2b56      	cmp	r3, #86	; 0x56
 8000cac:	d103      	bne.n	8000cb6 <interpret_rx_message+0x86>
				// AC Voltage
				measurement_mode = 1;
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <interpret_rx_message+0xcc>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e01d      	b.n	8000cf2 <interpret_rx_message+0xc2>
			} else if (key1 == 'D' && key2 == 'I'){
 8000cb6:	7bfb      	ldrb	r3, [r7, #15]
 8000cb8:	2b44      	cmp	r3, #68	; 0x44
 8000cba:	d106      	bne.n	8000cca <interpret_rx_message+0x9a>
 8000cbc:	7bbb      	ldrb	r3, [r7, #14]
 8000cbe:	2b49      	cmp	r3, #73	; 0x49
 8000cc0:	d103      	bne.n	8000cca <interpret_rx_message+0x9a>
				// DC Current
				measurement_mode = 2;
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <interpret_rx_message+0xcc>)
 8000cc4:	2202      	movs	r2, #2
 8000cc6:	701a      	strb	r2, [r3, #0]
 8000cc8:	e013      	b.n	8000cf2 <interpret_rx_message+0xc2>
			} else if (key1 == 'A' && key2 == 'I'){
 8000cca:	7bfb      	ldrb	r3, [r7, #15]
 8000ccc:	2b41      	cmp	r3, #65	; 0x41
 8000cce:	d106      	bne.n	8000cde <interpret_rx_message+0xae>
 8000cd0:	7bbb      	ldrb	r3, [r7, #14]
 8000cd2:	2b49      	cmp	r3, #73	; 0x49
 8000cd4:	d103      	bne.n	8000cde <interpret_rx_message+0xae>
				// AC Current
				measurement_mode = 3;
 8000cd6:	4b09      	ldr	r3, [pc, #36]	; (8000cfc <interpret_rx_message+0xcc>)
 8000cd8:	2203      	movs	r2, #3
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	e009      	b.n	8000cf2 <interpret_rx_message+0xc2>
			} else if (key1 == 'T' && key2 == 'C'){
 8000cde:	7bfb      	ldrb	r3, [r7, #15]
 8000ce0:	2b54      	cmp	r3, #84	; 0x54
 8000ce2:	d106      	bne.n	8000cf2 <interpret_rx_message+0xc2>
 8000ce4:	7bbb      	ldrb	r3, [r7, #14]
 8000ce6:	2b43      	cmp	r3, #67	; 0x43
 8000ce8:	d103      	bne.n	8000cf2 <interpret_rx_message+0xc2>
				// Temperature
				measurement_mode = 4;
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <interpret_rx_message+0xcc>)
 8000cec:	2204      	movs	r2, #4
 8000cee:	701a      	strb	r2, [r3, #0]
		else
		{
//			HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
		}
	}
}
 8000cf0:	e7ff      	b.n	8000cf2 <interpret_rx_message+0xc2>
 8000cf2:	bf00      	nop
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000b0 	.word	0x200000b0

08000d00 <request_measurement>:

void request_measurement(uint8_t parameter)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b088      	sub	sp, #32
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	switch(parameter){
 8000d0a:	79fb      	ldrb	r3, [r7, #7]
 8000d0c:	3b61      	subs	r3, #97	; 0x61
 8000d0e:	2b13      	cmp	r3, #19
 8000d10:	d87e      	bhi.n	8000e10 <request_measurement+0x110>
 8000d12:	a201      	add	r2, pc, #4	; (adr r2, 8000d18 <request_measurement+0x18>)
 8000d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d18:	08000d69 	.word	0x08000d69
 8000d1c:	08000e11 	.word	0x08000e11
 8000d20:	08000e11 	.word	0x08000e11
 8000d24:	08000e11 	.word	0x08000e11
 8000d28:	08000e11 	.word	0x08000e11
 8000d2c:	08000dd9 	.word	0x08000dd9
 8000d30:	08000e11 	.word	0x08000e11
 8000d34:	08000e11 	.word	0x08000e11
 8000d38:	08000e11 	.word	0x08000e11
 8000d3c:	08000e11 	.word	0x08000e11
 8000d40:	08000e11 	.word	0x08000e11
 8000d44:	08000e11 	.word	0x08000e11
 8000d48:	08000e11 	.word	0x08000e11
 8000d4c:	08000e11 	.word	0x08000e11
 8000d50:	08000da1 	.word	0x08000da1
 8000d54:	08000e11 	.word	0x08000e11
 8000d58:	08000e11 	.word	0x08000e11
 8000d5c:	08000e11 	.word	0x08000e11
 8000d60:	08000e11 	.word	0x08000e11
 8000d64:	08000e11 	.word	0x08000e11
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			sprintf(msg, "@,m,a,%u,!\n", amplitude);
 8000d68:	4b2c      	ldr	r3, [pc, #176]	; (8000e1c <request_measurement+0x11c>)
 8000d6a:	881b      	ldrh	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	f107 030c 	add.w	r3, r7, #12
 8000d72:	492b      	ldr	r1, [pc, #172]	; (8000e20 <request_measurement+0x120>)
 8000d74:	4618      	mov	r0, r3
 8000d76:	f005 f931 	bl	8005fdc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000d7a:	f107 030c 	add.w	r3, r7, #12
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff fa2e 	bl	80001e0 <strlen>
 8000d84:	4603      	mov	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	f107 010c 	add.w	r1, r7, #12
 8000d8c:	230a      	movs	r3, #10
 8000d8e:	4825      	ldr	r0, [pc, #148]	; (8000e24 <request_measurement+0x124>)
 8000d90:	f003 fed6 	bl	8004b40 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000d94:	2201      	movs	r2, #1
 8000d96:	4924      	ldr	r1, [pc, #144]	; (8000e28 <request_measurement+0x128>)
 8000d98:	4822      	ldr	r0, [pc, #136]	; (8000e24 <request_measurement+0x124>)
 8000d9a:	f003 ff65 	bl	8004c68 <HAL_UART_Receive_IT>
			break;
 8000d9e:	e038      	b.n	8000e12 <request_measurement+0x112>
		case 'o':
			// Offset
			sprintf(msg, "@,m,o,%u,!\n", offset);
 8000da0:	4b22      	ldr	r3, [pc, #136]	; (8000e2c <request_measurement+0x12c>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f107 030c 	add.w	r3, r7, #12
 8000daa:	4921      	ldr	r1, [pc, #132]	; (8000e30 <request_measurement+0x130>)
 8000dac:	4618      	mov	r0, r3
 8000dae:	f005 f915 	bl	8005fdc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000db2:	f107 030c 	add.w	r3, r7, #12
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fa12 	bl	80001e0 <strlen>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 010c 	add.w	r1, r7, #12
 8000dc4:	230a      	movs	r3, #10
 8000dc6:	4817      	ldr	r0, [pc, #92]	; (8000e24 <request_measurement+0x124>)
 8000dc8:	f003 feba 	bl	8004b40 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000dcc:	2201      	movs	r2, #1
 8000dce:	4916      	ldr	r1, [pc, #88]	; (8000e28 <request_measurement+0x128>)
 8000dd0:	4814      	ldr	r0, [pc, #80]	; (8000e24 <request_measurement+0x124>)
 8000dd2:	f003 ff49 	bl	8004c68 <HAL_UART_Receive_IT>
			break;
 8000dd6:	e01c      	b.n	8000e12 <request_measurement+0x112>
		case 'f':
			// Frequency
			sprintf(msg, "@,m,f,%u,!\n", frequency);
 8000dd8:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <request_measurement+0x134>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	461a      	mov	r2, r3
 8000dde:	f107 030c 	add.w	r3, r7, #12
 8000de2:	4915      	ldr	r1, [pc, #84]	; (8000e38 <request_measurement+0x138>)
 8000de4:	4618      	mov	r0, r3
 8000de6:	f005 f8f9 	bl	8005fdc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	4618      	mov	r0, r3
 8000df0:	f7ff f9f6 	bl	80001e0 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	230a      	movs	r3, #10
 8000dfe:	4809      	ldr	r0, [pc, #36]	; (8000e24 <request_measurement+0x124>)
 8000e00:	f003 fe9e 	bl	8004b40 <HAL_UART_Transmit>
			HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000e04:	2201      	movs	r2, #1
 8000e06:	4908      	ldr	r1, [pc, #32]	; (8000e28 <request_measurement+0x128>)
 8000e08:	4806      	ldr	r0, [pc, #24]	; (8000e24 <request_measurement+0x124>)
 8000e0a:	f003 ff2d 	bl	8004c68 <HAL_UART_Receive_IT>
			break;
 8000e0e:	e000      	b.n	8000e12 <request_measurement+0x112>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8000e10:	bf00      	nop
	}
}
 8000e12:	bf00      	nop
 8000e14:	3720      	adds	r7, #32
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200000a8 	.word	0x200000a8
 8000e20:	08006800 	.word	0x08006800
 8000e24:	20000114 	.word	0x20000114
 8000e28:	20000110 	.word	0x20000110
 8000e2c:	200000ae 	.word	0x200000ae
 8000e30:	0800680c 	.word	0x0800680c
 8000e34:	200000aa 	.word	0x200000aa
 8000e38:	08006818 	.word	0x08006818

08000e3c <request_status>:

void request_status(uint8_t output)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b088      	sub	sp, #32
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	71fb      	strb	r3, [r7, #7]
	char msg[20];
	if(output == '1')
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b31      	cmp	r3, #49	; 0x31
 8000e4a:	d158      	bne.n	8000efe <request_status+0xc2>
	{
		// Output On
		output_active = 1;
 8000e4c:	4b5b      	ldr	r3, [pc, #364]	; (8000fbc <request_status+0x180>)
 8000e4e:	2201      	movs	r2, #1
 8000e50:	701a      	strb	r2, [r3, #0]
		switch(measurement_mode){
 8000e52:	4b5b      	ldr	r3, [pc, #364]	; (8000fc0 <request_status+0x184>)
 8000e54:	781b      	ldrb	r3, [r3, #0]
 8000e56:	2b04      	cmp	r3, #4
 8000e58:	d83e      	bhi.n	8000ed8 <request_status+0x9c>
 8000e5a:	a201      	add	r2, pc, #4	; (adr r2, 8000e60 <request_status+0x24>)
 8000e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e60:	08000e75 	.word	0x08000e75
 8000e64:	08000e89 	.word	0x08000e89
 8000e68:	08000e9d 	.word	0x08000e9d
 8000e6c:	08000eb1 	.word	0x08000eb1
 8000e70:	08000ec5 	.word	0x08000ec5
			case 0:
				// DV
				sprintf(msg, "@,DV,p,%u,!\n", output_active);
 8000e74:	4b51      	ldr	r3, [pc, #324]	; (8000fbc <request_status+0x180>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	f107 030c 	add.w	r3, r7, #12
 8000e7e:	4951      	ldr	r1, [pc, #324]	; (8000fc4 <request_status+0x188>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f005 f8ab 	bl	8005fdc <siprintf>
				break;
 8000e86:	e027      	b.n	8000ed8 <request_status+0x9c>
			case 1:
				// AV
				sprintf(msg, "@,AV,p,%u,!\n", output_active);
 8000e88:	4b4c      	ldr	r3, [pc, #304]	; (8000fbc <request_status+0x180>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	494d      	ldr	r1, [pc, #308]	; (8000fc8 <request_status+0x18c>)
 8000e94:	4618      	mov	r0, r3
 8000e96:	f005 f8a1 	bl	8005fdc <siprintf>
				break;
 8000e9a:	e01d      	b.n	8000ed8 <request_status+0x9c>
			case 2:
				// DI
				sprintf(msg, "@,DI,p,%u,!\n", output_active);
 8000e9c:	4b47      	ldr	r3, [pc, #284]	; (8000fbc <request_status+0x180>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	461a      	mov	r2, r3
 8000ea2:	f107 030c 	add.w	r3, r7, #12
 8000ea6:	4949      	ldr	r1, [pc, #292]	; (8000fcc <request_status+0x190>)
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f005 f897 	bl	8005fdc <siprintf>
				break;
 8000eae:	e013      	b.n	8000ed8 <request_status+0x9c>
			case 3:
				// AI
				sprintf(msg, "@,AI,p,%u,!\n", output_active);
 8000eb0:	4b42      	ldr	r3, [pc, #264]	; (8000fbc <request_status+0x180>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4945      	ldr	r1, [pc, #276]	; (8000fd0 <request_status+0x194>)
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f005 f88d 	bl	8005fdc <siprintf>
				break;
 8000ec2:	e009      	b.n	8000ed8 <request_status+0x9c>
			case 4:
				// TC
				sprintf(msg, "@,TC,p,%u,!\n", output_active);
 8000ec4:	4b3d      	ldr	r3, [pc, #244]	; (8000fbc <request_status+0x180>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	461a      	mov	r2, r3
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4941      	ldr	r1, [pc, #260]	; (8000fd4 <request_status+0x198>)
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f005 f883 	bl	8005fdc <siprintf>
				break;
 8000ed6:	bf00      	nop
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4618      	mov	r0, r3
 8000ede:	f7ff f97f 	bl	80001e0 <strlen>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	b29a      	uxth	r2, r3
 8000ee6:	f107 010c 	add.w	r1, r7, #12
 8000eea:	230a      	movs	r3, #10
 8000eec:	483a      	ldr	r0, [pc, #232]	; (8000fd8 <request_status+0x19c>)
 8000eee:	f003 fe27 	bl	8004b40 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	4939      	ldr	r1, [pc, #228]	; (8000fdc <request_status+0x1a0>)
 8000ef6:	4838      	ldr	r0, [pc, #224]	; (8000fd8 <request_status+0x19c>)
 8000ef8:	f003 feb6 	bl	8004c68 <HAL_UART_Receive_IT>
		}
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
	}

}
 8000efc:	e05a      	b.n	8000fb4 <request_status+0x178>
	else if (output == '0')
 8000efe:	79fb      	ldrb	r3, [r7, #7]
 8000f00:	2b30      	cmp	r3, #48	; 0x30
 8000f02:	d157      	bne.n	8000fb4 <request_status+0x178>
		output_active = 0;
 8000f04:	4b2d      	ldr	r3, [pc, #180]	; (8000fbc <request_status+0x180>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
		switch(measurement_mode){
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <request_status+0x184>)
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	2b04      	cmp	r3, #4
 8000f10:	d83e      	bhi.n	8000f90 <request_status+0x154>
 8000f12:	a201      	add	r2, pc, #4	; (adr r2, 8000f18 <request_status+0xdc>)
 8000f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f18:	08000f2d 	.word	0x08000f2d
 8000f1c:	08000f41 	.word	0x08000f41
 8000f20:	08000f55 	.word	0x08000f55
 8000f24:	08000f69 	.word	0x08000f69
 8000f28:	08000f7d 	.word	0x08000f7d
				sprintf(msg, "@,DV,p,%u,!\n", output_active);
 8000f2c:	4b23      	ldr	r3, [pc, #140]	; (8000fbc <request_status+0x180>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	f107 030c 	add.w	r3, r7, #12
 8000f36:	4923      	ldr	r1, [pc, #140]	; (8000fc4 <request_status+0x188>)
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f005 f84f 	bl	8005fdc <siprintf>
				break;
 8000f3e:	e027      	b.n	8000f90 <request_status+0x154>
				sprintf(msg, "@,AV,p,%u,!\n", output_active);
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <request_status+0x180>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	461a      	mov	r2, r3
 8000f46:	f107 030c 	add.w	r3, r7, #12
 8000f4a:	491f      	ldr	r1, [pc, #124]	; (8000fc8 <request_status+0x18c>)
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f005 f845 	bl	8005fdc <siprintf>
				break;
 8000f52:	e01d      	b.n	8000f90 <request_status+0x154>
				sprintf(msg, "@,DI,p,%u,!\n", output_active);
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <request_status+0x180>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	461a      	mov	r2, r3
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	491b      	ldr	r1, [pc, #108]	; (8000fcc <request_status+0x190>)
 8000f60:	4618      	mov	r0, r3
 8000f62:	f005 f83b 	bl	8005fdc <siprintf>
				break;
 8000f66:	e013      	b.n	8000f90 <request_status+0x154>
				sprintf(msg, "@,AI,p,%u,!\n", output_active);
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <request_status+0x180>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f107 030c 	add.w	r3, r7, #12
 8000f72:	4917      	ldr	r1, [pc, #92]	; (8000fd0 <request_status+0x194>)
 8000f74:	4618      	mov	r0, r3
 8000f76:	f005 f831 	bl	8005fdc <siprintf>
				break;
 8000f7a:	e009      	b.n	8000f90 <request_status+0x154>
				sprintf(msg, "@,TC,p,%u,!\n", output_active);
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <request_status+0x180>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	f107 030c 	add.w	r3, r7, #12
 8000f86:	4913      	ldr	r1, [pc, #76]	; (8000fd4 <request_status+0x198>)
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f005 f827 	bl	8005fdc <siprintf>
				break;
 8000f8e:	bf00      	nop
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), 10);
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff f923 	bl	80001e0 <strlen>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	b29a      	uxth	r2, r3
 8000f9e:	f107 010c 	add.w	r1, r7, #12
 8000fa2:	230a      	movs	r3, #10
 8000fa4:	480c      	ldr	r0, [pc, #48]	; (8000fd8 <request_status+0x19c>)
 8000fa6:	f003 fdcb 	bl	8004b40 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8000faa:	2201      	movs	r2, #1
 8000fac:	490b      	ldr	r1, [pc, #44]	; (8000fdc <request_status+0x1a0>)
 8000fae:	480a      	ldr	r0, [pc, #40]	; (8000fd8 <request_status+0x19c>)
 8000fb0:	f003 fe5a 	bl	8004c68 <HAL_UART_Receive_IT>
}
 8000fb4:	bf00      	nop
 8000fb6:	3720      	adds	r7, #32
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200000b1 	.word	0x200000b1
 8000fc0:	200000b0 	.word	0x200000b0
 8000fc4:	08006824 	.word	0x08006824
 8000fc8:	08006834 	.word	0x08006834
 8000fcc:	08006844 	.word	0x08006844
 8000fd0:	08006854 	.word	0x08006854
 8000fd4:	08006864 	.word	0x08006864
 8000fd8:	20000114 	.word	0x20000114
 8000fdc:	20000110 	.word	0x20000110

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
	...

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_MspInit+0x44>)
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_MspInit+0x44>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	6193      	str	r3, [r2, #24]
 8001002:	4b0c      	ldr	r3, [pc, #48]	; (8001034 <HAL_MspInit+0x44>)
 8001004:	699b      	ldr	r3, [r3, #24]
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100e:	4b09      	ldr	r3, [pc, #36]	; (8001034 <HAL_MspInit+0x44>)
 8001010:	69db      	ldr	r3, [r3, #28]
 8001012:	4a08      	ldr	r2, [pc, #32]	; (8001034 <HAL_MspInit+0x44>)
 8001014:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001018:	61d3      	str	r3, [r2, #28]
 800101a:	4b06      	ldr	r3, [pc, #24]	; (8001034 <HAL_MspInit+0x44>)
 800101c:	69db      	ldr	r3, [r3, #28]
 800101e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001026:	2007      	movs	r0, #7
 8001028:	f001 fc62 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40021000 	.word	0x40021000

08001038 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b08a      	sub	sp, #40	; 0x28
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0314 	add.w	r3, r7, #20
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001058:	d124      	bne.n	80010a4 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <HAL_ADC_MspInit+0x74>)
 800105c:	695b      	ldr	r3, [r3, #20]
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <HAL_ADC_MspInit+0x74>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6153      	str	r3, [r2, #20]
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_ADC_MspInit+0x74>)
 8001068:	695b      	ldr	r3, [r3, #20]
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_ADC_MspInit+0x74>)
 8001074:	695b      	ldr	r3, [r3, #20]
 8001076:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <HAL_ADC_MspInit+0x74>)
 8001078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107c:	6153      	str	r3, [r2, #20]
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <HAL_ADC_MspInit+0x74>)
 8001080:	695b      	ldr	r3, [r3, #20]
 8001082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001086:	60fb      	str	r3, [r7, #12]
 8001088:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800108a:	2301      	movs	r3, #1
 800108c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800108e:	2303      	movs	r3, #3
 8001090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a0:	f001 fcde 	bl	8002a60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010a4:	bf00      	nop
 80010a6:	3728      	adds	r7, #40	; 0x28
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	40021000 	.word	0x40021000

080010b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a0d      	ldr	r2, [pc, #52]	; (80010f4 <HAL_TIM_Base_MspInit+0x44>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d113      	bne.n	80010ea <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010cc:	6193      	str	r3, [r2, #24]
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_TIM_Base_MspInit+0x48>)
 80010d0:	699b      	ldr	r3, [r3, #24]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80010da:	2200      	movs	r2, #0
 80010dc:	2100      	movs	r1, #0
 80010de:	2019      	movs	r0, #25
 80010e0:	f001 fc11 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80010e4:	2019      	movs	r0, #25
 80010e6:	f001 fc2a 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3710      	adds	r7, #16
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40014400 	.word	0x40014400
 80010f8:	40021000 	.word	0x40021000

080010fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	; 0x28
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a1b      	ldr	r2, [pc, #108]	; (8001188 <HAL_UART_MspInit+0x8c>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d130      	bne.n	8001180 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111e:	4b1b      	ldr	r3, [pc, #108]	; (800118c <HAL_UART_MspInit+0x90>)
 8001120:	69db      	ldr	r3, [r3, #28]
 8001122:	4a1a      	ldr	r2, [pc, #104]	; (800118c <HAL_UART_MspInit+0x90>)
 8001124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001128:	61d3      	str	r3, [r2, #28]
 800112a:	4b18      	ldr	r3, [pc, #96]	; (800118c <HAL_UART_MspInit+0x90>)
 800112c:	69db      	ldr	r3, [r3, #28]
 800112e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001136:	4b15      	ldr	r3, [pc, #84]	; (800118c <HAL_UART_MspInit+0x90>)
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	4a14      	ldr	r2, [pc, #80]	; (800118c <HAL_UART_MspInit+0x90>)
 800113c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001140:	6153      	str	r3, [r2, #20]
 8001142:	4b12      	ldr	r3, [pc, #72]	; (800118c <HAL_UART_MspInit+0x90>)
 8001144:	695b      	ldr	r3, [r3, #20]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	60fb      	str	r3, [r7, #12]
 800114c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114e:	230c      	movs	r3, #12
 8001150:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001156:	2300      	movs	r3, #0
 8001158:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800115a:	2300      	movs	r3, #0
 800115c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800115e:	2307      	movs	r3, #7
 8001160:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001162:	f107 0314 	add.w	r3, r7, #20
 8001166:	4619      	mov	r1, r3
 8001168:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800116c:	f001 fc78 	bl	8002a60 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001170:	2200      	movs	r2, #0
 8001172:	2100      	movs	r1, #0
 8001174:	2026      	movs	r0, #38	; 0x26
 8001176:	f001 fbc6 	bl	8002906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800117a:	2026      	movs	r0, #38	; 0x26
 800117c:	f001 fbdf 	bl	800293e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	; 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004400 	.word	0x40004400
 800118c:	40021000 	.word	0x40021000

08001190 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119e:	b480      	push	{r7}
 80011a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011a2:	e7fe      	b.n	80011a2 <HardFault_Handler+0x4>

080011a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a8:	e7fe      	b.n	80011a8 <MemManage_Handler+0x4>

080011aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ae:	e7fe      	b.n	80011ae <BusFault_Handler+0x4>

080011b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <UsageFault_Handler+0x4>

080011b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr

080011d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011d2:	b480      	push	{r7}
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e4:	f000 f8e2 	bl	80013ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	bd80      	pop	{r7, pc}

080011ec <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011f0:	2040      	movs	r0, #64	; 0x40
 80011f2:	f001 fe09 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011f6:	2080      	movs	r0, #128	; 0x80
 80011f8:	f001 fe06 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001200:	f001 fe02 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001204:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001208:	f001 fdfe 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001216:	f003 fa41 	bl	800469c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000198 	.word	0x20000198

08001224 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <USART2_IRQHandler+0x10>)
 800122a:	f003 fd6b 	bl	8004d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000114 	.word	0x20000114

08001238 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800123c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001240:	f001 fde2 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001244:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001248:	f001 fdde 	bl	8002e08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001258:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <_sbrk+0x50>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d102      	bne.n	8001266 <_sbrk+0x16>
		heap_end = &end;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <_sbrk+0x50>)
 8001262:	4a10      	ldr	r2, [pc, #64]	; (80012a4 <_sbrk+0x54>)
 8001264:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <_sbrk+0x50>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <_sbrk+0x50>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4413      	add	r3, r2
 8001274:	466a      	mov	r2, sp
 8001276:	4293      	cmp	r3, r2
 8001278:	d907      	bls.n	800128a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800127a:	f004 fe7d 	bl	8005f78 <__errno>
 800127e:	4602      	mov	r2, r0
 8001280:	230c      	movs	r3, #12
 8001282:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001284:	f04f 33ff 	mov.w	r3, #4294967295
 8001288:	e006      	b.n	8001298 <_sbrk+0x48>
	}

	heap_end += incr;
 800128a:	4b05      	ldr	r3, [pc, #20]	; (80012a0 <_sbrk+0x50>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	4413      	add	r3, r2
 8001292:	4a03      	ldr	r2, [pc, #12]	; (80012a0 <_sbrk+0x50>)
 8001294:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	4618      	mov	r0, r3
 800129a:	3710      	adds	r7, #16
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	200000b4 	.word	0x200000b4
 80012a4:	200001f0 	.word	0x200001f0

080012a8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001304 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012d0:	480d      	ldr	r0, [pc, #52]	; (8001308 <LoopForever+0x6>)
  ldr r1, =_edata
 80012d2:	490e      	ldr	r1, [pc, #56]	; (800130c <LoopForever+0xa>)
  ldr r2, =_sidata
 80012d4:	4a0e      	ldr	r2, [pc, #56]	; (8001310 <LoopForever+0xe>)
  movs r3, #0
 80012d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012d8:	e002      	b.n	80012e0 <LoopCopyDataInit>

080012da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012de:	3304      	adds	r3, #4

080012e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012e4:	d3f9      	bcc.n	80012da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012e8:	4c0b      	ldr	r4, [pc, #44]	; (8001318 <LoopForever+0x16>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012ec:	e001      	b.n	80012f2 <LoopFillZerobss>

080012ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012f0:	3204      	adds	r2, #4

080012f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012f4:	d3fb      	bcc.n	80012ee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80012f6:	f7ff ffd7 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012fa:	f004 fe43 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012fe:	f7ff f817 	bl	8000330 <main>

08001302 <LoopForever>:

LoopForever:
    b LoopForever
 8001302:	e7fe      	b.n	8001302 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001304:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800130c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001310:	080068e8 	.word	0x080068e8
  ldr r2, =_sbss
 8001314:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001318:	200001ec 	.word	0x200001ec

0800131c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800131c:	e7fe      	b.n	800131c <ADC1_2_IRQHandler>
	...

08001320 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001324:	4b08      	ldr	r3, [pc, #32]	; (8001348 <HAL_Init+0x28>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a07      	ldr	r2, [pc, #28]	; (8001348 <HAL_Init+0x28>)
 800132a:	f043 0310 	orr.w	r3, r3, #16
 800132e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001330:	2003      	movs	r0, #3
 8001332:	f001 fadd 	bl	80028f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f808 	bl	800134c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800133c:	f7ff fe58 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	40022000 	.word	0x40022000

0800134c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x54>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_InitTick+0x58>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	4619      	mov	r1, r3
 800135e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001362:	fbb3 f3f1 	udiv	r3, r3, r1
 8001366:	fbb2 f3f3 	udiv	r3, r2, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f001 faf5 	bl	800295a <HAL_SYSTICK_Config>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e00e      	b.n	8001398 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2b0f      	cmp	r3, #15
 800137e:	d80a      	bhi.n	8001396 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001380:	2200      	movs	r2, #0
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	f04f 30ff 	mov.w	r0, #4294967295
 8001388:	f001 fabd 	bl	8002906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800138c:	4a06      	ldr	r2, [pc, #24]	; (80013a8 <HAL_InitTick+0x5c>)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
 8001394:	e000      	b.n	8001398 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
}
 8001398:	4618      	mov	r0, r3
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000010 	.word	0x20000010
 80013a4:	20000018 	.word	0x20000018
 80013a8:	20000014 	.word	0x20000014

080013ac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x20>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_IncTick+0x24>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <HAL_IncTick+0x24>)
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	20000018 	.word	0x20000018
 80013d0:	200001e4 	.word	0x200001e4

080013d4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013d8:	4b03      	ldr	r3, [pc, #12]	; (80013e8 <HAL_GetTick+0x14>)
 80013da:	681b      	ldr	r3, [r3, #0]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	200001e4 	.word	0x200001e4

080013ec <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b09a      	sub	sp, #104	; 0x68
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001408:	2301      	movs	r3, #1
 800140a:	e1e3      	b.n	80017d4 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001416:	f003 0310 	and.w	r3, r3, #16
 800141a:	2b00      	cmp	r3, #0
 800141c:	d176      	bne.n	800150c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	2b00      	cmp	r3, #0
 8001424:	d152      	bne.n	80014cc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2200      	movs	r2, #0
 800142a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2200      	movs	r2, #0
 8001430:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	2200      	movs	r2, #0
 8001436:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2200      	movs	r2, #0
 800143c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff fdf9 	bl	8001038 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d13b      	bne.n	80014cc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f001 f861 	bl	800251c <ADC_Disable>
 800145a:	4603      	mov	r3, r0
 800145c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d12f      	bne.n	80014cc <HAL_ADC_Init+0xe0>
 800146c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001470:	2b00      	cmp	r3, #0
 8001472:	d12b      	bne.n	80014cc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800147c:	f023 0302 	bic.w	r3, r3, #2
 8001480:	f043 0202 	orr.w	r2, r3, #2
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001496:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689a      	ldr	r2, [r3, #8]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014a6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a8:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_ADC_Init+0x308>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4a92      	ldr	r2, [pc, #584]	; (80016f8 <HAL_ADC_Init+0x30c>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9a      	lsrs	r2, r3, #18
 80014b4:	4613      	mov	r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014be:	e002      	b.n	80014c6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d1f9      	bne.n	80014c0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	689b      	ldr	r3, [r3, #8]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80014e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80014e8:	d110      	bne.n	800150c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ee:	f023 0312 	bic.w	r3, r3, #18
 80014f2:	f043 0210 	orr.w	r2, r3, #16
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f043 0201 	orr.w	r2, r3, #1
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001506:	2301      	movs	r3, #1
 8001508:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	f003 0310 	and.w	r3, r3, #16
 8001514:	2b00      	cmp	r3, #0
 8001516:	f040 8150 	bne.w	80017ba <HAL_ADC_Init+0x3ce>
 800151a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800151e:	2b00      	cmp	r3, #0
 8001520:	f040 814b 	bne.w	80017ba <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 8143 	bne.w	80017ba <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001538:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800153c:	f043 0202 	orr.w	r2, r3, #2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800154c:	d004      	beq.n	8001558 <HAL_ADC_Init+0x16c>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a6a      	ldr	r2, [pc, #424]	; (80016fc <HAL_ADC_Init+0x310>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_ADC_Init+0x170>
 8001558:	4b69      	ldr	r3, [pc, #420]	; (8001700 <HAL_ADC_Init+0x314>)
 800155a:	e000      	b.n	800155e <HAL_ADC_Init+0x172>
 800155c:	4b69      	ldr	r3, [pc, #420]	; (8001704 <HAL_ADC_Init+0x318>)
 800155e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001568:	d102      	bne.n	8001570 <HAL_ADC_Init+0x184>
 800156a:	4b64      	ldr	r3, [pc, #400]	; (80016fc <HAL_ADC_Init+0x310>)
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	e01a      	b.n	80015a6 <HAL_ADC_Init+0x1ba>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a61      	ldr	r2, [pc, #388]	; (80016fc <HAL_ADC_Init+0x310>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d103      	bne.n	8001582 <HAL_ADC_Init+0x196>
 800157a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	e011      	b.n	80015a6 <HAL_ADC_Init+0x1ba>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a60      	ldr	r2, [pc, #384]	; (8001708 <HAL_ADC_Init+0x31c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d102      	bne.n	8001592 <HAL_ADC_Init+0x1a6>
 800158c:	4b5f      	ldr	r3, [pc, #380]	; (800170c <HAL_ADC_Init+0x320>)
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	e009      	b.n	80015a6 <HAL_ADC_Init+0x1ba>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a5d      	ldr	r2, [pc, #372]	; (800170c <HAL_ADC_Init+0x320>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d102      	bne.n	80015a2 <HAL_ADC_Init+0x1b6>
 800159c:	4b5a      	ldr	r3, [pc, #360]	; (8001708 <HAL_ADC_Init+0x31c>)
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	e001      	b.n	80015a6 <HAL_ADC_Init+0x1ba>
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d108      	bne.n	80015c6 <HAL_ADC_Init+0x1da>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0301 	and.w	r3, r3, #1
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Init+0x1da>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <HAL_ADC_Init+0x1dc>
 80015c6:	2300      	movs	r3, #0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d11c      	bne.n	8001606 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015cc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d010      	beq.n	80015f4 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	f003 0303 	and.w	r3, r3, #3
 80015da:	2b01      	cmp	r3, #1
 80015dc:	d107      	bne.n	80015ee <HAL_ADC_Init+0x202>
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_ADC_Init+0x202>
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <HAL_ADC_Init+0x204>
 80015ee:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d108      	bne.n	8001606 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 80015f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	431a      	orrs	r2, r3
 8001602:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001604:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	7e5b      	ldrb	r3, [r3, #25]
 800160a:	035b      	lsls	r3, r3, #13
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001610:	2a01      	cmp	r2, #1
 8001612:	d002      	beq.n	800161a <HAL_ADC_Init+0x22e>
 8001614:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001618:	e000      	b.n	800161c <HAL_ADC_Init+0x230>
 800161a:	2200      	movs	r2, #0
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	4313      	orrs	r3, r2
 800162a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800162c:	4313      	orrs	r3, r2
 800162e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d11b      	bne.n	8001672 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	7e5b      	ldrb	r3, [r3, #25]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d109      	bne.n	8001656 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001646:	3b01      	subs	r3, #1
 8001648:	045a      	lsls	r2, r3, #17
 800164a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800164c:	4313      	orrs	r3, r2
 800164e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001652:	663b      	str	r3, [r7, #96]	; 0x60
 8001654:	e00d      	b.n	8001672 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800165e:	f043 0220 	orr.w	r2, r3, #32
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001676:	2b01      	cmp	r3, #1
 8001678:	d054      	beq.n	8001724 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a22      	ldr	r2, [pc, #136]	; (8001708 <HAL_ADC_Init+0x31c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d004      	beq.n	800168e <HAL_ADC_Init+0x2a2>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a20      	ldr	r2, [pc, #128]	; (800170c <HAL_ADC_Init+0x320>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d140      	bne.n	8001710 <HAL_ADC_Init+0x324>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001692:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 8001696:	d02a      	beq.n	80016ee <HAL_ADC_Init+0x302>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016a0:	d022      	beq.n	80016e8 <HAL_ADC_Init+0x2fc>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016a6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80016aa:	d01a      	beq.n	80016e2 <HAL_ADC_Init+0x2f6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80016b4:	d012      	beq.n	80016dc <HAL_ADC_Init+0x2f0>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ba:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80016be:	d00a      	beq.n	80016d6 <HAL_ADC_Init+0x2ea>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80016c8:	d002      	beq.n	80016d0 <HAL_ADC_Init+0x2e4>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ce:	e023      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016d0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016d4:	e020      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80016da:	e01d      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016dc:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80016e0:	e01a      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016e6:	e017      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016e8:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 80016ec:	e014      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016ee:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80016f2:	e011      	b.n	8001718 <HAL_ADC_Init+0x32c>
 80016f4:	20000010 	.word	0x20000010
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	50000100 	.word	0x50000100
 8001700:	50000300 	.word	0x50000300
 8001704:	50000700 	.word	0x50000700
 8001708:	50000400 	.word	0x50000400
 800170c:	50000500 	.word	0x50000500
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800171c:	4313      	orrs	r3, r2
 800171e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001720:	4313      	orrs	r3, r2
 8001722:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b00      	cmp	r3, #0
 8001730:	d114      	bne.n	800175c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6812      	ldr	r2, [r2, #0]
 800173c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001740:	f023 0302 	bic.w	r3, r3, #2
 8001744:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	7e1b      	ldrb	r3, [r3, #24]
 800174a:	039a      	lsls	r2, r3, #14
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4313      	orrs	r3, r2
 8001756:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001758:	4313      	orrs	r3, r2
 800175a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68da      	ldr	r2, [r3, #12]
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <HAL_ADC_Init+0x3f0>)
 8001764:	4013      	ands	r3, r2
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	6812      	ldr	r2, [r2, #0]
 800176a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800176c:	430b      	orrs	r3, r1
 800176e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b01      	cmp	r3, #1
 8001776:	d10c      	bne.n	8001792 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f023 010f 	bic.w	r1, r3, #15
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69db      	ldr	r3, [r3, #28]
 8001786:	1e5a      	subs	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	631a      	str	r2, [r3, #48]	; 0x30
 8001790:	e007      	b.n	80017a2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f022 020f 	bic.w	r2, r2, #15
 80017a0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f023 0303 	bic.w	r3, r3, #3
 80017b0:	f043 0201 	orr.w	r2, r3, #1
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	641a      	str	r2, [r3, #64]	; 0x40
 80017b8:	e00a      	b.n	80017d0 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f023 0312 	bic.w	r3, r3, #18
 80017c2:	f043 0210 	orr.w	r2, r3, #16
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80017ca:	2301      	movs	r3, #1
 80017cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80017d0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3768      	adds	r7, #104	; 0x68
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	fff0c007 	.word	0xfff0c007

080017e0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	f003 0304 	and.w	r3, r3, #4
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80f9 	bne.w	80019ee <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001802:	2b01      	cmp	r3, #1
 8001804:	d101      	bne.n	800180a <HAL_ADC_Start+0x2a>
 8001806:	2302      	movs	r3, #2
 8001808:	e0f4      	b.n	80019f4 <HAL_ADC_Start+0x214>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 fe1e 	bl	8002454 <ADC_Enable>
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800181c:	7bfb      	ldrb	r3, [r7, #15]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 80e0 	bne.w	80019e4 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001828:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800182c:	f023 0301 	bic.w	r3, r3, #1
 8001830:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001840:	d004      	beq.n	800184c <HAL_ADC_Start+0x6c>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a6d      	ldr	r2, [pc, #436]	; (80019fc <HAL_ADC_Start+0x21c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d106      	bne.n	800185a <HAL_ADC_Start+0x7a>
 800184c:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_ADC_Start+0x220>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 031f 	and.w	r3, r3, #31
 8001854:	2b00      	cmp	r3, #0
 8001856:	d010      	beq.n	800187a <HAL_ADC_Start+0x9a>
 8001858:	e005      	b.n	8001866 <HAL_ADC_Start+0x86>
 800185a:	4b6a      	ldr	r3, [pc, #424]	; (8001a04 <HAL_ADC_Start+0x224>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f003 031f 	and.w	r3, r3, #31
 8001862:	2b00      	cmp	r3, #0
 8001864:	d009      	beq.n	800187a <HAL_ADC_Start+0x9a>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800186e:	d004      	beq.n	800187a <HAL_ADC_Start+0x9a>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a64      	ldr	r2, [pc, #400]	; (8001a08 <HAL_ADC_Start+0x228>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d115      	bne.n	80018a6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800187e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d036      	beq.n	8001902 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001898:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800189c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018a4:	e02d      	b.n	8001902 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ba:	d004      	beq.n	80018c6 <HAL_ADC_Start+0xe6>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_ADC_Start+0x21c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10a      	bne.n	80018dc <HAL_ADC_Start+0xfc>
 80018c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	bf14      	ite	ne
 80018d4:	2301      	movne	r3, #1
 80018d6:	2300      	moveq	r3, #0
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	e008      	b.n	80018ee <HAL_ADC_Start+0x10e>
 80018dc:	4b4a      	ldr	r3, [pc, #296]	; (8001a08 <HAL_ADC_Start+0x228>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	bf14      	ite	ne
 80018e8:	2301      	movne	r3, #1
 80018ea:	2300      	moveq	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800190a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800190e:	d106      	bne.n	800191e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f023 0206 	bic.w	r2, r3, #6
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
 800191c:	e002      	b.n	8001924 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2200      	movs	r2, #0
 8001928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	221c      	movs	r2, #28
 8001932:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800193c:	d004      	beq.n	8001948 <HAL_ADC_Start+0x168>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2e      	ldr	r2, [pc, #184]	; (80019fc <HAL_ADC_Start+0x21c>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d106      	bne.n	8001956 <HAL_ADC_Start+0x176>
 8001948:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_ADC_Start+0x220>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 031f 	and.w	r3, r3, #31
 8001950:	2b00      	cmp	r3, #0
 8001952:	d03e      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 8001954:	e005      	b.n	8001962 <HAL_ADC_Start+0x182>
 8001956:	4b2b      	ldr	r3, [pc, #172]	; (8001a04 <HAL_ADC_Start+0x224>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 031f 	and.w	r3, r3, #31
 800195e:	2b00      	cmp	r3, #0
 8001960:	d037      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800196a:	d004      	beq.n	8001976 <HAL_ADC_Start+0x196>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	4a22      	ldr	r2, [pc, #136]	; (80019fc <HAL_ADC_Start+0x21c>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d106      	bne.n	8001984 <HAL_ADC_Start+0x1a4>
 8001976:	4b22      	ldr	r3, [pc, #136]	; (8001a00 <HAL_ADC_Start+0x220>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 031f 	and.w	r3, r3, #31
 800197e:	2b05      	cmp	r3, #5
 8001980:	d027      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 8001982:	e005      	b.n	8001990 <HAL_ADC_Start+0x1b0>
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <HAL_ADC_Start+0x224>)
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 031f 	and.w	r3, r3, #31
 800198c:	2b05      	cmp	r3, #5
 800198e:	d020      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001998:	d004      	beq.n	80019a4 <HAL_ADC_Start+0x1c4>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a17      	ldr	r2, [pc, #92]	; (80019fc <HAL_ADC_Start+0x21c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_Start+0x1d2>
 80019a4:	4b16      	ldr	r3, [pc, #88]	; (8001a00 <HAL_ADC_Start+0x220>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 031f 	and.w	r3, r3, #31
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d010      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 80019b0:	e005      	b.n	80019be <HAL_ADC_Start+0x1de>
 80019b2:	4b14      	ldr	r3, [pc, #80]	; (8001a04 <HAL_ADC_Start+0x224>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	f003 031f 	and.w	r3, r3, #31
 80019ba:	2b09      	cmp	r3, #9
 80019bc:	d009      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c6:	d004      	beq.n	80019d2 <HAL_ADC_Start+0x1f2>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <HAL_ADC_Start+0x228>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d10f      	bne.n	80019f2 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f042 0204 	orr.w	r2, r2, #4
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	e006      	b.n	80019f2 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80019ec:	e001      	b.n	80019f2 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019ee:	2302      	movs	r3, #2
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80019f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3710      	adds	r7, #16
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	50000100 	.word	0x50000100
 8001a00:	50000300 	.word	0x50000300
 8001a04:	50000700 	.word	0x50000700
 8001a08:	50000400 	.word	0x50000400

08001a0c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a14:	2300      	movs	r3, #0
 8001a16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a1e:	2b01      	cmp	r3, #1
 8001a20:	d101      	bne.n	8001a26 <HAL_ADC_Stop+0x1a>
 8001a22:	2302      	movs	r3, #2
 8001a24:	e023      	b.n	8001a6e <HAL_ADC_Stop+0x62>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001a2e:	216c      	movs	r1, #108	; 0x6c
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 fdd9 	bl	80025e8 <ADC_ConversionStop>
 8001a36:	4603      	mov	r3, r0
 8001a38:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001a3a:	7bfb      	ldrb	r3, [r7, #15]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d111      	bne.n	8001a64 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f000 fd6b 	bl	800251c <ADC_Disable>
 8001a46:	4603      	mov	r3, r0
 8001a48:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001a4a:	7bfb      	ldrb	r3, [r7, #15]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d109      	bne.n	8001a64 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a58:	f023 0301 	bic.w	r3, r3, #1
 8001a5c:	f043 0201 	orr.w	r2, r3, #1
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	2b08      	cmp	r3, #8
 8001a8c:	d102      	bne.n	8001a94 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001a8e:	2308      	movs	r3, #8
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e03a      	b.n	8001b0a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a9c:	d004      	beq.n	8001aa8 <HAL_ADC_PollForConversion+0x30>
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a72      	ldr	r2, [pc, #456]	; (8001c6c <HAL_ADC_PollForConversion+0x1f4>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d101      	bne.n	8001aac <HAL_ADC_PollForConversion+0x34>
 8001aa8:	4b71      	ldr	r3, [pc, #452]	; (8001c70 <HAL_ADC_PollForConversion+0x1f8>)
 8001aaa:	e000      	b.n	8001aae <HAL_ADC_PollForConversion+0x36>
 8001aac:	4b71      	ldr	r3, [pc, #452]	; (8001c74 <HAL_ADC_PollForConversion+0x1fc>)
 8001aae:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	689b      	ldr	r3, [r3, #8]
 8001ab4:	f003 031f 	and.w	r3, r3, #31
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d112      	bne.n	8001ae2 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d11d      	bne.n	8001b06 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f043 0220 	orr.w	r2, r3, #32
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0bf      	b.n	8001c62 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d00b      	beq.n	8001b06 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	f043 0220 	orr.w	r2, r3, #32
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2200      	movs	r2, #0
 8001afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001b02:	2301      	movs	r3, #1
 8001b04:	e0ad      	b.n	8001c62 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001b06:	230c      	movs	r3, #12
 8001b08:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b12:	d004      	beq.n	8001b1e <HAL_ADC_PollForConversion+0xa6>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a54      	ldr	r2, [pc, #336]	; (8001c6c <HAL_ADC_PollForConversion+0x1f4>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d106      	bne.n	8001b2c <HAL_ADC_PollForConversion+0xb4>
 8001b1e:	4b54      	ldr	r3, [pc, #336]	; (8001c70 <HAL_ADC_PollForConversion+0x1f8>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f003 031f 	and.w	r3, r3, #31
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d010      	beq.n	8001b4c <HAL_ADC_PollForConversion+0xd4>
 8001b2a:	e005      	b.n	8001b38 <HAL_ADC_PollForConversion+0xc0>
 8001b2c:	4b51      	ldr	r3, [pc, #324]	; (8001c74 <HAL_ADC_PollForConversion+0x1fc>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	f003 031f 	and.w	r3, r3, #31
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <HAL_ADC_PollForConversion+0xd4>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b40:	d004      	beq.n	8001b4c <HAL_ADC_PollForConversion+0xd4>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4c      	ldr	r2, [pc, #304]	; (8001c78 <HAL_ADC_PollForConversion+0x200>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d104      	bne.n	8001b56 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68db      	ldr	r3, [r3, #12]
 8001b52:	613b      	str	r3, [r7, #16]
 8001b54:	e00f      	b.n	8001b76 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5e:	d004      	beq.n	8001b6a <HAL_ADC_PollForConversion+0xf2>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a41      	ldr	r2, [pc, #260]	; (8001c6c <HAL_ADC_PollForConversion+0x1f4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d102      	bne.n	8001b70 <HAL_ADC_PollForConversion+0xf8>
 8001b6a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b6e:	e000      	b.n	8001b72 <HAL_ADC_PollForConversion+0xfa>
 8001b70:	4b41      	ldr	r3, [pc, #260]	; (8001c78 <HAL_ADC_PollForConversion+0x200>)
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001b76:	f7ff fc2d 	bl	80013d4 <HAL_GetTick>
 8001b7a:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b7c:	e021      	b.n	8001bc2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b84:	d01d      	beq.n	8001bc2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d007      	beq.n	8001b9c <HAL_ADC_PollForConversion+0x124>
 8001b8c:	f7ff fc22 	bl	80013d4 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	683a      	ldr	r2, [r7, #0]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d212      	bcs.n	8001bc2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d10b      	bne.n	8001bc2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f043 0204 	orr.w	r2, r3, #4
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e04f      	b.n	8001c62 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d0d6      	beq.n	8001b7e <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d131      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d12c      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 0308 	and.w	r3, r3, #8
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d125      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d112      	bne.n	8001c36 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d112      	bne.n	8001c4e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f043 0201 	orr.w	r2, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	; 0x40
 8001c34:	e00b      	b.n	8001c4e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3a:	f043 0220 	orr.w	r2, r3, #32
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f043 0201 	orr.w	r2, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d103      	bne.n	8001c60 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3718      	adds	r7, #24
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	50000100 	.word	0x50000100
 8001c70:	50000300 	.word	0x50000300
 8001c74:	50000700 	.word	0x50000700
 8001c78:	50000400 	.word	0x50000400

08001c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
	...

08001c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b09b      	sub	sp, #108	; 0x6c
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_ConfigChannel+0x22>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e2cb      	b.n	8002252 <HAL_ADC_ConfigChannel+0x5ba>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 82af 	bne.w	8002230 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d81c      	bhi.n	8001d14 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685a      	ldr	r2, [r3, #4]
 8001ce4:	4613      	mov	r3, r2
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	461a      	mov	r2, r3
 8001cee:	231f      	movs	r3, #31
 8001cf0:	4093      	lsls	r3, r2
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	4019      	ands	r1, r3
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6818      	ldr	r0, [r3, #0]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	fa00 f203 	lsl.w	r2, r0, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	430a      	orrs	r2, r1
 8001d10:	631a      	str	r2, [r3, #48]	; 0x30
 8001d12:	e063      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d81e      	bhi.n	8001d5a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	4613      	mov	r3, r2
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	4413      	add	r3, r2
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	3b1e      	subs	r3, #30
 8001d30:	221f      	movs	r2, #31
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4019      	ands	r1, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6818      	ldr	r0, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	685a      	ldr	r2, [r3, #4]
 8001d42:	4613      	mov	r3, r2
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	4413      	add	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	3b1e      	subs	r3, #30
 8001d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	635a      	str	r2, [r3, #52]	; 0x34
 8001d58:	e040      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	2b0e      	cmp	r3, #14
 8001d60:	d81e      	bhi.n	8001da0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685a      	ldr	r2, [r3, #4]
 8001d6c:	4613      	mov	r3, r2
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	4413      	add	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	3b3c      	subs	r3, #60	; 0x3c
 8001d76:	221f      	movs	r2, #31
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	4019      	ands	r1, r3
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	6818      	ldr	r0, [r3, #0]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	4413      	add	r3, r2
 8001d8e:	005b      	lsls	r3, r3, #1
 8001d90:	3b3c      	subs	r3, #60	; 0x3c
 8001d92:	fa00 f203 	lsl.w	r2, r0, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	430a      	orrs	r2, r1
 8001d9c:	639a      	str	r2, [r3, #56]	; 0x38
 8001d9e:	e01d      	b.n	8001ddc <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	4613      	mov	r3, r2
 8001dac:	005b      	lsls	r3, r3, #1
 8001dae:	4413      	add	r3, r2
 8001db0:	005b      	lsls	r3, r3, #1
 8001db2:	3b5a      	subs	r3, #90	; 0x5a
 8001db4:	221f      	movs	r2, #31
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	4019      	ands	r1, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	4413      	add	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	3b5a      	subs	r3, #90	; 0x5a
 8001dd0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	430a      	orrs	r2, r1
 8001dda:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f003 030c 	and.w	r3, r3, #12
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	f040 80e5 	bne.w	8001fb6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b09      	cmp	r3, #9
 8001df2:	d91c      	bls.n	8001e2e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	6999      	ldr	r1, [r3, #24]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	3b1e      	subs	r3, #30
 8001e06:	2207      	movs	r2, #7
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	43db      	mvns	r3, r3
 8001e0e:	4019      	ands	r1, r3
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	6898      	ldr	r0, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b1e      	subs	r3, #30
 8001e20:	fa00 f203 	lsl.w	r2, r0, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	619a      	str	r2, [r3, #24]
 8001e2c:	e019      	b.n	8001e62 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	6959      	ldr	r1, [r3, #20]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4613      	mov	r3, r2
 8001e3a:	005b      	lsls	r3, r3, #1
 8001e3c:	4413      	add	r3, r2
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	430a      	orrs	r2, r1
 8001e60:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	695a      	ldr	r2, [r3, #20]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	08db      	lsrs	r3, r3, #3
 8001e6e:	f003 0303 	and.w	r3, r3, #3
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b03      	cmp	r3, #3
 8001e82:	d84f      	bhi.n	8001f24 <HAL_ADC_ConfigChannel+0x28c>
 8001e84:	a201      	add	r2, pc, #4	; (adr r2, 8001e8c <HAL_ADC_ConfigChannel+0x1f4>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001e9d 	.word	0x08001e9d
 8001e90:	08001ebf 	.word	0x08001ebf
 8001e94:	08001ee1 	.word	0x08001ee1
 8001e98:	08001f03 	.word	0x08001f03
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ea2:	4b9f      	ldr	r3, [pc, #636]	; (8002120 <HAL_ADC_ConfigChannel+0x488>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	683a      	ldr	r2, [r7, #0]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	0691      	lsls	r1, r2, #26
 8001eac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001eba:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ebc:	e07e      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001ec4:	4b96      	ldr	r3, [pc, #600]	; (8002120 <HAL_ADC_ConfigChannel+0x488>)
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	6812      	ldr	r2, [r2, #0]
 8001ecc:	0691      	lsls	r1, r2, #26
 8001ece:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	431a      	orrs	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001edc:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ede:	e06d      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001ee6:	4b8e      	ldr	r3, [pc, #568]	; (8002120 <HAL_ADC_ConfigChannel+0x488>)
 8001ee8:	4013      	ands	r3, r2
 8001eea:	683a      	ldr	r2, [r7, #0]
 8001eec:	6812      	ldr	r2, [r2, #0]
 8001eee:	0691      	lsls	r1, r2, #26
 8001ef0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	431a      	orrs	r2, r3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001efe:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f00:	e05c      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f08:	4b85      	ldr	r3, [pc, #532]	; (8002120 <HAL_ADC_ConfigChannel+0x488>)
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	6812      	ldr	r2, [r2, #0]
 8001f10:	0691      	lsls	r1, r2, #26
 8001f12:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f14:	430a      	orrs	r2, r1
 8001f16:	431a      	orrs	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f20:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f22:	e04b      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f2a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	069b      	lsls	r3, r3, #26
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d107      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f46:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	069b      	lsls	r3, r3, #26
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d107      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f6a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	069b      	lsls	r3, r3, #26
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d107      	bne.n	8001f90 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f8e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	069b      	lsls	r3, r3, #26
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d10a      	bne.n	8001fba <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fb2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fb4:	e001      	b.n	8001fba <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <HAL_ADC_ConfigChannel+0x324>
      break;
 8001fba:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 0303 	and.w	r3, r3, #3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d108      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x344>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d101      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x344>
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e000      	b.n	8001fde <HAL_ADC_ConfigChannel+0x346>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	f040 8131 	bne.w	8002246 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d00f      	beq.n	800200c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffe:	43da      	mvns	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	400a      	ands	r2, r1
 8002006:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800200a:	e049      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	2201      	movs	r2, #1
 800201a:	409a      	lsls	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b09      	cmp	r3, #9
 800202c:	d91c      	bls.n	8002068 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6999      	ldr	r1, [r3, #24]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681a      	ldr	r2, [r3, #0]
 8002038:	4613      	mov	r3, r2
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4413      	add	r3, r2
 800203e:	3b1b      	subs	r3, #27
 8002040:	2207      	movs	r2, #7
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	4019      	ands	r1, r3
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6898      	ldr	r0, [r3, #8]
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	3b1b      	subs	r3, #27
 800205a:	fa00 f203 	lsl.w	r2, r0, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	619a      	str	r2, [r3, #24]
 8002066:	e01b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6959      	ldr	r1, [r3, #20]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	1c5a      	adds	r2, r3, #1
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	2207      	movs	r2, #7
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	4019      	ands	r1, r3
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	6898      	ldr	r0, [r3, #8]
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	fa00 f203 	lsl.w	r2, r0, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	430a      	orrs	r2, r1
 800209e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020a8:	d004      	beq.n	80020b4 <HAL_ADC_ConfigChannel+0x41c>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_ADC_ConfigChannel+0x48c>)
 80020b0:	4293      	cmp	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_ADC_ConfigChannel+0x420>
 80020b4:	4b1c      	ldr	r3, [pc, #112]	; (8002128 <HAL_ADC_ConfigChannel+0x490>)
 80020b6:	e000      	b.n	80020ba <HAL_ADC_ConfigChannel+0x422>
 80020b8:	4b1c      	ldr	r3, [pc, #112]	; (800212c <HAL_ADC_ConfigChannel+0x494>)
 80020ba:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2b10      	cmp	r3, #16
 80020c2:	d105      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d015      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020d4:	2b11      	cmp	r3, #17
 80020d6:	d105      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020d8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d00b      	beq.n	80020fc <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020e8:	2b12      	cmp	r3, #18
 80020ea:	f040 80ac 	bne.w	8002246 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80020ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 80a5 	bne.w	8002246 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002104:	d102      	bne.n	800210c <HAL_ADC_ConfigChannel+0x474>
 8002106:	4b07      	ldr	r3, [pc, #28]	; (8002124 <HAL_ADC_ConfigChannel+0x48c>)
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	e023      	b.n	8002154 <HAL_ADC_ConfigChannel+0x4bc>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <HAL_ADC_ConfigChannel+0x48c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d10c      	bne.n	8002130 <HAL_ADC_ConfigChannel+0x498>
 8002116:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e01a      	b.n	8002154 <HAL_ADC_ConfigChannel+0x4bc>
 800211e:	bf00      	nop
 8002120:	83fff000 	.word	0x83fff000
 8002124:	50000100 	.word	0x50000100
 8002128:	50000300 	.word	0x50000300
 800212c:	50000700 	.word	0x50000700
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a4a      	ldr	r2, [pc, #296]	; (8002260 <HAL_ADC_ConfigChannel+0x5c8>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d102      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x4a8>
 800213a:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_ADC_ConfigChannel+0x5cc>)
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	e009      	b.n	8002154 <HAL_ADC_ConfigChannel+0x4bc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a47      	ldr	r2, [pc, #284]	; (8002264 <HAL_ADC_ConfigChannel+0x5cc>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d102      	bne.n	8002150 <HAL_ADC_ConfigChannel+0x4b8>
 800214a:	4b45      	ldr	r3, [pc, #276]	; (8002260 <HAL_ADC_ConfigChannel+0x5c8>)
 800214c:	60fb      	str	r3, [r7, #12]
 800214e:	e001      	b.n	8002154 <HAL_ADC_ConfigChannel+0x4bc>
 8002150:	2300      	movs	r3, #0
 8002152:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 0303 	and.w	r3, r3, #3
 800215e:	2b01      	cmp	r3, #1
 8002160:	d108      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x4dc>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0301 	and.w	r3, r3, #1
 800216c:	2b01      	cmp	r3, #1
 800216e:	d101      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x4dc>
 8002170:	2301      	movs	r3, #1
 8002172:	e000      	b.n	8002176 <HAL_ADC_ConfigChannel+0x4de>
 8002174:	2300      	movs	r3, #0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d150      	bne.n	800221c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800217a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800217c:	2b00      	cmp	r3, #0
 800217e:	d010      	beq.n	80021a2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f003 0303 	and.w	r3, r3, #3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_ADC_ConfigChannel+0x504>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_ADC_ConfigChannel+0x504>
 8002198:	2301      	movs	r3, #1
 800219a:	e000      	b.n	800219e <HAL_ADC_ConfigChannel+0x506>
 800219c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d13c      	bne.n	800221c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2b10      	cmp	r3, #16
 80021a8:	d11d      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x54e>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021b2:	d118      	bne.n	80021e6 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80021b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021be:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_ADC_ConfigChannel+0x5d0>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <HAL_ADC_ConfigChannel+0x5d4>)
 80021c6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ca:	0c9a      	lsrs	r2, r3, #18
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021d6:	e002      	b.n	80021de <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	3b01      	subs	r3, #1
 80021dc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f9      	bne.n	80021d8 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021e4:	e02e      	b.n	8002244 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b11      	cmp	r3, #17
 80021ec:	d10b      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x56e>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021f6:	d106      	bne.n	8002206 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021fa:	689b      	ldr	r3, [r3, #8]
 80021fc:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002202:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002204:	e01e      	b.n	8002244 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2b12      	cmp	r3, #18
 800220c:	d11a      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800220e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002216:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002218:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800221a:	e013      	b.n	8002244 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800222e:	e00a      	b.n	8002246 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002234:	f043 0220 	orr.w	r2, r3, #32
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002242:	e000      	b.n	8002246 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002244:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2200      	movs	r2, #0
 800224a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800224e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002252:	4618      	mov	r0, r3
 8002254:	376c      	adds	r7, #108	; 0x6c
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	50000400 	.word	0x50000400
 8002264:	50000500 	.word	0x50000500
 8002268:	20000010 	.word	0x20000010
 800226c:	431bde83 	.word	0x431bde83

08002270 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002270:	b480      	push	{r7}
 8002272:	b099      	sub	sp, #100	; 0x64
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800227a:	2300      	movs	r3, #0
 800227c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002288:	d102      	bne.n	8002290 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800228a:	4b6d      	ldr	r3, [pc, #436]	; (8002440 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800228c:	60bb      	str	r3, [r7, #8]
 800228e:	e01a      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a6a      	ldr	r2, [pc, #424]	; (8002440 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d103      	bne.n	80022a2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800229a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	e011      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a67      	ldr	r2, [pc, #412]	; (8002444 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d102      	bne.n	80022b2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80022ac:	4b66      	ldr	r3, [pc, #408]	; (8002448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022ae:	60bb      	str	r3, [r7, #8]
 80022b0:	e009      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a64      	ldr	r2, [pc, #400]	; (8002448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d102      	bne.n	80022c2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80022bc:	4b61      	ldr	r3, [pc, #388]	; (8002444 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80022be:	60bb      	str	r3, [r7, #8]
 80022c0:	e001      	b.n	80022c6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d101      	bne.n	80022d0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80022cc:	2301      	movs	r3, #1
 80022ce:	e0b0      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d101      	bne.n	80022de <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80022da:	2302      	movs	r3, #2
 80022dc:	e0a9      	b.n	8002432 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2201      	movs	r2, #1
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f040 808d 	bne.w	8002410 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f040 8086 	bne.w	8002410 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800230c:	d004      	beq.n	8002318 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a4b      	ldr	r2, [pc, #300]	; (8002440 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002318:	4b4c      	ldr	r3, [pc, #304]	; (800244c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800231a:	e000      	b.n	800231e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800231c:	4b4c      	ldr	r3, [pc, #304]	; (8002450 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800231e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d040      	beq.n	80023aa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002328:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6859      	ldr	r1, [r3, #4]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800233a:	035b      	lsls	r3, r3, #13
 800233c:	430b      	orrs	r3, r1
 800233e:	431a      	orrs	r2, r3
 8002340:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002342:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0303 	and.w	r3, r3, #3
 800234e:	2b01      	cmp	r3, #1
 8002350:	d108      	bne.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8002360:	2301      	movs	r3, #1
 8002362:	e000      	b.n	8002366 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8002364:	2300      	movs	r3, #0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d15c      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	2b01      	cmp	r3, #1
 8002374:	d107      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0301 	and.w	r3, r3, #1
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002386:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002388:	2b00      	cmp	r3, #0
 800238a:	d14b      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800238c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002394:	f023 030f 	bic.w	r3, r3, #15
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	6811      	ldr	r1, [r2, #0]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	6892      	ldr	r2, [r2, #8]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	431a      	orrs	r2, r3
 80023a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023a6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80023a8:	e03c      	b.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80023aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80023b4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d108      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80023d6:	2300      	movs	r3, #0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d123      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 0303 	and.w	r3, r3, #3
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d107      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0301 	and.w	r3, r3, #1
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d101      	bne.n	80023f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80023f4:	2301      	movs	r3, #1
 80023f6:	e000      	b.n	80023fa <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 80023f8:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d112      	bne.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80023fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002406:	f023 030f 	bic.w	r3, r3, #15
 800240a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800240c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800240e:	e009      	b.n	8002424 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f043 0220 	orr.w	r2, r3, #32
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002422:	e000      	b.n	8002426 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002424:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2200      	movs	r2, #0
 800242a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800242e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002432:	4618      	mov	r0, r3
 8002434:	3764      	adds	r7, #100	; 0x64
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	50000100 	.word	0x50000100
 8002444:	50000400 	.word	0x50000400
 8002448:	50000500 	.word	0x50000500
 800244c:	50000300 	.word	0x50000300
 8002450:	50000700 	.word	0x50000700

08002454 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800245c:	2300      	movs	r3, #0
 800245e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	2b01      	cmp	r3, #1
 800246c:	d108      	bne.n	8002480 <ADC_Enable+0x2c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0301 	and.w	r3, r3, #1
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <ADC_Enable+0x2c>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <ADC_Enable+0x2e>
 8002480:	2300      	movs	r3, #0
 8002482:	2b00      	cmp	r3, #0
 8002484:	d143      	bne.n	800250e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	4b22      	ldr	r3, [pc, #136]	; (8002518 <ADC_Enable+0xc4>)
 800248e:	4013      	ands	r3, r2
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00d      	beq.n	80024b0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0210 	orr.w	r2, r3, #16
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e02f      	b.n	8002510 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80024c0:	f7fe ff88 	bl	80013d4 <HAL_GetTick>
 80024c4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024c6:	e01b      	b.n	8002500 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80024c8:	f7fe ff84 	bl	80013d4 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d914      	bls.n	8002500 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d00d      	beq.n	8002500 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	f043 0210 	orr.w	r2, r3, #16
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	f043 0201 	orr.w	r2, r3, #1
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e007      	b.n	8002510 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b01      	cmp	r3, #1
 800250c:	d1dc      	bne.n	80024c8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	8000003f 	.word	0x8000003f

0800251c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002524:	2300      	movs	r3, #0
 8002526:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	2b01      	cmp	r3, #1
 8002534:	d108      	bne.n	8002548 <ADC_Disable+0x2c>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d101      	bne.n	8002548 <ADC_Disable+0x2c>
 8002544:	2301      	movs	r3, #1
 8002546:	e000      	b.n	800254a <ADC_Disable+0x2e>
 8002548:	2300      	movs	r3, #0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d047      	beq.n	80025de <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030d 	and.w	r3, r3, #13
 8002558:	2b01      	cmp	r3, #1
 800255a:	d10f      	bne.n	800257c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f042 0202 	orr.w	r2, r2, #2
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2203      	movs	r2, #3
 8002572:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002574:	f7fe ff2e 	bl	80013d4 <HAL_GetTick>
 8002578:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800257a:	e029      	b.n	80025d0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0210 	orr.w	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e023      	b.n	80025e0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002598:	f7fe ff1c 	bl	80013d4 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d914      	bls.n	80025d0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 0301 	and.w	r3, r3, #1
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d10d      	bne.n	80025d0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	f043 0210 	orr.w	r2, r3, #16
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	f043 0201 	orr.w	r2, r3, #1
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e007      	b.n	80025e0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d0dc      	beq.n	8002598 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 809a 	beq.w	8002742 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002618:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800261c:	d12a      	bne.n	8002674 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8002622:	2b01      	cmp	r3, #1
 8002624:	d126      	bne.n	8002674 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800262a:	2b01      	cmp	r3, #1
 800262c:	d122      	bne.n	8002674 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800262e:	230c      	movs	r3, #12
 8002630:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8002632:	e014      	b.n	800265e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	4a45      	ldr	r2, [pc, #276]	; (800274c <ADC_ConversionStop+0x164>)
 8002638:	4293      	cmp	r3, r2
 800263a:	d90d      	bls.n	8002658 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	f043 0210 	orr.w	r2, r3, #16
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e075      	b.n	8002744 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	3301      	adds	r3, #1
 800265c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002668:	2b40      	cmp	r3, #64	; 0x40
 800266a:	d1e3      	bne.n	8002634 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2240      	movs	r2, #64	; 0x40
 8002672:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	2b60      	cmp	r3, #96	; 0x60
 8002678:	d015      	beq.n	80026a6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0304 	and.w	r3, r3, #4
 8002684:	2b04      	cmp	r3, #4
 8002686:	d10e      	bne.n	80026a6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002692:	2b00      	cmp	r3, #0
 8002694:	d107      	bne.n	80026a6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0210 	orr.w	r2, r2, #16
 80026a4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d015      	beq.n	80026d8 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d10e      	bne.n	80026d8 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d107      	bne.n	80026d8 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 0220 	orr.w	r2, r2, #32
 80026d6:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	2b60      	cmp	r3, #96	; 0x60
 80026dc:	d004      	beq.n	80026e8 <ADC_ConversionStop+0x100>
 80026de:	2b6c      	cmp	r3, #108	; 0x6c
 80026e0:	d105      	bne.n	80026ee <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 80026e2:	230c      	movs	r3, #12
 80026e4:	617b      	str	r3, [r7, #20]
        break;
 80026e6:	e005      	b.n	80026f4 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 80026e8:	2308      	movs	r3, #8
 80026ea:	617b      	str	r3, [r7, #20]
        break;
 80026ec:	e002      	b.n	80026f4 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80026ee:	2304      	movs	r3, #4
 80026f0:	617b      	str	r3, [r7, #20]
        break;
 80026f2:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 80026f4:	f7fe fe6e 	bl	80013d4 <HAL_GetTick>
 80026f8:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 80026fa:	e01b      	b.n	8002734 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 80026fc:	f7fe fe6a 	bl	80013d4 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b0b      	cmp	r3, #11
 8002708:	d914      	bls.n	8002734 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689a      	ldr	r2, [r3, #8]
 8002710:	697b      	ldr	r3, [r7, #20]
 8002712:	4013      	ands	r3, r2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00d      	beq.n	8002734 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271c:	f043 0210 	orr.w	r2, r3, #16
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002728:	f043 0201 	orr.w	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e007      	b.n	8002744 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689a      	ldr	r2, [r3, #8]
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d1dc      	bne.n	80026fc <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002742:	2300      	movs	r3, #0
}
 8002744:	4618      	mov	r0, r3
 8002746:	3718      	adds	r7, #24
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	000993ff 	.word	0x000993ff

08002750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002750:	b480      	push	{r7}
 8002752:	b085      	sub	sp, #20
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	f003 0307 	and.w	r3, r3, #7
 800275e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002760:	4b0c      	ldr	r3, [pc, #48]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002766:	68ba      	ldr	r2, [r7, #8]
 8002768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800276c:	4013      	ands	r3, r2
 800276e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800277c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002782:	4a04      	ldr	r2, [pc, #16]	; (8002794 <__NVIC_SetPriorityGrouping+0x44>)
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	60d3      	str	r3, [r2, #12]
}
 8002788:	bf00      	nop
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr
 8002794:	e000ed00 	.word	0xe000ed00

08002798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800279c:	4b04      	ldr	r3, [pc, #16]	; (80027b0 <__NVIC_GetPriorityGrouping+0x18>)
 800279e:	68db      	ldr	r3, [r3, #12]
 80027a0:	0a1b      	lsrs	r3, r3, #8
 80027a2:	f003 0307 	and.w	r3, r3, #7
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	db0b      	blt.n	80027de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027c6:	79fb      	ldrb	r3, [r7, #7]
 80027c8:	f003 021f 	and.w	r2, r3, #31
 80027cc:	4907      	ldr	r1, [pc, #28]	; (80027ec <__NVIC_EnableIRQ+0x38>)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	2001      	movs	r0, #1
 80027d6:	fa00 f202 	lsl.w	r2, r0, r2
 80027da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	e000e100 	.word	0xe000e100

080027f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	6039      	str	r1, [r7, #0]
 80027fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002800:	2b00      	cmp	r3, #0
 8002802:	db0a      	blt.n	800281a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	b2da      	uxtb	r2, r3
 8002808:	490c      	ldr	r1, [pc, #48]	; (800283c <__NVIC_SetPriority+0x4c>)
 800280a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280e:	0112      	lsls	r2, r2, #4
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	440b      	add	r3, r1
 8002814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002818:	e00a      	b.n	8002830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4908      	ldr	r1, [pc, #32]	; (8002840 <__NVIC_SetPriority+0x50>)
 8002820:	79fb      	ldrb	r3, [r7, #7]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	3b04      	subs	r3, #4
 8002828:	0112      	lsls	r2, r2, #4
 800282a:	b2d2      	uxtb	r2, r2
 800282c:	440b      	add	r3, r1
 800282e:	761a      	strb	r2, [r3, #24]
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e100 	.word	0xe000e100
 8002840:	e000ed00 	.word	0xe000ed00

08002844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002844:	b480      	push	{r7}
 8002846:	b089      	sub	sp, #36	; 0x24
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0307 	and.w	r3, r3, #7
 8002856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f1c3 0307 	rsb	r3, r3, #7
 800285e:	2b04      	cmp	r3, #4
 8002860:	bf28      	it	cs
 8002862:	2304      	movcs	r3, #4
 8002864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3304      	adds	r3, #4
 800286a:	2b06      	cmp	r3, #6
 800286c:	d902      	bls.n	8002874 <NVIC_EncodePriority+0x30>
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	3b03      	subs	r3, #3
 8002872:	e000      	b.n	8002876 <NVIC_EncodePriority+0x32>
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002878:	f04f 32ff 	mov.w	r2, #4294967295
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	43da      	mvns	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	401a      	ands	r2, r3
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800288c:	f04f 31ff 	mov.w	r1, #4294967295
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	43d9      	mvns	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800289c:	4313      	orrs	r3, r2
         );
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3724      	adds	r7, #36	; 0x24
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
	...

080028ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028bc:	d301      	bcc.n	80028c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028be:	2301      	movs	r3, #1
 80028c0:	e00f      	b.n	80028e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028c2:	4a0a      	ldr	r2, [pc, #40]	; (80028ec <SysTick_Config+0x40>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028ca:	210f      	movs	r1, #15
 80028cc:	f04f 30ff 	mov.w	r0, #4294967295
 80028d0:	f7ff ff8e 	bl	80027f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <SysTick_Config+0x40>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <SysTick_Config+0x40>)
 80028dc:	2207      	movs	r2, #7
 80028de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	e000e010 	.word	0xe000e010

080028f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f7ff ff29 	bl	8002750 <__NVIC_SetPriorityGrouping>
}
 80028fe:	bf00      	nop
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}

08002906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002906:	b580      	push	{r7, lr}
 8002908:	b086      	sub	sp, #24
 800290a:	af00      	add	r7, sp, #0
 800290c:	4603      	mov	r3, r0
 800290e:	60b9      	str	r1, [r7, #8]
 8002910:	607a      	str	r2, [r7, #4]
 8002912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002918:	f7ff ff3e 	bl	8002798 <__NVIC_GetPriorityGrouping>
 800291c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	6978      	ldr	r0, [r7, #20]
 8002924:	f7ff ff8e 	bl	8002844 <NVIC_EncodePriority>
 8002928:	4602      	mov	r2, r0
 800292a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292e:	4611      	mov	r1, r2
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff5d 	bl	80027f0 <__NVIC_SetPriority>
}
 8002936:	bf00      	nop
 8002938:	3718      	adds	r7, #24
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800293e:	b580      	push	{r7, lr}
 8002940:	b082      	sub	sp, #8
 8002942:	af00      	add	r7, sp, #0
 8002944:	4603      	mov	r3, r0
 8002946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff31 	bl	80027b4 <__NVIC_EnableIRQ>
}
 8002952:	bf00      	nop
 8002954:	3708      	adds	r7, #8
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffa2 	bl	80028ac <SysTick_Config>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3708      	adds	r7, #8
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002980:	2b02      	cmp	r3, #2
 8002982:	d008      	beq.n	8002996 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2204      	movs	r2, #4
 8002988:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e020      	b.n	80029d8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f022 020e 	bic.w	r2, r2, #14
 80029a4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0201 	bic.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	2101      	movs	r1, #1
 80029c0:	fa01 f202 	lsl.w	r2, r1, r2
 80029c4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2201      	movs	r2, #1
 80029ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029ec:	2300      	movs	r3, #0
 80029ee:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d005      	beq.n	8002a06 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2204      	movs	r2, #4
 80029fe:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
 8002a04:	e027      	b.n	8002a56 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f022 020e 	bic.w	r2, r2, #14
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a2e:	2101      	movs	r1, #1
 8002a30:	fa01 f202 	lsl.w	r2, r1, r2
 8002a34:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
    } 
  }
  return status;
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3710      	adds	r7, #16
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a6e:	e160      	b.n	8002d32 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	2101      	movs	r1, #1
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	fa01 f303 	lsl.w	r3, r1, r3
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	f000 8152 	beq.w	8002d2c <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f003 0303 	and.w	r3, r3, #3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d005      	beq.n	8002aa0 <HAL_GPIO_Init+0x40>
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0303 	and.w	r3, r3, #3
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d130      	bne.n	8002b02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	2203      	movs	r2, #3
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	43db      	mvns	r3, r3
 8002ab2:	693a      	ldr	r2, [r7, #16]
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	68da      	ldr	r2, [r3, #12]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	005b      	lsls	r3, r3, #1
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	693a      	ldr	r2, [r7, #16]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	693a      	ldr	r2, [r7, #16]
 8002ace:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa02 f303 	lsl.w	r3, r2, r3
 8002ade:	43db      	mvns	r3, r3
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0201 	and.w	r2, r3, #1
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	fa02 f303 	lsl.w	r3, r2, r3
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	693a      	ldr	r2, [r7, #16]
 8002b00:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f003 0303 	and.w	r3, r3, #3
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d017      	beq.n	8002b3e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	005b      	lsls	r3, r3, #1
 8002b18:	2203      	movs	r2, #3
 8002b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	4013      	ands	r3, r2
 8002b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689a      	ldr	r2, [r3, #8]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	2b02      	cmp	r3, #2
 8002b48:	d123      	bne.n	8002b92 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	08da      	lsrs	r2, r3, #3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3208      	adds	r2, #8
 8002b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b56:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f003 0307 	and.w	r3, r3, #7
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	220f      	movs	r2, #15
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7e:	693a      	ldr	r2, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	08da      	lsrs	r2, r3, #3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3208      	adds	r2, #8
 8002b8c:	6939      	ldr	r1, [r7, #16]
 8002b8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	005b      	lsls	r3, r3, #1
 8002b9c:	2203      	movs	r2, #3
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	f003 0203 	and.w	r2, r3, #3
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	693a      	ldr	r2, [r7, #16]
 8002bc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	f000 80ac 	beq.w	8002d2c <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bd4:	4b5e      	ldr	r3, [pc, #376]	; (8002d50 <HAL_GPIO_Init+0x2f0>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	4a5d      	ldr	r2, [pc, #372]	; (8002d50 <HAL_GPIO_Init+0x2f0>)
 8002bda:	f043 0301 	orr.w	r3, r3, #1
 8002bde:	6193      	str	r3, [r2, #24]
 8002be0:	4b5b      	ldr	r3, [pc, #364]	; (8002d50 <HAL_GPIO_Init+0x2f0>)
 8002be2:	699b      	ldr	r3, [r3, #24]
 8002be4:	f003 0301 	and.w	r3, r3, #1
 8002be8:	60bb      	str	r3, [r7, #8]
 8002bea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bec:	4a59      	ldr	r2, [pc, #356]	; (8002d54 <HAL_GPIO_Init+0x2f4>)
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	089b      	lsrs	r3, r3, #2
 8002bf2:	3302      	adds	r3, #2
 8002bf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	220f      	movs	r2, #15
 8002c04:	fa02 f303 	lsl.w	r3, r2, r3
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c16:	d025      	beq.n	8002c64 <HAL_GPIO_Init+0x204>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a4f      	ldr	r2, [pc, #316]	; (8002d58 <HAL_GPIO_Init+0x2f8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d01f      	beq.n	8002c60 <HAL_GPIO_Init+0x200>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	4a4e      	ldr	r2, [pc, #312]	; (8002d5c <HAL_GPIO_Init+0x2fc>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d019      	beq.n	8002c5c <HAL_GPIO_Init+0x1fc>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	4a4d      	ldr	r2, [pc, #308]	; (8002d60 <HAL_GPIO_Init+0x300>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d013      	beq.n	8002c58 <HAL_GPIO_Init+0x1f8>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	4a4c      	ldr	r2, [pc, #304]	; (8002d64 <HAL_GPIO_Init+0x304>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d00d      	beq.n	8002c54 <HAL_GPIO_Init+0x1f4>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	4a4b      	ldr	r2, [pc, #300]	; (8002d68 <HAL_GPIO_Init+0x308>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d007      	beq.n	8002c50 <HAL_GPIO_Init+0x1f0>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	4a4a      	ldr	r2, [pc, #296]	; (8002d6c <HAL_GPIO_Init+0x30c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d101      	bne.n	8002c4c <HAL_GPIO_Init+0x1ec>
 8002c48:	2306      	movs	r3, #6
 8002c4a:	e00c      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c4c:	2307      	movs	r3, #7
 8002c4e:	e00a      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c50:	2305      	movs	r3, #5
 8002c52:	e008      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c54:	2304      	movs	r3, #4
 8002c56:	e006      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c58:	2303      	movs	r3, #3
 8002c5a:	e004      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	e002      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <HAL_GPIO_Init+0x206>
 8002c64:	2300      	movs	r3, #0
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	f002 0203 	and.w	r2, r2, #3
 8002c6c:	0092      	lsls	r2, r2, #2
 8002c6e:	4093      	lsls	r3, r2
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c76:	4937      	ldr	r1, [pc, #220]	; (8002d54 <HAL_GPIO_Init+0x2f4>)
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	089b      	lsrs	r3, r3, #2
 8002c7c:	3302      	adds	r3, #2
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c84:	4b3a      	ldr	r3, [pc, #232]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	4013      	ands	r3, r2
 8002c92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d003      	beq.n	8002ca8 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002ca8:	4a31      	ldr	r2, [pc, #196]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cae:	4b30      	ldr	r3, [pc, #192]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4013      	ands	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002cd2:	4a27      	ldr	r2, [pc, #156]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cd8:	4b25      	ldr	r3, [pc, #148]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	693a      	ldr	r2, [r7, #16]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002cfc:	4a1c      	ldr	r2, [pc, #112]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d26:	4a12      	ldr	r2, [pc, #72]	; (8002d70 <HAL_GPIO_Init+0x310>)
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f ae97 	bne.w	8002a70 <HAL_GPIO_Init+0x10>
  }
}
 8002d42:	bf00      	nop
 8002d44:	371c      	adds	r7, #28
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40010000 	.word	0x40010000
 8002d58:	48000400 	.word	0x48000400
 8002d5c:	48000800 	.word	0x48000800
 8002d60:	48000c00 	.word	0x48000c00
 8002d64:	48001000 	.word	0x48001000
 8002d68:	48001400 	.word	0x48001400
 8002d6c:	48001800 	.word	0x48001800
 8002d70:	40010400 	.word	0x40010400

08002d74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	887b      	ldrh	r3, [r7, #2]
 8002d86:	4013      	ands	r3, r2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	73fb      	strb	r3, [r7, #15]
 8002d90:	e001      	b.n	8002d96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3714      	adds	r7, #20
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc0:	e002      	b.n	8002dc8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dc8:	bf00      	nop
 8002dca:	370c      	adds	r7, #12
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd2:	4770      	bx	lr

08002dd4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	695b      	ldr	r3, [r3, #20]
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002de6:	887a      	ldrh	r2, [r7, #2]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4013      	ands	r3, r2
 8002dec:	041a      	lsls	r2, r3, #16
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	43d9      	mvns	r1, r3
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	400b      	ands	r3, r1
 8002df6:	431a      	orrs	r2, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	619a      	str	r2, [r3, #24]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr

08002e08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002e12:	4b08      	ldr	r3, [pc, #32]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e14:	695a      	ldr	r2, [r3, #20]
 8002e16:	88fb      	ldrh	r3, [r7, #6]
 8002e18:	4013      	ands	r3, r2
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d006      	beq.n	8002e2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002e1e:	4a05      	ldr	r2, [pc, #20]	; (8002e34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002e24:	88fb      	ldrh	r3, [r7, #6]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f7fd fa42 	bl	80002b0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40010400 	.word	0x40010400

08002e38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	1d3b      	adds	r3, r7, #4
 8002e42:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e44:	1d3b      	adds	r3, r7, #4
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	f000 bf01 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e52:	1d3b      	adds	r3, r7, #4
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0301 	and.w	r3, r3, #1
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 8160 	beq.w	8003122 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e62:	4bae      	ldr	r3, [pc, #696]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b04      	cmp	r3, #4
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e6e:	4bab      	ldr	r3, [pc, #684]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f003 030c 	and.w	r3, r3, #12
 8002e76:	2b08      	cmp	r3, #8
 8002e78:	d159      	bne.n	8002f2e <HAL_RCC_OscConfig+0xf6>
 8002e7a:	4ba8      	ldr	r3, [pc, #672]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8002e82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e86:	d152      	bne.n	8002f2e <HAL_RCC_OscConfig+0xf6>
 8002e88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ea0:	fab3 f383 	clz	r3, r3
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	095b      	lsrs	r3, r3, #5
 8002ea8:	b2db      	uxtb	r3, r3
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d102      	bne.n	8002eba <HAL_RCC_OscConfig+0x82>
 8002eb4:	4b99      	ldr	r3, [pc, #612]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	e015      	b.n	8002ee6 <HAL_RCC_OscConfig+0xae>
 8002eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ebe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8002ece:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ed2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002ed6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002ee2:	4b8e      	ldr	r3, [pc, #568]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002eea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8002eee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002ef2:	fa92 f2a2 	rbit	r2, r2
 8002ef6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8002efa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002efe:	fab2 f282 	clz	r2, r2
 8002f02:	b2d2      	uxtb	r2, r2
 8002f04:	f042 0220 	orr.w	r2, r2, #32
 8002f08:	b2d2      	uxtb	r2, r2
 8002f0a:	f002 021f 	and.w	r2, r2, #31
 8002f0e:	2101      	movs	r1, #1
 8002f10:	fa01 f202 	lsl.w	r2, r1, r2
 8002f14:	4013      	ands	r3, r2
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f000 8102 	beq.w	8003120 <HAL_RCC_OscConfig+0x2e8>
 8002f1c:	1d3b      	adds	r3, r7, #4
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	f040 80fc 	bne.w	8003120 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	f000 be93 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f2e:	1d3b      	adds	r3, r7, #4
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f38:	d106      	bne.n	8002f48 <HAL_RCC_OscConfig+0x110>
 8002f3a:	4b78      	ldr	r3, [pc, #480]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a77      	ldr	r2, [pc, #476]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f44:	6013      	str	r3, [r2, #0]
 8002f46:	e030      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f48:	1d3b      	adds	r3, r7, #4
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_RCC_OscConfig+0x134>
 8002f52:	4b72      	ldr	r3, [pc, #456]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a71      	ldr	r2, [pc, #452]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	4b6f      	ldr	r3, [pc, #444]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a6e      	ldr	r2, [pc, #440]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	e01e      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f6c:	1d3b      	adds	r3, r7, #4
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f76:	d10c      	bne.n	8002f92 <HAL_RCC_OscConfig+0x15a>
 8002f78:	4b68      	ldr	r3, [pc, #416]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a67      	ldr	r2, [pc, #412]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f82:	6013      	str	r3, [r2, #0]
 8002f84:	4b65      	ldr	r3, [pc, #404]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a64      	ldr	r2, [pc, #400]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	e00b      	b.n	8002faa <HAL_RCC_OscConfig+0x172>
 8002f92:	4b62      	ldr	r3, [pc, #392]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a61      	ldr	r2, [pc, #388]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	4b5f      	ldr	r3, [pc, #380]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a5e      	ldr	r2, [pc, #376]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8002fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fa8:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002faa:	1d3b      	adds	r3, r7, #4
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d059      	beq.n	8003068 <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb4:	f7fe fa0e 	bl	80013d4 <HAL_GetTick>
 8002fb8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fbe:	f7fe fa09 	bl	80013d4 <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b64      	cmp	r3, #100	; 0x64
 8002fcc:	d902      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	f000 be40 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8002fd4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fd8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fdc:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002fe0:	fa93 f3a3 	rbit	r3, r3
 8002fe4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8002fe8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fec:	fab3 f383 	clz	r3, r3
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	095b      	lsrs	r3, r3, #5
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	f043 0301 	orr.w	r3, r3, #1
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d102      	bne.n	8003006 <HAL_RCC_OscConfig+0x1ce>
 8003000:	4b46      	ldr	r3, [pc, #280]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	e015      	b.n	8003032 <HAL_RCC_OscConfig+0x1fa>
 8003006:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800300a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800301a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800301e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003022:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8003026:	fa93 f3a3 	rbit	r3, r3
 800302a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800302e:	4b3b      	ldr	r3, [pc, #236]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 8003030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003032:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003036:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 800303a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800303e:	fa92 f2a2 	rbit	r2, r2
 8003042:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8003046:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800304a:	fab2 f282 	clz	r2, r2
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	f042 0220 	orr.w	r2, r2, #32
 8003054:	b2d2      	uxtb	r2, r2
 8003056:	f002 021f 	and.w	r2, r2, #31
 800305a:	2101      	movs	r1, #1
 800305c:	fa01 f202 	lsl.w	r2, r1, r2
 8003060:	4013      	ands	r3, r2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0ab      	beq.n	8002fbe <HAL_RCC_OscConfig+0x186>
 8003066:	e05c      	b.n	8003122 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fe f9b4 	bl	80013d4 <HAL_GetTick>
 800306c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003070:	e00a      	b.n	8003088 <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003072:	f7fe f9af 	bl	80013d4 <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d902      	bls.n	8003088 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	f000 bde6 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003088:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800308c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003090:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8003094:	fa93 f3a3 	rbit	r3, r3
 8003098:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800309c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a0:	fab3 f383 	clz	r3, r3
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f043 0301 	orr.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d102      	bne.n	80030ba <HAL_RCC_OscConfig+0x282>
 80030b4:	4b19      	ldr	r3, [pc, #100]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	e015      	b.n	80030e6 <HAL_RCC_OscConfig+0x2ae>
 80030ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80030c6:	fa93 f3a3 	rbit	r3, r3
 80030ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80030ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80030da:	fa93 f3a3 	rbit	r3, r3
 80030de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030e2:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_RCC_OscConfig+0x2e4>)
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80030ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80030f2:	fa92 f2a2 	rbit	r2, r2
 80030f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80030fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030fe:	fab2 f282 	clz	r2, r2
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	f042 0220 	orr.w	r2, r2, #32
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	f002 021f 	and.w	r2, r2, #31
 800310e:	2101      	movs	r1, #1
 8003110:	fa01 f202 	lsl.w	r2, r1, r2
 8003114:	4013      	ands	r3, r2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1ab      	bne.n	8003072 <HAL_RCC_OscConfig+0x23a>
 800311a:	e002      	b.n	8003122 <HAL_RCC_OscConfig+0x2ea>
 800311c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003122:	1d3b      	adds	r3, r7, #4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0302 	and.w	r3, r3, #2
 800312c:	2b00      	cmp	r3, #0
 800312e:	f000 8170 	beq.w	8003412 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003132:	4bd0      	ldr	r3, [pc, #832]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	2b00      	cmp	r3, #0
 800313c:	d00c      	beq.n	8003158 <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800313e:	4bcd      	ldr	r3, [pc, #820]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 030c 	and.w	r3, r3, #12
 8003146:	2b08      	cmp	r3, #8
 8003148:	d16d      	bne.n	8003226 <HAL_RCC_OscConfig+0x3ee>
 800314a:	4bca      	ldr	r3, [pc, #808]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8003152:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003156:	d166      	bne.n	8003226 <HAL_RCC_OscConfig+0x3ee>
 8003158:	2302      	movs	r3, #2
 800315a:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8003162:	fa93 f3a3 	rbit	r3, r3
 8003166:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800316a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800316e:	fab3 f383 	clz	r3, r3
 8003172:	b2db      	uxtb	r3, r3
 8003174:	095b      	lsrs	r3, r3, #5
 8003176:	b2db      	uxtb	r3, r3
 8003178:	f043 0301 	orr.w	r3, r3, #1
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b01      	cmp	r3, #1
 8003180:	d102      	bne.n	8003188 <HAL_RCC_OscConfig+0x350>
 8003182:	4bbc      	ldr	r3, [pc, #752]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	e013      	b.n	80031b0 <HAL_RCC_OscConfig+0x378>
 8003188:	2302      	movs	r3, #2
 800318a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800318e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8003192:	fa93 f3a3 	rbit	r3, r3
 8003196:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800319a:	2302      	movs	r3, #2
 800319c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80031a0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80031a4:	fa93 f3a3 	rbit	r3, r3
 80031a8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80031ac:	4bb1      	ldr	r3, [pc, #708]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	2202      	movs	r2, #2
 80031b2:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80031b6:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80031ba:	fa92 f2a2 	rbit	r2, r2
 80031be:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 80031c2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031c6:	fab2 f282 	clz	r2, r2
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	f042 0220 	orr.w	r2, r2, #32
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	f002 021f 	and.w	r2, r2, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f202 	lsl.w	r2, r1, r2
 80031dc:	4013      	ands	r3, r2
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3ba>
 80031e2:	1d3b      	adds	r3, r7, #4
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d002      	beq.n	80031f2 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f000 bd31 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f2:	4ba0      	ldr	r3, [pc, #640]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fa:	1d3b      	adds	r3, r7, #4
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	21f8      	movs	r1, #248	; 0xf8
 8003202:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800320a:	fa91 f1a1 	rbit	r1, r1
 800320e:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 8003212:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003216:	fab1 f181 	clz	r1, r1
 800321a:	b2c9      	uxtb	r1, r1
 800321c:	408b      	lsls	r3, r1
 800321e:	4995      	ldr	r1, [pc, #596]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003224:	e0f5      	b.n	8003412 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003226:	1d3b      	adds	r3, r7, #4
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8085 	beq.w	800333c <HAL_RCC_OscConfig+0x504>
 8003232:	2301      	movs	r3, #1
 8003234:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8003244:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003252:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	461a      	mov	r2, r3
 800325a:	2301      	movs	r3, #1
 800325c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325e:	f7fe f8b9 	bl	80013d4 <HAL_GetTick>
 8003262:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003266:	e00a      	b.n	800327e <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003268:	f7fe f8b4 	bl	80013d4 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d902      	bls.n	800327e <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	f000 bceb 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
 800327e:	2302      	movs	r3, #2
 8003280:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003284:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8003288:	fa93 f3a3 	rbit	r3, r3
 800328c:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8003290:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003294:	fab3 f383 	clz	r3, r3
 8003298:	b2db      	uxtb	r3, r3
 800329a:	095b      	lsrs	r3, r3, #5
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d102      	bne.n	80032ae <HAL_RCC_OscConfig+0x476>
 80032a8:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	e013      	b.n	80032d6 <HAL_RCC_OscConfig+0x49e>
 80032ae:	2302      	movs	r3, #2
 80032b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b4:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80032b8:	fa93 f3a3 	rbit	r3, r3
 80032bc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80032c0:	2302      	movs	r3, #2
 80032c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032c6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032d2:	4b68      	ldr	r3, [pc, #416]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2202      	movs	r2, #2
 80032d8:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80032dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80032e0:	fa92 f2a2 	rbit	r2, r2
 80032e4:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80032e8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032ec:	fab2 f282 	clz	r2, r2
 80032f0:	b2d2      	uxtb	r2, r2
 80032f2:	f042 0220 	orr.w	r2, r2, #32
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	f002 021f 	and.w	r2, r2, #31
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	4013      	ands	r3, r2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d0af      	beq.n	8003268 <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003308:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003310:	1d3b      	adds	r3, r7, #4
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	21f8      	movs	r1, #248	; 0xf8
 8003318:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8003320:	fa91 f1a1 	rbit	r1, r1
 8003324:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8003328:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800332c:	fab1 f181 	clz	r1, r1
 8003330:	b2c9      	uxtb	r1, r1
 8003332:	408b      	lsls	r3, r1
 8003334:	494f      	ldr	r1, [pc, #316]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
 800333a:	e06a      	b.n	8003412 <HAL_RCC_OscConfig+0x5da>
 800333c:	2301      	movs	r3, #1
 800333e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003342:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8003346:	fa93 f3a3 	rbit	r3, r3
 800334a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800334e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800335c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	461a      	mov	r2, r3
 8003364:	2300      	movs	r3, #0
 8003366:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003368:	f7fe f834 	bl	80013d4 <HAL_GetTick>
 800336c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003370:	e00a      	b.n	8003388 <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003372:	f7fe f82f 	bl	80013d4 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d902      	bls.n	8003388 <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	f000 bc66 	b.w	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003388:	2302      	movs	r3, #2
 800338a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 800339a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	f043 0301 	orr.w	r3, r3, #1
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d102      	bne.n	80033b8 <HAL_RCC_OscConfig+0x580>
 80033b2:	4b30      	ldr	r3, [pc, #192]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	e013      	b.n	80033e0 <HAL_RCC_OscConfig+0x5a8>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80033c2:	fa93 f3a3 	rbit	r3, r3
 80033c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80033ca:	2302      	movs	r3, #2
 80033cc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80033d4:	fa93 f3a3 	rbit	r3, r3
 80033d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033dc:	4b25      	ldr	r3, [pc, #148]	; (8003474 <HAL_RCC_OscConfig+0x63c>)
 80033de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e0:	2202      	movs	r2, #2
 80033e2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80033e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80033ea:	fa92 f2a2 	rbit	r2, r2
 80033ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80033f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033f6:	fab2 f282 	clz	r2, r2
 80033fa:	b2d2      	uxtb	r2, r2
 80033fc:	f042 0220 	orr.w	r2, r2, #32
 8003400:	b2d2      	uxtb	r2, r2
 8003402:	f002 021f 	and.w	r2, r2, #31
 8003406:	2101      	movs	r1, #1
 8003408:	fa01 f202 	lsl.w	r2, r1, r2
 800340c:	4013      	ands	r3, r2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1af      	bne.n	8003372 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	1d3b      	adds	r3, r7, #4
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 80da 	beq.w	80035d6 <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003422:	1d3b      	adds	r3, r7, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	695b      	ldr	r3, [r3, #20]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d069      	beq.n	8003500 <HAL_RCC_OscConfig+0x6c8>
 800342c:	2301      	movs	r3, #1
 800342e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003436:	fa93 f3a3 	rbit	r3, r3
 800343a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800343e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003442:	fab3 f383 	clz	r3, r3
 8003446:	b2db      	uxtb	r3, r3
 8003448:	461a      	mov	r2, r3
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCC_OscConfig+0x640>)
 800344c:	4413      	add	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	461a      	mov	r2, r3
 8003452:	2301      	movs	r3, #1
 8003454:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003456:	f7fd ffbd 	bl	80013d4 <HAL_GetTick>
 800345a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800345e:	e00d      	b.n	800347c <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003460:	f7fd ffb8 	bl	80013d4 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d905      	bls.n	800347c <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e3ef      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003474:	40021000 	.word	0x40021000
 8003478:	10908120 	.word	0x10908120
 800347c:	2302      	movs	r3, #2
 800347e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003486:	fa93 f2a3 	rbit	r2, r3
 800348a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800348e:	601a      	str	r2, [r3, #0]
 8003490:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8003494:	2202      	movs	r2, #2
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	f507 7382 	add.w	r3, r7, #260	; 0x104
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	fa93 f2a3 	rbit	r2, r3
 80034a2:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80034a6:	601a      	str	r2, [r3, #0]
 80034a8:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034ac:	2202      	movs	r2, #2
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80034be:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c0:	4ba4      	ldr	r3, [pc, #656]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80034c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034c4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034c8:	2102      	movs	r1, #2
 80034ca:	6019      	str	r1, [r3, #0]
 80034cc:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	fa93 f1a3 	rbit	r1, r3
 80034d6:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034da:	6019      	str	r1, [r3, #0]
  return result;
 80034dc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	fab3 f383 	clz	r3, r3
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2101      	movs	r1, #1
 80034f4:	fa01 f303 	lsl.w	r3, r1, r3
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d0b0      	beq.n	8003460 <HAL_RCC_OscConfig+0x628>
 80034fe:	e06a      	b.n	80035d6 <HAL_RCC_OscConfig+0x79e>
 8003500:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8003504:	2201      	movs	r2, #1
 8003506:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	fa93 f2a3 	rbit	r2, r3
 8003512:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8003516:	601a      	str	r2, [r3, #0]
  return result;
 8003518:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800351c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351e:	fab3 f383 	clz	r3, r3
 8003522:	b2db      	uxtb	r3, r3
 8003524:	461a      	mov	r2, r3
 8003526:	4b8c      	ldr	r3, [pc, #560]	; (8003758 <HAL_RCC_OscConfig+0x920>)
 8003528:	4413      	add	r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	461a      	mov	r2, r3
 800352e:	2300      	movs	r3, #0
 8003530:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003532:	f7fd ff4f 	bl	80013d4 <HAL_GetTick>
 8003536:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800353a:	e009      	b.n	8003550 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800353c:	f7fd ff4a 	bl	80013d4 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003546:	1ad3      	subs	r3, r2, r3
 8003548:	2b02      	cmp	r3, #2
 800354a:	d901      	bls.n	8003550 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 800354c:	2303      	movs	r3, #3
 800354e:	e381      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003550:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003554:	2202      	movs	r2, #2
 8003556:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003558:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	fa93 f2a3 	rbit	r2, r3
 8003562:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800356c:	2202      	movs	r2, #2
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	fa93 f2a3 	rbit	r2, r3
 800357a:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800357e:	601a      	str	r2, [r3, #0]
 8003580:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003584:	2202      	movs	r2, #2
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	fa93 f2a3 	rbit	r2, r3
 8003592:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8003596:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003598:	4b6e      	ldr	r3, [pc, #440]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 800359a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800359c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035a0:	2102      	movs	r1, #2
 80035a2:	6019      	str	r1, [r3, #0]
 80035a4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f1a3 	rbit	r1, r3
 80035ae:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035b2:	6019      	str	r1, [r3, #0]
  return result;
 80035b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	f003 031f 	and.w	r3, r3, #31
 80035ca:	2101      	movs	r1, #1
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	4013      	ands	r3, r2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1b2      	bne.n	800353c <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d6:	1d3b      	adds	r3, r7, #4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 8157 	beq.w	8003894 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ec:	4b59      	ldr	r3, [pc, #356]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80035ee:	69db      	ldr	r3, [r3, #28]
 80035f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d112      	bne.n	800361e <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f8:	4b56      	ldr	r3, [pc, #344]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	4a55      	ldr	r2, [pc, #340]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80035fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003602:	61d3      	str	r3, [r2, #28]
 8003604:	4b53      	ldr	r3, [pc, #332]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800360c:	f107 030c 	add.w	r3, r7, #12
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	f107 030c 	add.w	r3, r7, #12
 8003616:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003618:	2301      	movs	r3, #1
 800361a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361e:	4b4f      	ldr	r3, [pc, #316]	; (800375c <HAL_RCC_OscConfig+0x924>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003626:	2b00      	cmp	r3, #0
 8003628:	d11a      	bne.n	8003660 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800362a:	4b4c      	ldr	r3, [pc, #304]	; (800375c <HAL_RCC_OscConfig+0x924>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a4b      	ldr	r2, [pc, #300]	; (800375c <HAL_RCC_OscConfig+0x924>)
 8003630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003634:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003636:	f7fd fecd 	bl	80013d4 <HAL_GetTick>
 800363a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800363e:	e009      	b.n	8003654 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003640:	f7fd fec8 	bl	80013d4 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800364a:	1ad3      	subs	r3, r2, r3
 800364c:	2b64      	cmp	r3, #100	; 0x64
 800364e:	d901      	bls.n	8003654 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8003650:	2303      	movs	r3, #3
 8003652:	e2ff      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003654:	4b41      	ldr	r3, [pc, #260]	; (800375c <HAL_RCC_OscConfig+0x924>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365c:	2b00      	cmp	r3, #0
 800365e:	d0ef      	beq.n	8003640 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003660:	1d3b      	adds	r3, r7, #4
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d106      	bne.n	8003678 <HAL_RCC_OscConfig+0x840>
 800366a:	4b3a      	ldr	r3, [pc, #232]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	4a39      	ldr	r2, [pc, #228]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003670:	f043 0301 	orr.w	r3, r3, #1
 8003674:	6213      	str	r3, [r2, #32]
 8003676:	e02f      	b.n	80036d8 <HAL_RCC_OscConfig+0x8a0>
 8003678:	1d3b      	adds	r3, r7, #4
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x864>
 8003682:	4b34      	ldr	r3, [pc, #208]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	4a33      	ldr	r2, [pc, #204]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003688:	f023 0301 	bic.w	r3, r3, #1
 800368c:	6213      	str	r3, [r2, #32]
 800368e:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003690:	6a1b      	ldr	r3, [r3, #32]
 8003692:	4a30      	ldr	r2, [pc, #192]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003694:	f023 0304 	bic.w	r3, r3, #4
 8003698:	6213      	str	r3, [r2, #32]
 800369a:	e01d      	b.n	80036d8 <HAL_RCC_OscConfig+0x8a0>
 800369c:	1d3b      	adds	r3, r7, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b05      	cmp	r3, #5
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x888>
 80036a6:	4b2b      	ldr	r3, [pc, #172]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	4a2a      	ldr	r2, [pc, #168]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036ac:	f043 0304 	orr.w	r3, r3, #4
 80036b0:	6213      	str	r3, [r2, #32]
 80036b2:	4b28      	ldr	r3, [pc, #160]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	4a27      	ldr	r2, [pc, #156]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036b8:	f043 0301 	orr.w	r3, r3, #1
 80036bc:	6213      	str	r3, [r2, #32]
 80036be:	e00b      	b.n	80036d8 <HAL_RCC_OscConfig+0x8a0>
 80036c0:	4b24      	ldr	r3, [pc, #144]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	4a23      	ldr	r2, [pc, #140]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	6213      	str	r3, [r2, #32]
 80036cc:	4b21      	ldr	r3, [pc, #132]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036ce:	6a1b      	ldr	r3, [r3, #32]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 80036d2:	f023 0304 	bic.w	r3, r3, #4
 80036d6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d06a      	beq.n	80037b8 <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fd fe77 	bl	80013d4 <HAL_GetTick>
 80036e6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ea:	e00b      	b.n	8003704 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80036ec:	f7fd fe72 	bl	80013d4 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d901      	bls.n	8003704 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8003700:	2303      	movs	r3, #3
 8003702:	e2a7      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003704:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003708:	2202      	movs	r2, #2
 800370a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	fa93 f2a3 	rbit	r2, r3
 8003716:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800371a:	601a      	str	r2, [r3, #0]
 800371c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003720:	2202      	movs	r2, #2
 8003722:	601a      	str	r2, [r3, #0]
 8003724:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	fa93 f2a3 	rbit	r2, r3
 800372e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003732:	601a      	str	r2, [r3, #0]
  return result;
 8003734:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8003738:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	095b      	lsrs	r3, r3, #5
 8003742:	b2db      	uxtb	r3, r3
 8003744:	f043 0302 	orr.w	r3, r3, #2
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b02      	cmp	r3, #2
 800374c:	d108      	bne.n	8003760 <HAL_RCC_OscConfig+0x928>
 800374e:	4b01      	ldr	r3, [pc, #4]	; (8003754 <HAL_RCC_OscConfig+0x91c>)
 8003750:	6a1b      	ldr	r3, [r3, #32]
 8003752:	e013      	b.n	800377c <HAL_RCC_OscConfig+0x944>
 8003754:	40021000 	.word	0x40021000
 8003758:	10908120 	.word	0x10908120
 800375c:	40007000 	.word	0x40007000
 8003760:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8003764:	2202      	movs	r2, #2
 8003766:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003768:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	fa93 f2a3 	rbit	r2, r3
 8003772:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	4bc0      	ldr	r3, [pc, #768]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003780:	2102      	movs	r1, #2
 8003782:	6011      	str	r1, [r2, #0]
 8003784:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8003788:	6812      	ldr	r2, [r2, #0]
 800378a:	fa92 f1a2 	rbit	r1, r2
 800378e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003792:	6011      	str	r1, [r2, #0]
  return result;
 8003794:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	fab2 f282 	clz	r2, r2
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	f002 021f 	and.w	r2, r2, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f202 	lsl.w	r2, r1, r2
 80037b0:	4013      	ands	r3, r2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d09a      	beq.n	80036ec <HAL_RCC_OscConfig+0x8b4>
 80037b6:	e063      	b.n	8003880 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037b8:	f7fd fe0c 	bl	80013d4 <HAL_GetTick>
 80037bc:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037c0:	e00b      	b.n	80037da <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c2:	f7fd fe07 	bl	80013d4 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e23c      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 80037da:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037de:	2202      	movs	r2, #2
 80037e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	fa93 f2a3 	rbit	r2, r3
 80037ec:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037f6:	2202      	movs	r2, #2
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	fa93 f2a3 	rbit	r2, r3
 8003804:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8003808:	601a      	str	r2, [r3, #0]
  return result;
 800380a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800380e:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003810:	fab3 f383 	clz	r3, r3
 8003814:	b2db      	uxtb	r3, r3
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d102      	bne.n	800382a <HAL_RCC_OscConfig+0x9f2>
 8003824:	4b95      	ldr	r3, [pc, #596]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	e00d      	b.n	8003846 <HAL_RCC_OscConfig+0xa0e>
 800382a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800382e:	2202      	movs	r2, #2
 8003830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003832:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8003840:	601a      	str	r2, [r3, #0]
 8003842:	4b8e      	ldr	r3, [pc, #568]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800384a:	2102      	movs	r1, #2
 800384c:	6011      	str	r1, [r2, #0]
 800384e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8003852:	6812      	ldr	r2, [r2, #0]
 8003854:	fa92 f1a2 	rbit	r1, r2
 8003858:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800385c:	6011      	str	r1, [r2, #0]
  return result;
 800385e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8003862:	6812      	ldr	r2, [r2, #0]
 8003864:	fab2 f282 	clz	r2, r2
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	f002 021f 	and.w	r2, r2, #31
 8003874:	2101      	movs	r1, #1
 8003876:	fa01 f202 	lsl.w	r2, r1, r2
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1a0      	bne.n	80037c2 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003880:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8003884:	2b01      	cmp	r3, #1
 8003886:	d105      	bne.n	8003894 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003888:	4b7c      	ldr	r3, [pc, #496]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	4a7b      	ldr	r2, [pc, #492]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800388e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003892:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 81d9 	beq.w	8003c52 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038a0:	4b76      	ldr	r3, [pc, #472]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 030c 	and.w	r3, r3, #12
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	f000 81a6 	beq.w	8003bfa <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	f040 811e 	bne.w	8003af6 <HAL_RCC_OscConfig+0xcbe>
 80038ba:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80038c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	fa93 f2a3 	rbit	r2, r3
 80038ce:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038d2:	601a      	str	r2, [r3, #0]
  return result;
 80038d4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80038d8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038da:	fab3 f383 	clz	r3, r3
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80038e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	461a      	mov	r2, r3
 80038ec:	2300      	movs	r3, #0
 80038ee:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038f0:	f7fd fd70 	bl	80013d4 <HAL_GetTick>
 80038f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f8:	e009      	b.n	800390e <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038fa:	f7fd fd6b 	bl	80013d4 <HAL_GetTick>
 80038fe:	4602      	mov	r2, r0
 8003900:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b02      	cmp	r3, #2
 8003908:	d901      	bls.n	800390e <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e1a2      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 800390e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8003912:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003918:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	fa93 f2a3 	rbit	r2, r3
 8003922:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003926:	601a      	str	r2, [r3, #0]
  return result;
 8003928:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800392c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800392e:	fab3 f383 	clz	r3, r3
 8003932:	b2db      	uxtb	r3, r3
 8003934:	095b      	lsrs	r3, r3, #5
 8003936:	b2db      	uxtb	r3, r3
 8003938:	f043 0301 	orr.w	r3, r3, #1
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b01      	cmp	r3, #1
 8003940:	d102      	bne.n	8003948 <HAL_RCC_OscConfig+0xb10>
 8003942:	4b4e      	ldr	r3, [pc, #312]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	e01b      	b.n	8003980 <HAL_RCC_OscConfig+0xb48>
 8003948:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800394c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003950:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003952:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	fa93 f2a3 	rbit	r2, r3
 800395c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003966:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800396a:	601a      	str	r2, [r3, #0]
 800396c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	fa93 f2a3 	rbit	r2, r3
 8003976:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 800397e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003980:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8003984:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003988:	6011      	str	r1, [r2, #0]
 800398a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	fa92 f1a2 	rbit	r1, r2
 8003994:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003998:	6011      	str	r1, [r2, #0]
  return result;
 800399a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800399e:	6812      	ldr	r2, [r2, #0]
 80039a0:	fab2 f282 	clz	r2, r2
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	f042 0220 	orr.w	r2, r2, #32
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	f002 021f 	and.w	r2, r2, #31
 80039b0:	2101      	movs	r1, #1
 80039b2:	fa01 f202 	lsl.w	r2, r1, r2
 80039b6:	4013      	ands	r3, r2
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d19e      	bne.n	80038fa <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039bc:	4b2f      	ldr	r3, [pc, #188]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	f023 020f 	bic.w	r2, r3, #15
 80039c4:	1d3b      	adds	r3, r7, #4
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	492c      	ldr	r1, [pc, #176]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 80039d0:	4b2a      	ldr	r3, [pc, #168]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 80039d8:	1d3b      	adds	r3, r7, #4
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6a19      	ldr	r1, [r3, #32]
 80039de:	1d3b      	adds	r3, r7, #4
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	430b      	orrs	r3, r1
 80039e6:	4925      	ldr	r1, [pc, #148]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 80039e8:	4313      	orrs	r3, r2
 80039ea:	604b      	str	r3, [r1, #4]
 80039ec:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039f0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	fa93 f2a3 	rbit	r2, r3
 8003a00:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a04:	601a      	str	r2, [r3, #0]
  return result;
 8003a06:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a0a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	2301      	movs	r3, #1
 8003a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a22:	f7fd fcd7 	bl	80013d4 <HAL_GetTick>
 8003a26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a2a:	e009      	b.n	8003a40 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2c:	f7fd fcd2 	bl	80013d4 <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e109      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003a40:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a44:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a48:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	fa93 f2a3 	rbit	r2, r3
 8003a54:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a58:	601a      	str	r2, [r3, #0]
  return result;
 8003a5a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8003a5e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	095b      	lsrs	r3, r3, #5
 8003a68:	b2db      	uxtb	r3, r3
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d105      	bne.n	8003a80 <HAL_RCC_OscConfig+0xc48>
 8003a74:	4b01      	ldr	r3, [pc, #4]	; (8003a7c <HAL_RCC_OscConfig+0xc44>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	e01e      	b.n	8003ab8 <HAL_RCC_OscConfig+0xc80>
 8003a7a:	bf00      	nop
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a84:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a88:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	fa93 f2a3 	rbit	r2, r3
 8003a94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003a98:	601a      	str	r2, [r3, #0]
 8003a9a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003ab2:	601a      	str	r2, [r3, #0]
 8003ab4:	4b6a      	ldr	r3, [pc, #424]	; (8003c60 <HAL_RCC_OscConfig+0xe28>)
 8003ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003abc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003ac0:	6011      	str	r1, [r2, #0]
 8003ac2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8003ac6:	6812      	ldr	r2, [r2, #0]
 8003ac8:	fa92 f1a2 	rbit	r1, r2
 8003acc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ad0:	6011      	str	r1, [r2, #0]
  return result;
 8003ad2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003ad6:	6812      	ldr	r2, [r2, #0]
 8003ad8:	fab2 f282 	clz	r2, r2
 8003adc:	b2d2      	uxtb	r2, r2
 8003ade:	f042 0220 	orr.w	r2, r2, #32
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	f002 021f 	and.w	r2, r2, #31
 8003ae8:	2101      	movs	r1, #1
 8003aea:	fa01 f202 	lsl.w	r2, r1, r2
 8003aee:	4013      	ands	r3, r2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d09b      	beq.n	8003a2c <HAL_RCC_OscConfig+0xbf4>
 8003af4:	e0ad      	b.n	8003c52 <HAL_RCC_OscConfig+0xe1a>
 8003af6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003afa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	fa93 f2a3 	rbit	r2, r3
 8003b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b0e:	601a      	str	r2, [r3, #0]
  return result;
 8003b10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003b14:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b16:	fab3 f383 	clz	r3, r3
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	461a      	mov	r2, r3
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fd fc52 	bl	80013d4 <HAL_GetTick>
 8003b30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b34:	e009      	b.n	8003b4a <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b36:	f7fd fc4d 	bl	80013d4 <HAL_GetTick>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e084      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
 8003b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	fa93 f2a3 	rbit	r2, r3
 8003b5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b62:	601a      	str	r2, [r3, #0]
  return result;
 8003b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003b68:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b6a:	fab3 f383 	clz	r3, r3
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	095b      	lsrs	r3, r3, #5
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	f043 0301 	orr.w	r3, r3, #1
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d102      	bne.n	8003b84 <HAL_RCC_OscConfig+0xd4c>
 8003b7e:	4b38      	ldr	r3, [pc, #224]	; (8003c60 <HAL_RCC_OscConfig+0xe28>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	e01b      	b.n	8003bbc <HAL_RCC_OscConfig+0xd84>
 8003b84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b88:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003b8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	fa93 f2a3 	rbit	r2, r3
 8003b98:	f107 0320 	add.w	r3, r7, #32
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	f107 031c 	add.w	r3, r7, #28
 8003ba2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ba6:	601a      	str	r2, [r3, #0]
 8003ba8:	f107 031c 	add.w	r3, r7, #28
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	fa93 f2a3 	rbit	r2, r3
 8003bb2:	f107 0318 	add.w	r3, r7, #24
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	4b29      	ldr	r3, [pc, #164]	; (8003c60 <HAL_RCC_OscConfig+0xe28>)
 8003bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbc:	f107 0214 	add.w	r2, r7, #20
 8003bc0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003bc4:	6011      	str	r1, [r2, #0]
 8003bc6:	f107 0214 	add.w	r2, r7, #20
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	fa92 f1a2 	rbit	r1, r2
 8003bd0:	f107 0210 	add.w	r2, r7, #16
 8003bd4:	6011      	str	r1, [r2, #0]
  return result;
 8003bd6:	f107 0210 	add.w	r2, r7, #16
 8003bda:	6812      	ldr	r2, [r2, #0]
 8003bdc:	fab2 f282 	clz	r2, r2
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	f042 0220 	orr.w	r2, r2, #32
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	f002 021f 	and.w	r2, r2, #31
 8003bec:	2101      	movs	r1, #1
 8003bee:	fa01 f202 	lsl.w	r2, r1, r2
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d19e      	bne.n	8003b36 <HAL_RCC_OscConfig+0xcfe>
 8003bf8:	e02b      	b.n	8003c52 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfa:	1d3b      	adds	r3, r7, #4
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e025      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c08:	4b15      	ldr	r3, [pc, #84]	; (8003c60 <HAL_RCC_OscConfig+0xe28>)
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003c10:	4b13      	ldr	r3, [pc, #76]	; (8003c60 <HAL_RCC_OscConfig+0xe28>)
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c1c:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8003c20:	1d3b      	adds	r3, r7, #4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69db      	ldr	r3, [r3, #28]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d111      	bne.n	8003c4e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8003c2e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003c32:	1d3b      	adds	r3, r7, #4
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d108      	bne.n	8003c4e <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8003c3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c40:	f003 020f 	and.w	r2, r3, #15
 8003c44:	1d3b      	adds	r3, r7, #4
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d001      	beq.n	8003c52 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e000      	b.n	8003c54 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	40021000 	.word	0x40021000

08003c64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b09e      	sub	sp, #120	; 0x78
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d101      	bne.n	8003c7c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e162      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c7c:	4b90      	ldr	r3, [pc, #576]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0307 	and.w	r3, r3, #7
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	429a      	cmp	r2, r3
 8003c88:	d910      	bls.n	8003cac <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c8a:	4b8d      	ldr	r3, [pc, #564]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 0207 	bic.w	r2, r3, #7
 8003c92:	498b      	ldr	r1, [pc, #556]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9a:	4b89      	ldr	r3, [pc, #548]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	683a      	ldr	r2, [r7, #0]
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e14a      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cb8:	4b82      	ldr	r3, [pc, #520]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	497f      	ldr	r1, [pc, #508]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0301 	and.w	r3, r3, #1
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80dc 	beq.w	8003e90 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d13c      	bne.n	8003d5a <HAL_RCC_ClockConfig+0xf6>
 8003ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ce8:	fa93 f3a3 	rbit	r3, r3
 8003cec:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf0:	fab3 f383 	clz	r3, r3
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	095b      	lsrs	r3, r3, #5
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_RCC_ClockConfig+0xa6>
 8003d04:	4b6f      	ldr	r3, [pc, #444]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	e00f      	b.n	8003d2a <HAL_RCC_ClockConfig+0xc6>
 8003d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d10:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d12:	fa93 f3a3 	rbit	r3, r3
 8003d16:	667b      	str	r3, [r7, #100]	; 0x64
 8003d18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003d1c:	663b      	str	r3, [r7, #96]	; 0x60
 8003d1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d20:	fa93 f3a3 	rbit	r3, r3
 8003d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d26:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003d30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d32:	fa92 f2a2 	rbit	r2, r2
 8003d36:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003d38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003d3a:	fab2 f282 	clz	r2, r2
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	f042 0220 	orr.w	r2, r2, #32
 8003d44:	b2d2      	uxtb	r2, r2
 8003d46:	f002 021f 	and.w	r2, r2, #31
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d17b      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e0f3      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d13c      	bne.n	8003ddc <HAL_RCC_ClockConfig+0x178>
 8003d62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d66:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6a:	fa93 f3a3 	rbit	r3, r3
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d72:	fab3 f383 	clz	r3, r3
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d102      	bne.n	8003d8c <HAL_RCC_ClockConfig+0x128>
 8003d86:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	e00f      	b.n	8003dac <HAL_RCC_ClockConfig+0x148>
 8003d8c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d90:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d94:	fa93 f3a3 	rbit	r3, r3
 8003d98:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8003da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003db0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003db2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003db4:	fa92 f2a2 	rbit	r2, r2
 8003db8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003dbc:	fab2 f282 	clz	r2, r2
 8003dc0:	b2d2      	uxtb	r2, r2
 8003dc2:	f042 0220 	orr.w	r2, r2, #32
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	f002 021f 	and.w	r2, r2, #31
 8003dcc:	2101      	movs	r1, #1
 8003dce:	fa01 f202 	lsl.w	r2, r1, r2
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d13a      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e0b2      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
 8003ddc:	2302      	movs	r3, #2
 8003dde:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	fa93 f3a3 	rbit	r3, r3
 8003de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dea:	fab3 f383 	clz	r3, r3
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	095b      	lsrs	r3, r3, #5
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	f043 0301 	orr.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d102      	bne.n	8003e04 <HAL_RCC_ClockConfig+0x1a0>
 8003dfe:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	e00d      	b.n	8003e20 <HAL_RCC_ClockConfig+0x1bc>
 8003e04:	2302      	movs	r3, #2
 8003e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e0a:	fa93 f3a3 	rbit	r3, r3
 8003e0e:	627b      	str	r3, [r7, #36]	; 0x24
 8003e10:	2302      	movs	r3, #2
 8003e12:	623b      	str	r3, [r7, #32]
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	fa93 f3a3 	rbit	r3, r3
 8003e1a:	61fb      	str	r3, [r7, #28]
 8003e1c:	4b29      	ldr	r3, [pc, #164]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e20:	2202      	movs	r2, #2
 8003e22:	61ba      	str	r2, [r7, #24]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	fa92 f2a2 	rbit	r2, r2
 8003e2a:	617a      	str	r2, [r7, #20]
  return result;
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	fab2 f282 	clz	r2, r2
 8003e32:	b2d2      	uxtb	r2, r2
 8003e34:	f042 0220 	orr.w	r2, r2, #32
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	f002 021f 	and.w	r2, r2, #31
 8003e3e:	2101      	movs	r1, #1
 8003e40:	fa01 f202 	lsl.w	r2, r1, r2
 8003e44:	4013      	ands	r3, r2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e079      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	f023 0203 	bic.w	r2, r3, #3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	491a      	ldr	r1, [pc, #104]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e60:	f7fd fab8 	bl	80013d4 <HAL_GetTick>
 8003e64:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e66:	e00a      	b.n	8003e7e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e68:	f7fd fab4 	bl	80013d4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d901      	bls.n	8003e7e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	e061      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7e:	4b11      	ldr	r3, [pc, #68]	; (8003ec4 <HAL_RCC_ClockConfig+0x260>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 020c 	and.w	r2, r3, #12
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	009b      	lsls	r3, r3, #2
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d1eb      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e90:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f003 0307 	and.w	r3, r3, #7
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d214      	bcs.n	8003ec8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f023 0207 	bic.w	r2, r3, #7
 8003ea6:	4906      	ldr	r1, [pc, #24]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b04      	ldr	r3, [pc, #16]	; (8003ec0 <HAL_RCC_ClockConfig+0x25c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d005      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e040      	b.n	8003f42 <HAL_RCC_ClockConfig+0x2de>
 8003ec0:	40022000 	.word	0x40022000
 8003ec4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0304 	and.w	r3, r3, #4
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d008      	beq.n	8003ee6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ed4:	4b1d      	ldr	r3, [pc, #116]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	491a      	ldr	r1, [pc, #104]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0308 	and.w	r3, r3, #8
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d009      	beq.n	8003f06 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ef2:	4b16      	ldr	r3, [pc, #88]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	00db      	lsls	r3, r3, #3
 8003f00:	4912      	ldr	r1, [pc, #72]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003f06:	f000 f829 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8003f0a:	4601      	mov	r1, r0
 8003f0c:	4b0f      	ldr	r3, [pc, #60]	; (8003f4c <HAL_RCC_ClockConfig+0x2e8>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f14:	22f0      	movs	r2, #240	; 0xf0
 8003f16:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	fa92 f2a2 	rbit	r2, r2
 8003f1e:	60fa      	str	r2, [r7, #12]
  return result;
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	fab2 f282 	clz	r2, r2
 8003f26:	b2d2      	uxtb	r2, r2
 8003f28:	40d3      	lsrs	r3, r2
 8003f2a:	4a09      	ldr	r2, [pc, #36]	; (8003f50 <HAL_RCC_ClockConfig+0x2ec>)
 8003f2c:	5cd3      	ldrb	r3, [r2, r3]
 8003f2e:	fa21 f303 	lsr.w	r3, r1, r3
 8003f32:	4a08      	ldr	r2, [pc, #32]	; (8003f54 <HAL_RCC_ClockConfig+0x2f0>)
 8003f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003f36:	4b08      	ldr	r3, [pc, #32]	; (8003f58 <HAL_RCC_ClockConfig+0x2f4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f7fd fa06 	bl	800134c <HAL_InitTick>
  
  return HAL_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	3778      	adds	r7, #120	; 0x78
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	40021000 	.word	0x40021000
 8003f50:	08006874 	.word	0x08006874
 8003f54:	20000010 	.word	0x20000010
 8003f58:	20000014 	.word	0x20000014

08003f5c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61fb      	str	r3, [r7, #28]
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003f76:	4b2a      	ldr	r3, [pc, #168]	; (8004020 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
 8003f82:	2b04      	cmp	r3, #4
 8003f84:	d002      	beq.n	8003f8c <HAL_RCC_GetSysClockFreq+0x30>
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d003      	beq.n	8003f92 <HAL_RCC_GetSysClockFreq+0x36>
 8003f8a:	e03f      	b.n	800400c <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f8c:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003f8e:	623b      	str	r3, [r7, #32]
      break;
 8003f90:	e03f      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003f98:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8003f9c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	68ba      	ldr	r2, [r7, #8]
 8003fa0:	fa92 f2a2 	rbit	r2, r2
 8003fa4:	607a      	str	r2, [r7, #4]
  return result;
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	fab2 f282 	clz	r2, r2
 8003fac:	b2d2      	uxtb	r2, r2
 8003fae:	40d3      	lsrs	r3, r2
 8003fb0:	4a1d      	ldr	r2, [pc, #116]	; (8004028 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003fb2:	5cd3      	ldrb	r3, [r2, r3]
 8003fb4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	; (8004020 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	f003 030f 	and.w	r3, r3, #15
 8003fbe:	220f      	movs	r2, #15
 8003fc0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	fa92 f2a2 	rbit	r2, r2
 8003fc8:	60fa      	str	r2, [r7, #12]
  return result;
 8003fca:	68fa      	ldr	r2, [r7, #12]
 8003fcc:	fab2 f282 	clz	r2, r2
 8003fd0:	b2d2      	uxtb	r2, r2
 8003fd2:	40d3      	lsrs	r3, r2
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <HAL_RCC_GetSysClockFreq+0xd0>)
 8003fd6:	5cd3      	ldrb	r3, [r2, r3]
 8003fd8:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d008      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	; (8004024 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003fe6:	69bb      	ldr	r3, [r7, #24]
 8003fe8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	fb02 f303 	mul.w	r3, r2, r3
 8003ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ff4:	e007      	b.n	8004006 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003ff6:	4a0b      	ldr	r2, [pc, #44]	; (8004024 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	fb02 f303 	mul.w	r3, r2, r3
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004008:	623b      	str	r3, [r7, #32]
      break;
 800400a:	e002      	b.n	8004012 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800400c:	4b05      	ldr	r3, [pc, #20]	; (8004024 <HAL_RCC_GetSysClockFreq+0xc8>)
 800400e:	623b      	str	r3, [r7, #32]
      break;
 8004010:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004012:	6a3b      	ldr	r3, [r7, #32]
}
 8004014:	4618      	mov	r0, r3
 8004016:	372c      	adds	r7, #44	; 0x2c
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	40021000 	.word	0x40021000
 8004024:	007a1200 	.word	0x007a1200
 8004028:	0800688c 	.word	0x0800688c
 800402c:	0800689c 	.word	0x0800689c

08004030 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004030:	b480      	push	{r7}
 8004032:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004034:	4b03      	ldr	r3, [pc, #12]	; (8004044 <HAL_RCC_GetHCLKFreq+0x14>)
 8004036:	681b      	ldr	r3, [r3, #0]
}
 8004038:	4618      	mov	r0, r3
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000010 	.word	0x20000010

08004048 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b082      	sub	sp, #8
 800404c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800404e:	f7ff ffef 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004052:	4601      	mov	r1, r0
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800405c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004060:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	fa92 f2a2 	rbit	r2, r2
 8004068:	603a      	str	r2, [r7, #0]
  return result;
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	fab2 f282 	clz	r2, r2
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	40d3      	lsrs	r3, r2
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004076:	5cd3      	ldrb	r3, [r2, r3]
 8004078:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800407c:	4618      	mov	r0, r3
 800407e:	3708      	adds	r7, #8
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40021000 	.word	0x40021000
 8004088:	08006884 	.word	0x08006884

0800408c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b082      	sub	sp, #8
 8004090:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004092:	f7ff ffcd 	bl	8004030 <HAL_RCC_GetHCLKFreq>
 8004096:	4601      	mov	r1, r0
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80040a0:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80040a4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	fa92 f2a2 	rbit	r2, r2
 80040ac:	603a      	str	r2, [r7, #0]
  return result;
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	fab2 f282 	clz	r2, r2
 80040b4:	b2d2      	uxtb	r2, r2
 80040b6:	40d3      	lsrs	r3, r2
 80040b8:	4a04      	ldr	r2, [pc, #16]	; (80040cc <HAL_RCC_GetPCLK2Freq+0x40>)
 80040ba:	5cd3      	ldrb	r3, [r2, r3]
 80040bc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80040c0:	4618      	mov	r0, r3
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40021000 	.word	0x40021000
 80040cc:	08006884 	.word	0x08006884

080040d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b092      	sub	sp, #72	; 0x48
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80040d8:	2300      	movs	r3, #0
 80040da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80040e0:	2300      	movs	r3, #0
 80040e2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 80d4 	beq.w	800429c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040f4:	4b4e      	ldr	r3, [pc, #312]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80040f6:	69db      	ldr	r3, [r3, #28]
 80040f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10e      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004100:	4b4b      	ldr	r3, [pc, #300]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004102:	69db      	ldr	r3, [r3, #28]
 8004104:	4a4a      	ldr	r2, [pc, #296]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800410a:	61d3      	str	r3, [r2, #28]
 800410c:	4b48      	ldr	r3, [pc, #288]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004114:	60bb      	str	r3, [r7, #8]
 8004116:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004118:	2301      	movs	r3, #1
 800411a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800411e:	4b45      	ldr	r3, [pc, #276]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d118      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800412a:	4b42      	ldr	r3, [pc, #264]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a41      	ldr	r2, [pc, #260]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004136:	f7fd f94d 	bl	80013d4 <HAL_GetTick>
 800413a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800413c:	e008      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fd f949 	bl	80013d4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b64      	cmp	r3, #100	; 0x64
 800414a:	d901      	bls.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	e1d6      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004150:	4b38      	ldr	r3, [pc, #224]	; (8004234 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004158:	2b00      	cmp	r3, #0
 800415a:	d0f0      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800415c:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004164:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8084 	beq.w	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004176:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004178:	429a      	cmp	r2, r3
 800417a:	d07c      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800417c:	4b2c      	ldr	r3, [pc, #176]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800417e:	6a1b      	ldr	r3, [r3, #32]
 8004180:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004184:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800418a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418e:	fa93 f3a3 	rbit	r3, r3
 8004192:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004196:	fab3 f383 	clz	r3, r3
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	4b26      	ldr	r3, [pc, #152]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041a0:	4413      	add	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	461a      	mov	r2, r3
 80041a6:	2301      	movs	r3, #1
 80041a8:	6013      	str	r3, [r2, #0]
 80041aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b2:	fa93 f3a3 	rbit	r3, r3
 80041b6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80041b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ba:	fab3 f383 	clz	r3, r3
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80041c4:	4413      	add	r3, r2
 80041c6:	009b      	lsls	r3, r3, #2
 80041c8:	461a      	mov	r2, r3
 80041ca:	2300      	movs	r3, #0
 80041cc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80041ce:	4a18      	ldr	r2, [pc, #96]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80041d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	f003 0301 	and.w	r3, r3, #1
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d04b      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041de:	f7fd f8f9 	bl	80013d4 <HAL_GetTick>
 80041e2:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041e4:	e00a      	b.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041e6:	f7fd f8f5 	bl	80013d4 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d901      	bls.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e180      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80041fc:	2302      	movs	r3, #2
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
 8004208:	2302      	movs	r3, #2
 800420a:	623b      	str	r3, [r7, #32]
 800420c:	6a3b      	ldr	r3, [r7, #32]
 800420e:	fa93 f3a3 	rbit	r3, r3
 8004212:	61fb      	str	r3, [r7, #28]
  return result;
 8004214:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	095b      	lsrs	r3, r3, #5
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f043 0302 	orr.w	r3, r3, #2
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b02      	cmp	r3, #2
 8004228:	d108      	bne.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800422a:	4b01      	ldr	r3, [pc, #4]	; (8004230 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800422c:	6a1b      	ldr	r3, [r3, #32]
 800422e:	e00d      	b.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8004230:	40021000 	.word	0x40021000
 8004234:	40007000 	.word	0x40007000
 8004238:	10908100 	.word	0x10908100
 800423c:	2302      	movs	r3, #2
 800423e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	fa93 f3a3 	rbit	r3, r3
 8004246:	617b      	str	r3, [r7, #20]
 8004248:	4ba0      	ldr	r3, [pc, #640]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	2202      	movs	r2, #2
 800424e:	613a      	str	r2, [r7, #16]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	fa92 f2a2 	rbit	r2, r2
 8004256:	60fa      	str	r2, [r7, #12]
  return result;
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	fab2 f282 	clz	r2, r2
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004264:	b2d2      	uxtb	r2, r2
 8004266:	f002 021f 	and.w	r2, r2, #31
 800426a:	2101      	movs	r1, #1
 800426c:	fa01 f202 	lsl.w	r2, r1, r2
 8004270:	4013      	ands	r3, r2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d0b7      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004276:	4b95      	ldr	r3, [pc, #596]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4992      	ldr	r1, [pc, #584]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004284:	4313      	orrs	r3, r2
 8004286:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004288:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800428c:	2b01      	cmp	r3, #1
 800428e:	d105      	bne.n	800429c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004290:	4b8e      	ldr	r3, [pc, #568]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004292:	69db      	ldr	r3, [r3, #28]
 8004294:	4a8d      	ldr	r2, [pc, #564]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004296:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800429a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f003 0301 	and.w	r3, r3, #1
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d008      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80042a8:	4b88      	ldr	r3, [pc, #544]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	f023 0203 	bic.w	r2, r3, #3
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	4985      	ldr	r1, [pc, #532]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0302 	and.w	r3, r3, #2
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80042c6:	4b81      	ldr	r3, [pc, #516]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	68db      	ldr	r3, [r3, #12]
 80042d2:	497e      	ldr	r1, [pc, #504]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042d4:	4313      	orrs	r3, r2
 80042d6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d008      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042e4:	4b79      	ldr	r3, [pc, #484]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	4976      	ldr	r1, [pc, #472]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d008      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004302:	4b72      	ldr	r3, [pc, #456]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004306:	f023 0210 	bic.w	r2, r3, #16
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	69db      	ldr	r3, [r3, #28]
 800430e:	496f      	ldr	r1, [pc, #444]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004310:	4313      	orrs	r3, r2
 8004312:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d008      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004320:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800432c:	4967      	ldr	r1, [pc, #412]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800432e:	4313      	orrs	r3, r2
 8004330:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d008      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004342:	f023 0220 	bic.w	r2, r3, #32
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6a1b      	ldr	r3, [r3, #32]
 800434a:	4960      	ldr	r1, [pc, #384]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800434c:	4313      	orrs	r3, r2
 800434e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800435c:	4b5b      	ldr	r3, [pc, #364]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800435e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004360:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	4958      	ldr	r1, [pc, #352]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800436a:	4313      	orrs	r3, r2
 800436c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d008      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800437a:	4b54      	ldr	r3, [pc, #336]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800437c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800437e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	695b      	ldr	r3, [r3, #20]
 8004386:	4951      	ldr	r1, [pc, #324]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004398:	4b4c      	ldr	r3, [pc, #304]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800439a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	699b      	ldr	r3, [r3, #24]
 80043a4:	4949      	ldr	r1, [pc, #292]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d008      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043b6:	4b45      	ldr	r3, [pc, #276]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c2:	4942      	ldr	r1, [pc, #264]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d008      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043d4:	4b3d      	ldr	r3, [pc, #244]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e0:	493a      	ldr	r1, [pc, #232]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043e2:	4313      	orrs	r3, r2
 80043e4:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d008      	beq.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80043f2:	4b36      	ldr	r3, [pc, #216]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043fe:	4933      	ldr	r1, [pc, #204]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004400:	4313      	orrs	r3, r2
 8004402:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004410:	4b2e      	ldr	r3, [pc, #184]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800441c:	492b      	ldr	r1, [pc, #172]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800441e:	4313      	orrs	r3, r2
 8004420:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800442e:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004432:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	4924      	ldr	r1, [pc, #144]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800443c:	4313      	orrs	r3, r2
 800443e:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004448:	2b00      	cmp	r3, #0
 800444a:	d008      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800444c:	4b1f      	ldr	r3, [pc, #124]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800444e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004450:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	491c      	ldr	r1, [pc, #112]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800445a:	4313      	orrs	r3, r2
 800445c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d008      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800446a:	4b18      	ldr	r3, [pc, #96]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800446c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004476:	4915      	ldr	r1, [pc, #84]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004478:	4313      	orrs	r3, r2
 800447a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d008      	beq.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004488:	4b10      	ldr	r3, [pc, #64]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 800448a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004494:	490d      	ldr	r1, [pc, #52]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8004496:	4313      	orrs	r3, r2
 8004498:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80044a6:	4b09      	ldr	r3, [pc, #36]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b2:	4906      	ldr	r1, [pc, #24]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044b4:	4313      	orrs	r3, r2
 80044b6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00c      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80044c4:	4b01      	ldr	r3, [pc, #4]	; (80044cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 80044c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c8:	e002      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x400>
 80044ca:	bf00      	nop
 80044cc:	40021000 	.word	0x40021000
 80044d0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d8:	490b      	ldr	r1, [pc, #44]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d008      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ee:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044f6:	4904      	ldr	r1, [pc, #16]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3748      	adds	r7, #72	; 0x48
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	40021000 	.word	0x40021000

0800450c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e049      	b.n	80045b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fc fdbc 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 f9ee 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e04f      	b.n	8004674 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68da      	ldr	r2, [r3, #12]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f042 0201 	orr.w	r2, r2, #1
 80045ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a23      	ldr	r2, [pc, #140]	; (8004680 <HAL_TIM_Base_Start_IT+0xc4>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d01d      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045fe:	d018      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <HAL_TIM_Base_Start_IT+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d013      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <HAL_TIM_Base_Start_IT+0xcc>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d00e      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a1c      	ldr	r2, [pc, #112]	; (800468c <HAL_TIM_Base_Start_IT+0xd0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d009      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_TIM_Base_Start_IT+0xd4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIM_Base_Start_IT+0x76>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a19      	ldr	r2, [pc, #100]	; (8004694 <HAL_TIM_Base_Start_IT+0xd8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d115      	bne.n	800465e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	4b17      	ldr	r3, [pc, #92]	; (8004698 <HAL_TIM_Base_Start_IT+0xdc>)
 800463a:	4013      	ands	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2b06      	cmp	r3, #6
 8004642:	d015      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0xb4>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800464a:	d011      	beq.n	8004670 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f042 0201 	orr.w	r2, r2, #1
 800465a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800465c:	e008      	b.n	8004670 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f042 0201 	orr.w	r2, r2, #1
 800466c:	601a      	str	r2, [r3, #0]
 800466e:	e000      	b.n	8004672 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004670:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004672:	2300      	movs	r3, #0
}
 8004674:	4618      	mov	r0, r3
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	40012c00 	.word	0x40012c00
 8004684:	40000400 	.word	0x40000400
 8004688:	40000800 	.word	0x40000800
 800468c:	40013400 	.word	0x40013400
 8004690:	40014000 	.word	0x40014000
 8004694:	40015000 	.word	0x40015000
 8004698:	00010007 	.word	0x00010007

0800469c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d122      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d11b      	bne.n	80046f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f06f 0202 	mvn.w	r2, #2
 80046c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	f003 0303 	and.w	r3, r3, #3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f905 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 80046e4:	e005      	b.n	80046f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f8f7 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f908 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	691b      	ldr	r3, [r3, #16]
 80046fe:	f003 0304 	and.w	r3, r3, #4
 8004702:	2b04      	cmp	r3, #4
 8004704:	d122      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0304 	and.w	r3, r3, #4
 8004710:	2b04      	cmp	r3, #4
 8004712:	d11b      	bne.n	800474c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f06f 0204 	mvn.w	r2, #4
 800471c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2202      	movs	r2, #2
 8004722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f8db 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 8004738:	e005      	b.n	8004746 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f8cd 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f8de 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	691b      	ldr	r3, [r3, #16]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b08      	cmp	r3, #8
 8004758:	d122      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68db      	ldr	r3, [r3, #12]
 8004760:	f003 0308 	and.w	r3, r3, #8
 8004764:	2b08      	cmp	r3, #8
 8004766:	d11b      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f06f 0208 	mvn.w	r2, #8
 8004770:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2204      	movs	r2, #4
 8004776:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	69db      	ldr	r3, [r3, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f8b1 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 800478c:	e005      	b.n	800479a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 f8a3 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f8b4 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f003 0310 	and.w	r3, r3, #16
 80047aa:	2b10      	cmp	r3, #16
 80047ac:	d122      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	68db      	ldr	r3, [r3, #12]
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b10      	cmp	r3, #16
 80047ba:	d11b      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f06f 0210 	mvn.w	r2, #16
 80047c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2208      	movs	r2, #8
 80047ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f887 	bl	80048ee <HAL_TIM_IC_CaptureCallback>
 80047e0:	e005      	b.n	80047ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f879 	bl	80048da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f000 f88a 	bl	8004902 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d10e      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	f003 0301 	and.w	r3, r3, #1
 800480c:	2b01      	cmp	r3, #1
 800480e:	d107      	bne.n	8004820 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f06f 0201 	mvn.w	r2, #1
 8004818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fc f96e 	bl	8000afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d10e      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004838:	2b80      	cmp	r3, #128	; 0x80
 800483a:	d107      	bne.n	800484c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f918 	bl	8004a7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800485a:	d10e      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004866:	2b80      	cmp	r3, #128	; 0x80
 8004868:	d107      	bne.n	800487a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004872:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f90b 	bl	8004a90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	2b40      	cmp	r3, #64	; 0x40
 8004886:	d10e      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68db      	ldr	r3, [r3, #12]
 800488e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004892:	2b40      	cmp	r3, #64	; 0x40
 8004894:	d107      	bne.n	80048a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800489e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048a0:	6878      	ldr	r0, [r7, #4]
 80048a2:	f000 f838 	bl	8004916 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	691b      	ldr	r3, [r3, #16]
 80048ac:	f003 0320 	and.w	r3, r3, #32
 80048b0:	2b20      	cmp	r3, #32
 80048b2:	d10e      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b20      	cmp	r3, #32
 80048c0:	d107      	bne.n	80048d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f06f 0220 	mvn.w	r2, #32
 80048ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f8cb 	bl	8004a68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d2:	bf00      	nop
 80048d4:	3708      	adds	r7, #8
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048da:	b480      	push	{r7}
 80048dc:	b083      	sub	sp, #12
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e2:	bf00      	nop
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f6:	bf00      	nop
 80048f8:	370c      	adds	r7, #12
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490a:	bf00      	nop
 800490c:	370c      	adds	r7, #12
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr

08004916 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr
	...

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a42      	ldr	r2, [pc, #264]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800494a:	d00f      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3e      	ldr	r2, [pc, #248]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3d      	ldr	r2, [pc, #244]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3c      	ldr	r2, [pc, #240]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a31      	ldr	r2, [pc, #196]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d01f      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498c:	d01b      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2e      	ldr	r2, [pc, #184]	; (8004a4c <TIM_Base_SetConfig+0x120>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d017      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2d      	ldr	r2, [pc, #180]	; (8004a50 <TIM_Base_SetConfig+0x124>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d013      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2c      	ldr	r2, [pc, #176]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00f      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00b      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2b      	ldr	r2, [pc, #172]	; (8004a60 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2a      	ldr	r2, [pc, #168]	; (8004a64 <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d003      	beq.n	80049c6 <TIM_Base_SetConfig+0x9a>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d108      	bne.n	80049d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	68db      	ldr	r3, [r3, #12]
 80049d2:	68fa      	ldr	r2, [r7, #12]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	4313      	orrs	r3, r2
 80049e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689a      	ldr	r2, [r3, #8]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	681a      	ldr	r2, [r3, #0]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <TIM_Base_SetConfig+0x11c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d013      	beq.n	8004a2c <TIM_Base_SetConfig+0x100>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a13      	ldr	r2, [pc, #76]	; (8004a54 <TIM_Base_SetConfig+0x128>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d00f      	beq.n	8004a2c <TIM_Base_SetConfig+0x100>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	4a13      	ldr	r2, [pc, #76]	; (8004a5c <TIM_Base_SetConfig+0x130>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d00b      	beq.n	8004a2c <TIM_Base_SetConfig+0x100>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a12      	ldr	r2, [pc, #72]	; (8004a60 <TIM_Base_SetConfig+0x134>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <TIM_Base_SetConfig+0x100>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a11      	ldr	r2, [pc, #68]	; (8004a64 <TIM_Base_SetConfig+0x138>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d003      	beq.n	8004a2c <TIM_Base_SetConfig+0x100>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a0c      	ldr	r2, [pc, #48]	; (8004a58 <TIM_Base_SetConfig+0x12c>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d103      	bne.n	8004a34 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691a      	ldr	r2, [r3, #16]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	615a      	str	r2, [r3, #20]
}
 8004a3a:	bf00      	nop
 8004a3c:	3714      	adds	r7, #20
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40012c00 	.word	0x40012c00
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40013400 	.word	0x40013400
 8004a58:	40015000 	.word	0x40015000
 8004a5c:	40014000 	.word	0x40014000
 8004a60:	40014400 	.word	0x40014400
 8004a64:	40014800 	.word	0x40014800

08004a68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b083      	sub	sp, #12
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a70:	bf00      	nop
 8004a72:	370c      	adds	r7, #12
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b083      	sub	sp, #12
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a84:	bf00      	nop
 8004a86:	370c      	adds	r7, #12
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004a98:	bf00      	nop
 8004a9a:	370c      	adds	r7, #12
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa2:	4770      	bx	lr

08004aa4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e040      	b.n	8004b38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc fb18 	bl	80010fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	; 0x24
 8004ad0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f022 0201 	bic.w	r2, r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f000 fc0e 	bl	8005304 <UART_SetConfig>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e022      	b.n	8004b38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d002      	beq.n	8004b00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fdd6 	bl	80056ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685a      	ldr	r2, [r3, #4]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689a      	ldr	r2, [r3, #8]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f000 fe5d 	bl	80057f0 <UART_CheckIdleState>
 8004b36:	4603      	mov	r3, r0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	; 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	f040 8082 	bne.w	8004c5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d002      	beq.n	8004b66 <HAL_UART_Transmit+0x26>
 8004b60:	88fb      	ldrh	r3, [r7, #6]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e07a      	b.n	8004c60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <HAL_UART_Transmit+0x38>
 8004b74:	2302      	movs	r3, #2
 8004b76:	e073      	b.n	8004c60 <HAL_UART_Transmit+0x120>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2221      	movs	r2, #33	; 0x21
 8004b8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b8e:	f7fc fc21 	bl	80013d4 <HAL_GetTick>
 8004b92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	88fa      	ldrh	r2, [r7, #6]
 8004b98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	88fa      	ldrh	r2, [r7, #6]
 8004ba0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bac:	d108      	bne.n	8004bc0 <HAL_UART_Transmit+0x80>
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d104      	bne.n	8004bc0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	61bb      	str	r3, [r7, #24]
 8004bbe:	e003      	b.n	8004bc8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004bd0:	e02d      	b.n	8004c2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	9300      	str	r3, [sp, #0]
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	2180      	movs	r1, #128	; 0x80
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 fe50 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e039      	b.n	8004c60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bf2:	69bb      	ldr	r3, [r7, #24]
 8004bf4:	881a      	ldrh	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bfe:	b292      	uxth	r2, r2
 8004c00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	3302      	adds	r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]
 8004c08:	e008      	b.n	8004c1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	781a      	ldrb	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	b292      	uxth	r2, r2
 8004c14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	3b01      	subs	r3, #1
 8004c26:	b29a      	uxth	r2, r3
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d1cb      	bne.n	8004bd2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2200      	movs	r2, #0
 8004c42:	2140      	movs	r1, #64	; 0x40
 8004c44:	68f8      	ldr	r0, [r7, #12]
 8004c46:	f000 fe1c 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d001      	beq.n	8004c54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e005      	b.n	8004c60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2220      	movs	r2, #32
 8004c58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	e000      	b.n	8004c60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004c5e:	2302      	movs	r3, #2
  }
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3720      	adds	r7, #32
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b08a      	sub	sp, #40	; 0x28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	60f8      	str	r0, [r7, #12]
 8004c70:	60b9      	str	r1, [r7, #8]
 8004c72:	4613      	mov	r3, r2
 8004c74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c7a:	2b20      	cmp	r3, #32
 8004c7c:	d13d      	bne.n	8004cfa <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <HAL_UART_Receive_IT+0x22>
 8004c84:	88fb      	ldrh	r3, [r7, #6]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d101      	bne.n	8004c8e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e036      	b.n	8004cfc <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d101      	bne.n	8004c9c <HAL_UART_Receive_IT+0x34>
 8004c98:	2302      	movs	r3, #2
 8004c9a:	e02f      	b.n	8004cfc <HAL_UART_Receive_IT+0x94>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d018      	beq.n	8004cea <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	e853 3f00 	ldrex	r3, [r3]
 8004cc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ccc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	623b      	str	r3, [r7, #32]
 8004cd8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cda:	69f9      	ldr	r1, [r7, #28]
 8004cdc:	6a3a      	ldr	r2, [r7, #32]
 8004cde:	e841 2300 	strex	r3, r2, [r1]
 8004ce2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1e6      	bne.n	8004cb8 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	461a      	mov	r2, r3
 8004cee:	68b9      	ldr	r1, [r7, #8]
 8004cf0:	68f8      	ldr	r0, [r7, #12]
 8004cf2:	f000 fe8b 	bl	8005a0c <UART_Start_Receive_IT>
 8004cf6:	4603      	mov	r3, r0
 8004cf8:	e000      	b.n	8004cfc <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004cfa:	2302      	movs	r3, #2
  }
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3728      	adds	r7, #40	; 0x28
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b0ba      	sub	sp, #232	; 0xe8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004d2e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004d32:	4013      	ands	r3, r2
 8004d34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d115      	bne.n	8004d6c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d44:	f003 0320 	and.w	r3, r3, #32
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d00f      	beq.n	8004d6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f003 0320 	and.w	r3, r3, #32
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d009      	beq.n	8004d6c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	f000 82a4 	beq.w	80052aa <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
      }
      return;
 8004d6a:	e29e      	b.n	80052aa <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	f000 8117 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d106      	bne.n	8004d90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004d86:	4b85      	ldr	r3, [pc, #532]	; (8004f9c <HAL_UART_IRQHandler+0x298>)
 8004d88:	4013      	ands	r3, r2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 810a 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d011      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xbc>
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00b      	beq.n	8004dc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	2201      	movs	r2, #1
 8004dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004db6:	f043 0201 	orr.w	r2, r3, #1
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d011      	beq.n	8004df0 <HAL_UART_IRQHandler+0xec>
 8004dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d00b      	beq.n	8004df0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004de6:	f043 0204 	orr.w	r2, r3, #4
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df4:	f003 0304 	and.w	r3, r3, #4
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d011      	beq.n	8004e20 <HAL_UART_IRQHandler+0x11c>
 8004dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00b      	beq.n	8004e20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2204      	movs	r2, #4
 8004e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e24:	f003 0308 	and.w	r3, r3, #8
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d017      	beq.n	8004e5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d105      	bne.n	8004e44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00b      	beq.n	8004e5c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	2208      	movs	r2, #8
 8004e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e52:	f043 0208 	orr.w	r2, r3, #8
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e60:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d012      	beq.n	8004e8e <HAL_UART_IRQHandler+0x18a>
 8004e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d00c      	beq.n	8004e8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e84:	f043 0220 	orr.w	r2, r3, #32
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 820a 	beq.w	80052ae <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e9e:	f003 0320 	and.w	r3, r3, #32
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00d      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d007      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d003      	beq.n	8004ec2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed6:	2b40      	cmp	r3, #64	; 0x40
 8004ed8:	d005      	beq.n	8004ee6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004ede:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d04f      	beq.n	8004f86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ee6:	6878      	ldr	r0, [r7, #4]
 8004ee8:	f000 fe3c 	bl	8005b64 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ef6:	2b40      	cmp	r3, #64	; 0x40
 8004ef8:	d141      	bne.n	8004f7e <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	3308      	adds	r3, #8
 8004f00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f18:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3308      	adds	r3, #8
 8004f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004f26:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1d9      	bne.n	8004efa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d013      	beq.n	8004f76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f52:	4a13      	ldr	r2, [pc, #76]	; (8004fa0 <HAL_UART_IRQHandler+0x29c>)
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f7fd fd42 	bl	80029e4 <HAL_DMA_Abort_IT>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d017      	beq.n	8004f96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004f70:	4610      	mov	r0, r2
 8004f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f74:	e00f      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f9ae 	bl	80052d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	e00b      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 f9aa 	bl	80052d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f84:	e007      	b.n	8004f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a6 	bl	80052d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004f94:	e18b      	b.n	80052ae <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f96:	bf00      	nop
    return;
 8004f98:	e189      	b.n	80052ae <HAL_UART_IRQHandler+0x5aa>
 8004f9a:	bf00      	nop
 8004f9c:	04000120 	.word	0x04000120
 8004fa0:	08005c2b 	.word	0x08005c2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	f040 8143 	bne.w	8005234 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 813c 	beq.w	8005234 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fc0:	f003 0310 	and.w	r3, r3, #16
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 8135 	beq.w	8005234 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	2210      	movs	r2, #16
 8004fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fdc:	2b40      	cmp	r3, #64	; 0x40
 8004fde:	f040 80b1 	bne.w	8005144 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 815d 	beq.w	80052b2 <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005002:	429a      	cmp	r2, r3
 8005004:	f080 8155 	bcs.w	80052b2 <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800500e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005016:	699b      	ldr	r3, [r3, #24]
 8005018:	2b20      	cmp	r3, #32
 800501a:	f000 8085 	beq.w	8005128 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800502a:	e853 3f00 	ldrex	r3, [r3]
 800502e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005036:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800503a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005048:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800504c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005050:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005054:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005058:	e841 2300 	strex	r3, r2, [r1]
 800505c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005060:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005064:	2b00      	cmp	r3, #0
 8005066:	d1da      	bne.n	800501e <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3308      	adds	r3, #8
 800506e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005070:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005072:	e853 3f00 	ldrex	r3, [r3]
 8005076:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005078:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800507a:	f023 0301 	bic.w	r3, r3, #1
 800507e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	3308      	adds	r3, #8
 8005088:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800508c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005090:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005092:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005094:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005098:	e841 2300 	strex	r3, r2, [r1]
 800509c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800509e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1e1      	bne.n	8005068 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	3308      	adds	r3, #8
 80050aa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80050ae:	e853 3f00 	ldrex	r3, [r3]
 80050b2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80050b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	3308      	adds	r3, #8
 80050c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80050c8:	66fa      	str	r2, [r7, #108]	; 0x6c
 80050ca:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050cc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80050ce:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80050d0:	e841 2300 	strex	r3, r2, [r1]
 80050d4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80050d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1e3      	bne.n	80050a4 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2220      	movs	r2, #32
 80050e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050f8:	f023 0310 	bic.w	r3, r3, #16
 80050fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	461a      	mov	r2, r3
 8005106:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800510a:	65bb      	str	r3, [r7, #88]	; 0x58
 800510c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005110:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e4      	bne.n	80050e8 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005122:	4618      	mov	r0, r3
 8005124:	f7fd fc25 	bl	8002972 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005134:	b29b      	uxth	r3, r3
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	b29b      	uxth	r3, r3
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8d5 	bl	80052ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005142:	e0b6      	b.n	80052b2 <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005150:	b29b      	uxth	r3, r3
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800515e:	b29b      	uxth	r3, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	f000 80a8 	beq.w	80052b6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8005166:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800516a:	2b00      	cmp	r3, #0
 800516c:	f000 80a3 	beq.w	80052b6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	e853 3f00 	ldrex	r3, [r3]
 800517c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800517e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005180:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005184:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005192:	647b      	str	r3, [r7, #68]	; 0x44
 8005194:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005196:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519a:	e841 2300 	strex	r3, r2, [r1]
 800519e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d1e4      	bne.n	8005170 <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3308      	adds	r3, #8
 80051ac:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	e853 3f00 	ldrex	r3, [r3]
 80051b4:	623b      	str	r3, [r7, #32]
   return(result);
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	f023 0301 	bic.w	r3, r3, #1
 80051bc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	3308      	adds	r3, #8
 80051c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80051ca:	633a      	str	r2, [r7, #48]	; 0x30
 80051cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80051d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051d2:	e841 2300 	strex	r3, r2, [r1]
 80051d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d1e3      	bne.n	80051a6 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2220      	movs	r2, #32
 80051e2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f6:	693b      	ldr	r3, [r7, #16]
 80051f8:	e853 3f00 	ldrex	r3, [r3]
 80051fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f023 0310 	bic.w	r3, r3, #16
 8005204:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005212:	61fb      	str	r3, [r7, #28]
 8005214:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005216:	69b9      	ldr	r1, [r7, #24]
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	e841 2300 	strex	r3, r2, [r1]
 800521e:	617b      	str	r3, [r7, #20]
   return(result);
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1e4      	bne.n	80051f0 <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005226:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 f85d 	bl	80052ec <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005232:	e040      	b.n	80052b6 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005238:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <HAL_UART_IRQHandler+0x55a>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005244:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005248:	2b00      	cmp	r3, #0
 800524a:	d008      	beq.n	800525e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005254:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 fe83 	bl	8005f62 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800525c:	e02e      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800525e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00e      	beq.n	8005288 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800526a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d008      	beq.n	8005288 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800527a:	2b00      	cmp	r3, #0
 800527c:	d01d      	beq.n	80052ba <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	4798      	blx	r3
    }
    return;
 8005286:	e018      	b.n	80052ba <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005288:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800528c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005290:	2b00      	cmp	r3, #0
 8005292:	d013      	beq.n	80052bc <HAL_UART_IRQHandler+0x5b8>
 8005294:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800529c:	2b00      	cmp	r3, #0
 800529e:	d00d      	beq.n	80052bc <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fcd8 	bl	8005c56 <UART_EndTransmit_IT>
    return;
 80052a6:	bf00      	nop
 80052a8:	e008      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80052aa:	bf00      	nop
 80052ac:	e006      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
    return;
 80052ae:	bf00      	nop
 80052b0:	e004      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80052b2:	bf00      	nop
 80052b4:	e002      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
      return;
 80052b6:	bf00      	nop
 80052b8:	e000      	b.n	80052bc <HAL_UART_IRQHandler+0x5b8>
    return;
 80052ba:	bf00      	nop
  }

}
 80052bc:	37e8      	adds	r7, #232	; 0xe8
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop

080052c4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
 80052f4:	460b      	mov	r3, r1
 80052f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800530c:	2300      	movs	r3, #0
 800530e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689a      	ldr	r2, [r3, #8]
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	691b      	ldr	r3, [r3, #16]
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	431a      	orrs	r2, r3
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681a      	ldr	r2, [r3, #0]
 800532e:	4baa      	ldr	r3, [pc, #680]	; (80055d8 <UART_SetConfig+0x2d4>)
 8005330:	4013      	ands	r3, r2
 8005332:	687a      	ldr	r2, [r7, #4]
 8005334:	6812      	ldr	r2, [r2, #0]
 8005336:	6979      	ldr	r1, [r7, #20]
 8005338:	430b      	orrs	r3, r1
 800533a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68da      	ldr	r2, [r3, #12]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	430a      	orrs	r2, r1
 8005350:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	430a      	orrs	r2, r1
 8005374:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a98      	ldr	r2, [pc, #608]	; (80055dc <UART_SetConfig+0x2d8>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d121      	bne.n	80053c4 <UART_SetConfig+0xc0>
 8005380:	4b97      	ldr	r3, [pc, #604]	; (80055e0 <UART_SetConfig+0x2dc>)
 8005382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005384:	f003 0303 	and.w	r3, r3, #3
 8005388:	2b03      	cmp	r3, #3
 800538a:	d817      	bhi.n	80053bc <UART_SetConfig+0xb8>
 800538c:	a201      	add	r2, pc, #4	; (adr r2, 8005394 <UART_SetConfig+0x90>)
 800538e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005392:	bf00      	nop
 8005394:	080053a5 	.word	0x080053a5
 8005398:	080053b1 	.word	0x080053b1
 800539c:	080053b7 	.word	0x080053b7
 80053a0:	080053ab 	.word	0x080053ab
 80053a4:	2301      	movs	r3, #1
 80053a6:	77fb      	strb	r3, [r7, #31]
 80053a8:	e0b2      	b.n	8005510 <UART_SetConfig+0x20c>
 80053aa:	2302      	movs	r3, #2
 80053ac:	77fb      	strb	r3, [r7, #31]
 80053ae:	e0af      	b.n	8005510 <UART_SetConfig+0x20c>
 80053b0:	2304      	movs	r3, #4
 80053b2:	77fb      	strb	r3, [r7, #31]
 80053b4:	e0ac      	b.n	8005510 <UART_SetConfig+0x20c>
 80053b6:	2308      	movs	r3, #8
 80053b8:	77fb      	strb	r3, [r7, #31]
 80053ba:	e0a9      	b.n	8005510 <UART_SetConfig+0x20c>
 80053bc:	2310      	movs	r3, #16
 80053be:	77fb      	strb	r3, [r7, #31]
 80053c0:	bf00      	nop
 80053c2:	e0a5      	b.n	8005510 <UART_SetConfig+0x20c>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a86      	ldr	r2, [pc, #536]	; (80055e4 <UART_SetConfig+0x2e0>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d123      	bne.n	8005416 <UART_SetConfig+0x112>
 80053ce:	4b84      	ldr	r3, [pc, #528]	; (80055e0 <UART_SetConfig+0x2dc>)
 80053d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80053d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053da:	d012      	beq.n	8005402 <UART_SetConfig+0xfe>
 80053dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e0:	d802      	bhi.n	80053e8 <UART_SetConfig+0xe4>
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d007      	beq.n	80053f6 <UART_SetConfig+0xf2>
 80053e6:	e012      	b.n	800540e <UART_SetConfig+0x10a>
 80053e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053ec:	d00c      	beq.n	8005408 <UART_SetConfig+0x104>
 80053ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80053f2:	d003      	beq.n	80053fc <UART_SetConfig+0xf8>
 80053f4:	e00b      	b.n	800540e <UART_SetConfig+0x10a>
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e089      	b.n	8005510 <UART_SetConfig+0x20c>
 80053fc:	2302      	movs	r3, #2
 80053fe:	77fb      	strb	r3, [r7, #31]
 8005400:	e086      	b.n	8005510 <UART_SetConfig+0x20c>
 8005402:	2304      	movs	r3, #4
 8005404:	77fb      	strb	r3, [r7, #31]
 8005406:	e083      	b.n	8005510 <UART_SetConfig+0x20c>
 8005408:	2308      	movs	r3, #8
 800540a:	77fb      	strb	r3, [r7, #31]
 800540c:	e080      	b.n	8005510 <UART_SetConfig+0x20c>
 800540e:	2310      	movs	r3, #16
 8005410:	77fb      	strb	r3, [r7, #31]
 8005412:	bf00      	nop
 8005414:	e07c      	b.n	8005510 <UART_SetConfig+0x20c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a73      	ldr	r2, [pc, #460]	; (80055e8 <UART_SetConfig+0x2e4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d123      	bne.n	8005468 <UART_SetConfig+0x164>
 8005420:	4b6f      	ldr	r3, [pc, #444]	; (80055e0 <UART_SetConfig+0x2dc>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8005428:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800542c:	d012      	beq.n	8005454 <UART_SetConfig+0x150>
 800542e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005432:	d802      	bhi.n	800543a <UART_SetConfig+0x136>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <UART_SetConfig+0x144>
 8005438:	e012      	b.n	8005460 <UART_SetConfig+0x15c>
 800543a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800543e:	d00c      	beq.n	800545a <UART_SetConfig+0x156>
 8005440:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005444:	d003      	beq.n	800544e <UART_SetConfig+0x14a>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x15c>
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e060      	b.n	8005510 <UART_SetConfig+0x20c>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e05d      	b.n	8005510 <UART_SetConfig+0x20c>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e05a      	b.n	8005510 <UART_SetConfig+0x20c>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e057      	b.n	8005510 <UART_SetConfig+0x20c>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	bf00      	nop
 8005466:	e053      	b.n	8005510 <UART_SetConfig+0x20c>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a5f      	ldr	r2, [pc, #380]	; (80055ec <UART_SetConfig+0x2e8>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d123      	bne.n	80054ba <UART_SetConfig+0x1b6>
 8005472:	4b5b      	ldr	r3, [pc, #364]	; (80055e0 <UART_SetConfig+0x2dc>)
 8005474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005476:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800547a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800547e:	d012      	beq.n	80054a6 <UART_SetConfig+0x1a2>
 8005480:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005484:	d802      	bhi.n	800548c <UART_SetConfig+0x188>
 8005486:	2b00      	cmp	r3, #0
 8005488:	d007      	beq.n	800549a <UART_SetConfig+0x196>
 800548a:	e012      	b.n	80054b2 <UART_SetConfig+0x1ae>
 800548c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005490:	d00c      	beq.n	80054ac <UART_SetConfig+0x1a8>
 8005492:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005496:	d003      	beq.n	80054a0 <UART_SetConfig+0x19c>
 8005498:	e00b      	b.n	80054b2 <UART_SetConfig+0x1ae>
 800549a:	2300      	movs	r3, #0
 800549c:	77fb      	strb	r3, [r7, #31]
 800549e:	e037      	b.n	8005510 <UART_SetConfig+0x20c>
 80054a0:	2302      	movs	r3, #2
 80054a2:	77fb      	strb	r3, [r7, #31]
 80054a4:	e034      	b.n	8005510 <UART_SetConfig+0x20c>
 80054a6:	2304      	movs	r3, #4
 80054a8:	77fb      	strb	r3, [r7, #31]
 80054aa:	e031      	b.n	8005510 <UART_SetConfig+0x20c>
 80054ac:	2308      	movs	r3, #8
 80054ae:	77fb      	strb	r3, [r7, #31]
 80054b0:	e02e      	b.n	8005510 <UART_SetConfig+0x20c>
 80054b2:	2310      	movs	r3, #16
 80054b4:	77fb      	strb	r3, [r7, #31]
 80054b6:	bf00      	nop
 80054b8:	e02a      	b.n	8005510 <UART_SetConfig+0x20c>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a4c      	ldr	r2, [pc, #304]	; (80055f0 <UART_SetConfig+0x2ec>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d123      	bne.n	800550c <UART_SetConfig+0x208>
 80054c4:	4b46      	ldr	r3, [pc, #280]	; (80055e0 <UART_SetConfig+0x2dc>)
 80054c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c8:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d012      	beq.n	80054f8 <UART_SetConfig+0x1f4>
 80054d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d6:	d802      	bhi.n	80054de <UART_SetConfig+0x1da>
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d007      	beq.n	80054ec <UART_SetConfig+0x1e8>
 80054dc:	e012      	b.n	8005504 <UART_SetConfig+0x200>
 80054de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054e2:	d00c      	beq.n	80054fe <UART_SetConfig+0x1fa>
 80054e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80054e8:	d003      	beq.n	80054f2 <UART_SetConfig+0x1ee>
 80054ea:	e00b      	b.n	8005504 <UART_SetConfig+0x200>
 80054ec:	2300      	movs	r3, #0
 80054ee:	77fb      	strb	r3, [r7, #31]
 80054f0:	e00e      	b.n	8005510 <UART_SetConfig+0x20c>
 80054f2:	2302      	movs	r3, #2
 80054f4:	77fb      	strb	r3, [r7, #31]
 80054f6:	e00b      	b.n	8005510 <UART_SetConfig+0x20c>
 80054f8:	2304      	movs	r3, #4
 80054fa:	77fb      	strb	r3, [r7, #31]
 80054fc:	e008      	b.n	8005510 <UART_SetConfig+0x20c>
 80054fe:	2308      	movs	r3, #8
 8005500:	77fb      	strb	r3, [r7, #31]
 8005502:	e005      	b.n	8005510 <UART_SetConfig+0x20c>
 8005504:	2310      	movs	r3, #16
 8005506:	77fb      	strb	r3, [r7, #31]
 8005508:	bf00      	nop
 800550a:	e001      	b.n	8005510 <UART_SetConfig+0x20c>
 800550c:	2310      	movs	r3, #16
 800550e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	69db      	ldr	r3, [r3, #28]
 8005514:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005518:	d16e      	bne.n	80055f8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 800551a:	7ffb      	ldrb	r3, [r7, #31]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d828      	bhi.n	8005572 <UART_SetConfig+0x26e>
 8005520:	a201      	add	r2, pc, #4	; (adr r2, 8005528 <UART_SetConfig+0x224>)
 8005522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005526:	bf00      	nop
 8005528:	0800554d 	.word	0x0800554d
 800552c:	08005555 	.word	0x08005555
 8005530:	0800555d 	.word	0x0800555d
 8005534:	08005573 	.word	0x08005573
 8005538:	08005563 	.word	0x08005563
 800553c:	08005573 	.word	0x08005573
 8005540:	08005573 	.word	0x08005573
 8005544:	08005573 	.word	0x08005573
 8005548:	0800556b 	.word	0x0800556b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800554c:	f7fe fd7c 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 8005550:	61b8      	str	r0, [r7, #24]
        break;
 8005552:	e013      	b.n	800557c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005554:	f7fe fd9a 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8005558:	61b8      	str	r0, [r7, #24]
        break;
 800555a:	e00f      	b.n	800557c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800555c:	4b25      	ldr	r3, [pc, #148]	; (80055f4 <UART_SetConfig+0x2f0>)
 800555e:	61bb      	str	r3, [r7, #24]
        break;
 8005560:	e00c      	b.n	800557c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005562:	f7fe fcfb 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8005566:	61b8      	str	r0, [r7, #24]
        break;
 8005568:	e008      	b.n	800557c <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800556a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800556e:	61bb      	str	r3, [r7, #24]
        break;
 8005570:	e004      	b.n	800557c <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 8005572:	2300      	movs	r3, #0
 8005574:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	77bb      	strb	r3, [r7, #30]
        break;
 800557a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	f000 8086 	beq.w	8005690 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	005a      	lsls	r2, r3, #1
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	085b      	lsrs	r3, r3, #1
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	b29b      	uxth	r3, r3
 800559a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	2b0f      	cmp	r3, #15
 80055a0:	d916      	bls.n	80055d0 <UART_SetConfig+0x2cc>
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d212      	bcs.n	80055d0 <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	f023 030f 	bic.w	r3, r3, #15
 80055b2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	085b      	lsrs	r3, r3, #1
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f003 0307 	and.w	r3, r3, #7
 80055be:	b29a      	uxth	r2, r3
 80055c0:	89fb      	ldrh	r3, [r7, #14]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	89fa      	ldrh	r2, [r7, #14]
 80055cc:	60da      	str	r2, [r3, #12]
 80055ce:	e05f      	b.n	8005690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	77bb      	strb	r3, [r7, #30]
 80055d4:	e05c      	b.n	8005690 <UART_SetConfig+0x38c>
 80055d6:	bf00      	nop
 80055d8:	efff69f3 	.word	0xefff69f3
 80055dc:	40013800 	.word	0x40013800
 80055e0:	40021000 	.word	0x40021000
 80055e4:	40004400 	.word	0x40004400
 80055e8:	40004800 	.word	0x40004800
 80055ec:	40004c00 	.word	0x40004c00
 80055f0:	40005000 	.word	0x40005000
 80055f4:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 80055f8:	7ffb      	ldrb	r3, [r7, #31]
 80055fa:	2b08      	cmp	r3, #8
 80055fc:	d827      	bhi.n	800564e <UART_SetConfig+0x34a>
 80055fe:	a201      	add	r2, pc, #4	; (adr r2, 8005604 <UART_SetConfig+0x300>)
 8005600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005604:	08005629 	.word	0x08005629
 8005608:	08005631 	.word	0x08005631
 800560c:	08005639 	.word	0x08005639
 8005610:	0800564f 	.word	0x0800564f
 8005614:	0800563f 	.word	0x0800563f
 8005618:	0800564f 	.word	0x0800564f
 800561c:	0800564f 	.word	0x0800564f
 8005620:	0800564f 	.word	0x0800564f
 8005624:	08005647 	.word	0x08005647
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005628:	f7fe fd0e 	bl	8004048 <HAL_RCC_GetPCLK1Freq>
 800562c:	61b8      	str	r0, [r7, #24]
        break;
 800562e:	e013      	b.n	8005658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005630:	f7fe fd2c 	bl	800408c <HAL_RCC_GetPCLK2Freq>
 8005634:	61b8      	str	r0, [r7, #24]
        break;
 8005636:	e00f      	b.n	8005658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005638:	4b1b      	ldr	r3, [pc, #108]	; (80056a8 <UART_SetConfig+0x3a4>)
 800563a:	61bb      	str	r3, [r7, #24]
        break;
 800563c:	e00c      	b.n	8005658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800563e:	f7fe fc8d 	bl	8003f5c <HAL_RCC_GetSysClockFreq>
 8005642:	61b8      	str	r0, [r7, #24]
        break;
 8005644:	e008      	b.n	8005658 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800564a:	61bb      	str	r3, [r7, #24]
        break;
 800564c:	e004      	b.n	8005658 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	77bb      	strb	r3, [r7, #30]
        break;
 8005656:	bf00      	nop
    }

    if (pclk != 0U)
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d018      	beq.n	8005690 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	085a      	lsrs	r2, r3, #1
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	441a      	add	r2, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005670:	b29b      	uxth	r3, r3
 8005672:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b0f      	cmp	r3, #15
 8005678:	d908      	bls.n	800568c <UART_SetConfig+0x388>
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005680:	d204      	bcs.n	800568c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	60da      	str	r2, [r3, #12]
 800568a:	e001      	b.n	8005690 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800568c:	2301      	movs	r3, #1
 800568e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2200      	movs	r2, #0
 8005694:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800569c:	7fbb      	ldrb	r3, [r7, #30]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3720      	adds	r7, #32
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	007a1200 	.word	0x007a1200

080056ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056ac:	b480      	push	{r7}
 80056ae:	b083      	sub	sp, #12
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056b8:	f003 0301 	and.w	r3, r3, #1
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d00a      	beq.n	80056f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	430a      	orrs	r2, r1
 80056f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0304 	and.w	r3, r3, #4
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0308 	and.w	r3, r3, #8
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01a      	beq.n	80057c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057aa:	d10a      	bne.n	80057c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	430a      	orrs	r2, r1
 80057c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00a      	beq.n	80057e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	605a      	str	r2, [r3, #4]
  }
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b086      	sub	sp, #24
 80057f4:	af02      	add	r7, sp, #8
 80057f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005800:	f7fb fde8 	bl	80013d4 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b08      	cmp	r3, #8
 8005812:	d10e      	bne.n	8005832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005818:	9300      	str	r3, [sp, #0]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f82d 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8005828:	4603      	mov	r3, r0
 800582a:	2b00      	cmp	r3, #0
 800582c:	d001      	beq.n	8005832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e023      	b.n	800587a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b04      	cmp	r3, #4
 800583e:	d10e      	bne.n	800585e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2200      	movs	r2, #0
 800584a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f817 	bl	8005882 <UART_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800585a:	2303      	movs	r3, #3
 800585c:	e00d      	b.n	800587a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2220      	movs	r2, #32
 8005862:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2220      	movs	r2, #32
 8005868:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}

08005882 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b09c      	sub	sp, #112	; 0x70
 8005886:	af00      	add	r7, sp, #0
 8005888:	60f8      	str	r0, [r7, #12]
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	4613      	mov	r3, r2
 8005890:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005892:	e0a5      	b.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	f000 80a1 	beq.w	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800589e:	f7fb fd99 	bl	80013d4 <HAL_GetTick>
 80058a2:	4602      	mov	r2, r0
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	1ad3      	subs	r3, r2, r3
 80058a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d302      	bcc.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80058ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d13e      	bne.n	8005932 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058bc:	e853 3f00 	ldrex	r3, [r3]
 80058c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80058c8:	667b      	str	r3, [r7, #100]	; 0x64
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80058d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80058da:	e841 2300 	strex	r3, r2, [r1]
 80058de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80058e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1e6      	bne.n	80058b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	3308      	adds	r3, #8
 80058ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f0:	e853 3f00 	ldrex	r3, [r3]
 80058f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	663b      	str	r3, [r7, #96]	; 0x60
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3308      	adds	r3, #8
 8005904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005906:	64ba      	str	r2, [r7, #72]	; 0x48
 8005908:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800590c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800590e:	e841 2300 	strex	r3, r2, [r1]
 8005912:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1e5      	bne.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2220      	movs	r2, #32
 800591e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2200      	movs	r2, #0
 800592a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e067      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d04f      	beq.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800594e:	d147      	bne.n	80059e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005958:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	e853 3f00 	ldrex	r3, [r3]
 8005966:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800596e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005978:	637b      	str	r3, [r7, #52]	; 0x34
 800597a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800597c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800597e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005980:	e841 2300 	strex	r3, r2, [r1]
 8005984:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005988:	2b00      	cmp	r3, #0
 800598a:	d1e6      	bne.n	800595a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	3308      	adds	r3, #8
 8005992:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	613b      	str	r3, [r7, #16]
   return(result);
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	f023 0301 	bic.w	r3, r3, #1
 80059a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	3308      	adds	r3, #8
 80059aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80059ac:	623a      	str	r2, [r7, #32]
 80059ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b0:	69f9      	ldr	r1, [r7, #28]
 80059b2:	6a3a      	ldr	r2, [r7, #32]
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d1e5      	bne.n	800598c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2220      	movs	r2, #32
 80059c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2220      	movs	r2, #32
 80059ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e010      	b.n	8005a02 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4013      	ands	r3, r2
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	bf0c      	ite	eq
 80059f0:	2301      	moveq	r3, #1
 80059f2:	2300      	movne	r3, #0
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	461a      	mov	r2, r3
 80059f8:	79fb      	ldrb	r3, [r7, #7]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	f43f af4a 	beq.w	8005894 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a00:	2300      	movs	r3, #0
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3770      	adds	r7, #112	; 0x70
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}
	...

08005a0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b091      	sub	sp, #68	; 0x44
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	4613      	mov	r3, r2
 8005a18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	68ba      	ldr	r2, [r7, #8]
 8005a1e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	88fa      	ldrh	r2, [r7, #6]
 8005a24:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a3e:	d10e      	bne.n	8005a5e <UART_Start_Receive_IT+0x52>
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	691b      	ldr	r3, [r3, #16]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d105      	bne.n	8005a54 <UART_Start_Receive_IT+0x48>
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a52:	e02d      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	22ff      	movs	r2, #255	; 0xff
 8005a58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a5c:	e028      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10d      	bne.n	8005a82 <UART_Start_Receive_IT+0x76>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d104      	bne.n	8005a78 <UART_Start_Receive_IT+0x6c>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	22ff      	movs	r2, #255	; 0xff
 8005a72:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a76:	e01b      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	227f      	movs	r2, #127	; 0x7f
 8005a7c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a80:	e016      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a8a:	d10d      	bne.n	8005aa8 <UART_Start_Receive_IT+0x9c>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <UART_Start_Receive_IT+0x92>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	227f      	movs	r2, #127	; 0x7f
 8005a98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a9c:	e008      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	223f      	movs	r2, #63	; 0x3f
 8005aa2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa6:	e003      	b.n	8005ab0 <UART_Start_Receive_IT+0xa4>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2222      	movs	r2, #34	; 0x22
 8005abc:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3308      	adds	r3, #8
 8005ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3308      	adds	r3, #8
 8005adc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ade:	637a      	str	r2, [r7, #52]	; 0x34
 8005ae0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ae4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005afa:	d107      	bne.n	8005b0c <UART_Start_Receive_IT+0x100>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d103      	bne.n	8005b0c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4a15      	ldr	r2, [pc, #84]	; (8005b5c <UART_Start_Receive_IT+0x150>)
 8005b08:	665a      	str	r2, [r3, #100]	; 0x64
 8005b0a:	e002      	b.n	8005b12 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a14      	ldr	r2, [pc, #80]	; (8005b60 <UART_Start_Receive_IT+0x154>)
 8005b10:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	613b      	str	r3, [r7, #16]
   return(result);
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005b2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	461a      	mov	r2, r3
 8005b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b38:	623b      	str	r3, [r7, #32]
 8005b3a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3c:	69f9      	ldr	r1, [r7, #28]
 8005b3e:	6a3a      	ldr	r2, [r7, #32]
 8005b40:	e841 2300 	strex	r3, r2, [r1]
 8005b44:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d1e6      	bne.n	8005b1a <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3744      	adds	r7, #68	; 0x44
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	08005e07 	.word	0x08005e07
 8005b60:	08005cab 	.word	0x08005cab

08005b64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b095      	sub	sp, #84	; 0x54
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b8a:	643b      	str	r3, [r7, #64]	; 0x40
 8005b8c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b90:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e6      	bne.n	8005b6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	f023 0301 	bic.w	r3, r3, #1
 8005bb4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3308      	adds	r3, #8
 8005bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bbe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e5      	bne.n	8005b9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d118      	bne.n	8005c0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	e853 3f00 	ldrex	r3, [r3]
 8005be6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0310 	bic.w	r3, r3, #16
 8005bee:	647b      	str	r3, [r7, #68]	; 0x44
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfc:	6979      	ldr	r1, [r7, #20]
 8005bfe:	69ba      	ldr	r2, [r7, #24]
 8005c00:	e841 2300 	strex	r3, r2, [r1]
 8005c04:	613b      	str	r3, [r7, #16]
   return(result);
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d1e6      	bne.n	8005bda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2220      	movs	r2, #32
 8005c10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005c1e:	bf00      	nop
 8005c20:	3754      	adds	r7, #84	; 0x54
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr

08005c2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b084      	sub	sp, #16
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fb45 	bl	80052d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c4e:	bf00      	nop
 8005c50:	3710      	adds	r7, #16
 8005c52:	46bd      	mov	sp, r7
 8005c54:	bd80      	pop	{r7, pc}

08005c56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b088      	sub	sp, #32
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	e853 3f00 	ldrex	r3, [r3]
 8005c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c72:	61fb      	str	r3, [r7, #28]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	461a      	mov	r2, r3
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6979      	ldr	r1, [r7, #20]
 8005c82:	69ba      	ldr	r2, [r7, #24]
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	613b      	str	r3, [r7, #16]
   return(result);
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e6      	bne.n	8005c5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff fb11 	bl	80052c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ca2:	bf00      	nop
 8005ca4:	3720      	adds	r7, #32
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b096      	sub	sp, #88	; 0x58
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cb8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cc0:	2b22      	cmp	r3, #34	; 0x22
 8005cc2:	f040 8094 	bne.w	8005dee <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005ccc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005cd0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005cd4:	b2d9      	uxtb	r1, r3
 8005cd6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce0:	400a      	ands	r2, r1
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005cf6:	b29b      	uxth	r3, r3
 8005cf8:	3b01      	subs	r3, #1
 8005cfa:	b29a      	uxth	r2, r3
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d177      	bne.n	8005dfe <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d16:	e853 3f00 	ldrex	r3, [r3]
 8005d1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d22:	653b      	str	r3, [r7, #80]	; 0x50
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	461a      	mov	r2, r3
 8005d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005d2c:	647b      	str	r3, [r7, #68]	; 0x44
 8005d2e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d30:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d34:	e841 2300 	strex	r3, r2, [r1]
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d1e6      	bne.n	8005d0e <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3308      	adds	r3, #8
 8005d46:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	623b      	str	r3, [r7, #32]
   return(result);
 8005d50:	6a3b      	ldr	r3, [r7, #32]
 8005d52:	f023 0301 	bic.w	r3, r3, #1
 8005d56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3308      	adds	r3, #8
 8005d5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d60:	633a      	str	r2, [r7, #48]	; 0x30
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e5      	bne.n	8005d40 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2220      	movs	r2, #32
 8005d78:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d12e      	bne.n	8005de6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	e853 3f00 	ldrex	r3, [r3]
 8005d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f023 0310 	bic.w	r3, r3, #16
 8005da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	461a      	mov	r2, r3
 8005daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db0:	69b9      	ldr	r1, [r7, #24]
 8005db2:	69fa      	ldr	r2, [r7, #28]
 8005db4:	e841 2300 	strex	r3, r2, [r1]
 8005db8:	617b      	str	r3, [r7, #20]
   return(result);
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d1e6      	bne.n	8005d8e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	69db      	ldr	r3, [r3, #28]
 8005dc6:	f003 0310 	and.w	r3, r3, #16
 8005dca:	2b10      	cmp	r3, #16
 8005dcc:	d103      	bne.n	8005dd6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2210      	movs	r2, #16
 8005dd4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005ddc:	4619      	mov	r1, r3
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7ff fa84 	bl	80052ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005de4:	e00b      	b.n	8005dfe <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fa fa52 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8005dec:	e007      	b.n	8005dfe <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	699a      	ldr	r2, [r3, #24]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 0208 	orr.w	r2, r2, #8
 8005dfc:	619a      	str	r2, [r3, #24]
}
 8005dfe:	bf00      	nop
 8005e00:	3758      	adds	r7, #88	; 0x58
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b096      	sub	sp, #88	; 0x58
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005e14:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e1c:	2b22      	cmp	r3, #34	; 0x22
 8005e1e:	f040 8094 	bne.w	8005f4a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005e28:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e30:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005e32:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005e36:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e40:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e46:	1c9a      	adds	r2, r3, #2
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	3b01      	subs	r3, #1
 8005e56:	b29a      	uxth	r2, r3
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005e64:	b29b      	uxth	r3, r3
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d177      	bne.n	8005f5a <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e72:	e853 3f00 	ldrex	r3, [r3]
 8005e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e88:	643b      	str	r3, [r7, #64]	; 0x40
 8005e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005e90:	e841 2300 	strex	r3, r2, [r1]
 8005e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d1e6      	bne.n	8005e6a <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	3308      	adds	r3, #8
 8005ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6a3b      	ldr	r3, [r7, #32]
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	f023 0301 	bic.w	r3, r3, #1
 8005eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	3308      	adds	r3, #8
 8005eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	d12e      	bne.n	8005f42 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	e853 3f00 	ldrex	r3, [r3]
 8005ef6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f023 0310 	bic.w	r3, r3, #16
 8005efe:	647b      	str	r3, [r7, #68]	; 0x44
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	461a      	mov	r2, r3
 8005f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f08:	61bb      	str	r3, [r7, #24]
 8005f0a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0c:	6979      	ldr	r1, [r7, #20]
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	e841 2300 	strex	r3, r2, [r1]
 8005f14:	613b      	str	r3, [r7, #16]
   return(result);
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d1e6      	bne.n	8005eea <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	69db      	ldr	r3, [r3, #28]
 8005f22:	f003 0310 	and.w	r3, r3, #16
 8005f26:	2b10      	cmp	r3, #16
 8005f28:	d103      	bne.n	8005f32 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2210      	movs	r2, #16
 8005f30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005f38:	4619      	mov	r1, r3
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7ff f9d6 	bl	80052ec <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005f40:	e00b      	b.n	8005f5a <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f7fa f9a4 	bl	8000290 <HAL_UART_RxCpltCallback>
}
 8005f48:	e007      	b.n	8005f5a <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f042 0208 	orr.w	r2, r2, #8
 8005f58:	619a      	str	r2, [r3, #24]
}
 8005f5a:	bf00      	nop
 8005f5c:	3758      	adds	r7, #88	; 0x58
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005f6a:	bf00      	nop
 8005f6c:	370c      	adds	r7, #12
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	; (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	2000001c 	.word	0x2000001c

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	4e0d      	ldr	r6, [pc, #52]	; (8005fbc <__libc_init_array+0x38>)
 8005f88:	4c0d      	ldr	r4, [pc, #52]	; (8005fc0 <__libc_init_array+0x3c>)
 8005f8a:	1ba4      	subs	r4, r4, r6
 8005f8c:	10a4      	asrs	r4, r4, #2
 8005f8e:	2500      	movs	r5, #0
 8005f90:	42a5      	cmp	r5, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	4e0b      	ldr	r6, [pc, #44]	; (8005fc4 <__libc_init_array+0x40>)
 8005f96:	4c0c      	ldr	r4, [pc, #48]	; (8005fc8 <__libc_init_array+0x44>)
 8005f98:	f000 fc26 	bl	80067e8 <_init>
 8005f9c:	1ba4      	subs	r4, r4, r6
 8005f9e:	10a4      	asrs	r4, r4, #2
 8005fa0:	2500      	movs	r5, #0
 8005fa2:	42a5      	cmp	r5, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fac:	4798      	blx	r3
 8005fae:	3501      	adds	r5, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005fb6:	4798      	blx	r3
 8005fb8:	3501      	adds	r5, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	080068e0 	.word	0x080068e0
 8005fc0:	080068e0 	.word	0x080068e0
 8005fc4:	080068e0 	.word	0x080068e0
 8005fc8:	080068e4 	.word	0x080068e4

08005fcc <memset>:
 8005fcc:	4402      	add	r2, r0
 8005fce:	4603      	mov	r3, r0
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d100      	bne.n	8005fd6 <memset+0xa>
 8005fd4:	4770      	bx	lr
 8005fd6:	f803 1b01 	strb.w	r1, [r3], #1
 8005fda:	e7f9      	b.n	8005fd0 <memset+0x4>

08005fdc <siprintf>:
 8005fdc:	b40e      	push	{r1, r2, r3}
 8005fde:	b500      	push	{lr}
 8005fe0:	b09c      	sub	sp, #112	; 0x70
 8005fe2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fe4:	9002      	str	r0, [sp, #8]
 8005fe6:	9006      	str	r0, [sp, #24]
 8005fe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005fec:	4809      	ldr	r0, [pc, #36]	; (8006014 <siprintf+0x38>)
 8005fee:	9107      	str	r1, [sp, #28]
 8005ff0:	9104      	str	r1, [sp, #16]
 8005ff2:	4909      	ldr	r1, [pc, #36]	; (8006018 <siprintf+0x3c>)
 8005ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ff8:	9105      	str	r1, [sp, #20]
 8005ffa:	6800      	ldr	r0, [r0, #0]
 8005ffc:	9301      	str	r3, [sp, #4]
 8005ffe:	a902      	add	r1, sp, #8
 8006000:	f000 f866 	bl	80060d0 <_svfiprintf_r>
 8006004:	9b02      	ldr	r3, [sp, #8]
 8006006:	2200      	movs	r2, #0
 8006008:	701a      	strb	r2, [r3, #0]
 800600a:	b01c      	add	sp, #112	; 0x70
 800600c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006010:	b003      	add	sp, #12
 8006012:	4770      	bx	lr
 8006014:	2000001c 	.word	0x2000001c
 8006018:	ffff0208 	.word	0xffff0208

0800601c <__ssputs_r>:
 800601c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006020:	688e      	ldr	r6, [r1, #8]
 8006022:	429e      	cmp	r6, r3
 8006024:	4682      	mov	sl, r0
 8006026:	460c      	mov	r4, r1
 8006028:	4690      	mov	r8, r2
 800602a:	4699      	mov	r9, r3
 800602c:	d837      	bhi.n	800609e <__ssputs_r+0x82>
 800602e:	898a      	ldrh	r2, [r1, #12]
 8006030:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006034:	d031      	beq.n	800609a <__ssputs_r+0x7e>
 8006036:	6825      	ldr	r5, [r4, #0]
 8006038:	6909      	ldr	r1, [r1, #16]
 800603a:	1a6f      	subs	r7, r5, r1
 800603c:	6965      	ldr	r5, [r4, #20]
 800603e:	2302      	movs	r3, #2
 8006040:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006044:	fb95 f5f3 	sdiv	r5, r5, r3
 8006048:	f109 0301 	add.w	r3, r9, #1
 800604c:	443b      	add	r3, r7
 800604e:	429d      	cmp	r5, r3
 8006050:	bf38      	it	cc
 8006052:	461d      	movcc	r5, r3
 8006054:	0553      	lsls	r3, r2, #21
 8006056:	d530      	bpl.n	80060ba <__ssputs_r+0x9e>
 8006058:	4629      	mov	r1, r5
 800605a:	f000 fb2b 	bl	80066b4 <_malloc_r>
 800605e:	4606      	mov	r6, r0
 8006060:	b950      	cbnz	r0, 8006078 <__ssputs_r+0x5c>
 8006062:	230c      	movs	r3, #12
 8006064:	f8ca 3000 	str.w	r3, [sl]
 8006068:	89a3      	ldrh	r3, [r4, #12]
 800606a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606e:	81a3      	strh	r3, [r4, #12]
 8006070:	f04f 30ff 	mov.w	r0, #4294967295
 8006074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006078:	463a      	mov	r2, r7
 800607a:	6921      	ldr	r1, [r4, #16]
 800607c:	f000 faa8 	bl	80065d0 <memcpy>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	6126      	str	r6, [r4, #16]
 800608e:	6165      	str	r5, [r4, #20]
 8006090:	443e      	add	r6, r7
 8006092:	1bed      	subs	r5, r5, r7
 8006094:	6026      	str	r6, [r4, #0]
 8006096:	60a5      	str	r5, [r4, #8]
 8006098:	464e      	mov	r6, r9
 800609a:	454e      	cmp	r6, r9
 800609c:	d900      	bls.n	80060a0 <__ssputs_r+0x84>
 800609e:	464e      	mov	r6, r9
 80060a0:	4632      	mov	r2, r6
 80060a2:	4641      	mov	r1, r8
 80060a4:	6820      	ldr	r0, [r4, #0]
 80060a6:	f000 fa9e 	bl	80065e6 <memmove>
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	1b9b      	subs	r3, r3, r6
 80060ae:	60a3      	str	r3, [r4, #8]
 80060b0:	6823      	ldr	r3, [r4, #0]
 80060b2:	441e      	add	r6, r3
 80060b4:	6026      	str	r6, [r4, #0]
 80060b6:	2000      	movs	r0, #0
 80060b8:	e7dc      	b.n	8006074 <__ssputs_r+0x58>
 80060ba:	462a      	mov	r2, r5
 80060bc:	f000 fb54 	bl	8006768 <_realloc_r>
 80060c0:	4606      	mov	r6, r0
 80060c2:	2800      	cmp	r0, #0
 80060c4:	d1e2      	bne.n	800608c <__ssputs_r+0x70>
 80060c6:	6921      	ldr	r1, [r4, #16]
 80060c8:	4650      	mov	r0, sl
 80060ca:	f000 faa5 	bl	8006618 <_free_r>
 80060ce:	e7c8      	b.n	8006062 <__ssputs_r+0x46>

080060d0 <_svfiprintf_r>:
 80060d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060d4:	461d      	mov	r5, r3
 80060d6:	898b      	ldrh	r3, [r1, #12]
 80060d8:	061f      	lsls	r7, r3, #24
 80060da:	b09d      	sub	sp, #116	; 0x74
 80060dc:	4680      	mov	r8, r0
 80060de:	460c      	mov	r4, r1
 80060e0:	4616      	mov	r6, r2
 80060e2:	d50f      	bpl.n	8006104 <_svfiprintf_r+0x34>
 80060e4:	690b      	ldr	r3, [r1, #16]
 80060e6:	b96b      	cbnz	r3, 8006104 <_svfiprintf_r+0x34>
 80060e8:	2140      	movs	r1, #64	; 0x40
 80060ea:	f000 fae3 	bl	80066b4 <_malloc_r>
 80060ee:	6020      	str	r0, [r4, #0]
 80060f0:	6120      	str	r0, [r4, #16]
 80060f2:	b928      	cbnz	r0, 8006100 <_svfiprintf_r+0x30>
 80060f4:	230c      	movs	r3, #12
 80060f6:	f8c8 3000 	str.w	r3, [r8]
 80060fa:	f04f 30ff 	mov.w	r0, #4294967295
 80060fe:	e0c8      	b.n	8006292 <_svfiprintf_r+0x1c2>
 8006100:	2340      	movs	r3, #64	; 0x40
 8006102:	6163      	str	r3, [r4, #20]
 8006104:	2300      	movs	r3, #0
 8006106:	9309      	str	r3, [sp, #36]	; 0x24
 8006108:	2320      	movs	r3, #32
 800610a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800610e:	2330      	movs	r3, #48	; 0x30
 8006110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006114:	9503      	str	r5, [sp, #12]
 8006116:	f04f 0b01 	mov.w	fp, #1
 800611a:	4637      	mov	r7, r6
 800611c:	463d      	mov	r5, r7
 800611e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006122:	b10b      	cbz	r3, 8006128 <_svfiprintf_r+0x58>
 8006124:	2b25      	cmp	r3, #37	; 0x25
 8006126:	d13e      	bne.n	80061a6 <_svfiprintf_r+0xd6>
 8006128:	ebb7 0a06 	subs.w	sl, r7, r6
 800612c:	d00b      	beq.n	8006146 <_svfiprintf_r+0x76>
 800612e:	4653      	mov	r3, sl
 8006130:	4632      	mov	r2, r6
 8006132:	4621      	mov	r1, r4
 8006134:	4640      	mov	r0, r8
 8006136:	f7ff ff71 	bl	800601c <__ssputs_r>
 800613a:	3001      	adds	r0, #1
 800613c:	f000 80a4 	beq.w	8006288 <_svfiprintf_r+0x1b8>
 8006140:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006142:	4453      	add	r3, sl
 8006144:	9309      	str	r3, [sp, #36]	; 0x24
 8006146:	783b      	ldrb	r3, [r7, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	f000 809d 	beq.w	8006288 <_svfiprintf_r+0x1b8>
 800614e:	2300      	movs	r3, #0
 8006150:	f04f 32ff 	mov.w	r2, #4294967295
 8006154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006158:	9304      	str	r3, [sp, #16]
 800615a:	9307      	str	r3, [sp, #28]
 800615c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006160:	931a      	str	r3, [sp, #104]	; 0x68
 8006162:	462f      	mov	r7, r5
 8006164:	2205      	movs	r2, #5
 8006166:	f817 1b01 	ldrb.w	r1, [r7], #1
 800616a:	4850      	ldr	r0, [pc, #320]	; (80062ac <_svfiprintf_r+0x1dc>)
 800616c:	f7fa f840 	bl	80001f0 <memchr>
 8006170:	9b04      	ldr	r3, [sp, #16]
 8006172:	b9d0      	cbnz	r0, 80061aa <_svfiprintf_r+0xda>
 8006174:	06d9      	lsls	r1, r3, #27
 8006176:	bf44      	itt	mi
 8006178:	2220      	movmi	r2, #32
 800617a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800617e:	071a      	lsls	r2, r3, #28
 8006180:	bf44      	itt	mi
 8006182:	222b      	movmi	r2, #43	; 0x2b
 8006184:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006188:	782a      	ldrb	r2, [r5, #0]
 800618a:	2a2a      	cmp	r2, #42	; 0x2a
 800618c:	d015      	beq.n	80061ba <_svfiprintf_r+0xea>
 800618e:	9a07      	ldr	r2, [sp, #28]
 8006190:	462f      	mov	r7, r5
 8006192:	2000      	movs	r0, #0
 8006194:	250a      	movs	r5, #10
 8006196:	4639      	mov	r1, r7
 8006198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619c:	3b30      	subs	r3, #48	; 0x30
 800619e:	2b09      	cmp	r3, #9
 80061a0:	d94d      	bls.n	800623e <_svfiprintf_r+0x16e>
 80061a2:	b1b8      	cbz	r0, 80061d4 <_svfiprintf_r+0x104>
 80061a4:	e00f      	b.n	80061c6 <_svfiprintf_r+0xf6>
 80061a6:	462f      	mov	r7, r5
 80061a8:	e7b8      	b.n	800611c <_svfiprintf_r+0x4c>
 80061aa:	4a40      	ldr	r2, [pc, #256]	; (80062ac <_svfiprintf_r+0x1dc>)
 80061ac:	1a80      	subs	r0, r0, r2
 80061ae:	fa0b f000 	lsl.w	r0, fp, r0
 80061b2:	4318      	orrs	r0, r3
 80061b4:	9004      	str	r0, [sp, #16]
 80061b6:	463d      	mov	r5, r7
 80061b8:	e7d3      	b.n	8006162 <_svfiprintf_r+0x92>
 80061ba:	9a03      	ldr	r2, [sp, #12]
 80061bc:	1d11      	adds	r1, r2, #4
 80061be:	6812      	ldr	r2, [r2, #0]
 80061c0:	9103      	str	r1, [sp, #12]
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	db01      	blt.n	80061ca <_svfiprintf_r+0xfa>
 80061c6:	9207      	str	r2, [sp, #28]
 80061c8:	e004      	b.n	80061d4 <_svfiprintf_r+0x104>
 80061ca:	4252      	negs	r2, r2
 80061cc:	f043 0302 	orr.w	r3, r3, #2
 80061d0:	9207      	str	r2, [sp, #28]
 80061d2:	9304      	str	r3, [sp, #16]
 80061d4:	783b      	ldrb	r3, [r7, #0]
 80061d6:	2b2e      	cmp	r3, #46	; 0x2e
 80061d8:	d10c      	bne.n	80061f4 <_svfiprintf_r+0x124>
 80061da:	787b      	ldrb	r3, [r7, #1]
 80061dc:	2b2a      	cmp	r3, #42	; 0x2a
 80061de:	d133      	bne.n	8006248 <_svfiprintf_r+0x178>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	1d1a      	adds	r2, r3, #4
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	9203      	str	r2, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	bfb8      	it	lt
 80061ec:	f04f 33ff 	movlt.w	r3, #4294967295
 80061f0:	3702      	adds	r7, #2
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	4d2e      	ldr	r5, [pc, #184]	; (80062b0 <_svfiprintf_r+0x1e0>)
 80061f6:	7839      	ldrb	r1, [r7, #0]
 80061f8:	2203      	movs	r2, #3
 80061fa:	4628      	mov	r0, r5
 80061fc:	f7f9 fff8 	bl	80001f0 <memchr>
 8006200:	b138      	cbz	r0, 8006212 <_svfiprintf_r+0x142>
 8006202:	2340      	movs	r3, #64	; 0x40
 8006204:	1b40      	subs	r0, r0, r5
 8006206:	fa03 f000 	lsl.w	r0, r3, r0
 800620a:	9b04      	ldr	r3, [sp, #16]
 800620c:	4303      	orrs	r3, r0
 800620e:	3701      	adds	r7, #1
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	7839      	ldrb	r1, [r7, #0]
 8006214:	4827      	ldr	r0, [pc, #156]	; (80062b4 <_svfiprintf_r+0x1e4>)
 8006216:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800621a:	2206      	movs	r2, #6
 800621c:	1c7e      	adds	r6, r7, #1
 800621e:	f7f9 ffe7 	bl	80001f0 <memchr>
 8006222:	2800      	cmp	r0, #0
 8006224:	d038      	beq.n	8006298 <_svfiprintf_r+0x1c8>
 8006226:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <_svfiprintf_r+0x1e8>)
 8006228:	bb13      	cbnz	r3, 8006270 <_svfiprintf_r+0x1a0>
 800622a:	9b03      	ldr	r3, [sp, #12]
 800622c:	3307      	adds	r3, #7
 800622e:	f023 0307 	bic.w	r3, r3, #7
 8006232:	3308      	adds	r3, #8
 8006234:	9303      	str	r3, [sp, #12]
 8006236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006238:	444b      	add	r3, r9
 800623a:	9309      	str	r3, [sp, #36]	; 0x24
 800623c:	e76d      	b.n	800611a <_svfiprintf_r+0x4a>
 800623e:	fb05 3202 	mla	r2, r5, r2, r3
 8006242:	2001      	movs	r0, #1
 8006244:	460f      	mov	r7, r1
 8006246:	e7a6      	b.n	8006196 <_svfiprintf_r+0xc6>
 8006248:	2300      	movs	r3, #0
 800624a:	3701      	adds	r7, #1
 800624c:	9305      	str	r3, [sp, #20]
 800624e:	4619      	mov	r1, r3
 8006250:	250a      	movs	r5, #10
 8006252:	4638      	mov	r0, r7
 8006254:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006258:	3a30      	subs	r2, #48	; 0x30
 800625a:	2a09      	cmp	r2, #9
 800625c:	d903      	bls.n	8006266 <_svfiprintf_r+0x196>
 800625e:	2b00      	cmp	r3, #0
 8006260:	d0c8      	beq.n	80061f4 <_svfiprintf_r+0x124>
 8006262:	9105      	str	r1, [sp, #20]
 8006264:	e7c6      	b.n	80061f4 <_svfiprintf_r+0x124>
 8006266:	fb05 2101 	mla	r1, r5, r1, r2
 800626a:	2301      	movs	r3, #1
 800626c:	4607      	mov	r7, r0
 800626e:	e7f0      	b.n	8006252 <_svfiprintf_r+0x182>
 8006270:	ab03      	add	r3, sp, #12
 8006272:	9300      	str	r3, [sp, #0]
 8006274:	4622      	mov	r2, r4
 8006276:	4b11      	ldr	r3, [pc, #68]	; (80062bc <_svfiprintf_r+0x1ec>)
 8006278:	a904      	add	r1, sp, #16
 800627a:	4640      	mov	r0, r8
 800627c:	f3af 8000 	nop.w
 8006280:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006284:	4681      	mov	r9, r0
 8006286:	d1d6      	bne.n	8006236 <_svfiprintf_r+0x166>
 8006288:	89a3      	ldrh	r3, [r4, #12]
 800628a:	065b      	lsls	r3, r3, #25
 800628c:	f53f af35 	bmi.w	80060fa <_svfiprintf_r+0x2a>
 8006290:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006292:	b01d      	add	sp, #116	; 0x74
 8006294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006298:	ab03      	add	r3, sp, #12
 800629a:	9300      	str	r3, [sp, #0]
 800629c:	4622      	mov	r2, r4
 800629e:	4b07      	ldr	r3, [pc, #28]	; (80062bc <_svfiprintf_r+0x1ec>)
 80062a0:	a904      	add	r1, sp, #16
 80062a2:	4640      	mov	r0, r8
 80062a4:	f000 f882 	bl	80063ac <_printf_i>
 80062a8:	e7ea      	b.n	8006280 <_svfiprintf_r+0x1b0>
 80062aa:	bf00      	nop
 80062ac:	080068ac 	.word	0x080068ac
 80062b0:	080068b2 	.word	0x080068b2
 80062b4:	080068b6 	.word	0x080068b6
 80062b8:	00000000 	.word	0x00000000
 80062bc:	0800601d 	.word	0x0800601d

080062c0 <_printf_common>:
 80062c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062c4:	4691      	mov	r9, r2
 80062c6:	461f      	mov	r7, r3
 80062c8:	688a      	ldr	r2, [r1, #8]
 80062ca:	690b      	ldr	r3, [r1, #16]
 80062cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80062d0:	4293      	cmp	r3, r2
 80062d2:	bfb8      	it	lt
 80062d4:	4613      	movlt	r3, r2
 80062d6:	f8c9 3000 	str.w	r3, [r9]
 80062da:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062de:	4606      	mov	r6, r0
 80062e0:	460c      	mov	r4, r1
 80062e2:	b112      	cbz	r2, 80062ea <_printf_common+0x2a>
 80062e4:	3301      	adds	r3, #1
 80062e6:	f8c9 3000 	str.w	r3, [r9]
 80062ea:	6823      	ldr	r3, [r4, #0]
 80062ec:	0699      	lsls	r1, r3, #26
 80062ee:	bf42      	ittt	mi
 80062f0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80062f4:	3302      	addmi	r3, #2
 80062f6:	f8c9 3000 	strmi.w	r3, [r9]
 80062fa:	6825      	ldr	r5, [r4, #0]
 80062fc:	f015 0506 	ands.w	r5, r5, #6
 8006300:	d107      	bne.n	8006312 <_printf_common+0x52>
 8006302:	f104 0a19 	add.w	sl, r4, #25
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	f8d9 2000 	ldr.w	r2, [r9]
 800630c:	1a9b      	subs	r3, r3, r2
 800630e:	42ab      	cmp	r3, r5
 8006310:	dc28      	bgt.n	8006364 <_printf_common+0xa4>
 8006312:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006316:	6822      	ldr	r2, [r4, #0]
 8006318:	3300      	adds	r3, #0
 800631a:	bf18      	it	ne
 800631c:	2301      	movne	r3, #1
 800631e:	0692      	lsls	r2, r2, #26
 8006320:	d42d      	bmi.n	800637e <_printf_common+0xbe>
 8006322:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006326:	4639      	mov	r1, r7
 8006328:	4630      	mov	r0, r6
 800632a:	47c0      	blx	r8
 800632c:	3001      	adds	r0, #1
 800632e:	d020      	beq.n	8006372 <_printf_common+0xb2>
 8006330:	6823      	ldr	r3, [r4, #0]
 8006332:	68e5      	ldr	r5, [r4, #12]
 8006334:	f8d9 2000 	ldr.w	r2, [r9]
 8006338:	f003 0306 	and.w	r3, r3, #6
 800633c:	2b04      	cmp	r3, #4
 800633e:	bf08      	it	eq
 8006340:	1aad      	subeq	r5, r5, r2
 8006342:	68a3      	ldr	r3, [r4, #8]
 8006344:	6922      	ldr	r2, [r4, #16]
 8006346:	bf0c      	ite	eq
 8006348:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800634c:	2500      	movne	r5, #0
 800634e:	4293      	cmp	r3, r2
 8006350:	bfc4      	itt	gt
 8006352:	1a9b      	subgt	r3, r3, r2
 8006354:	18ed      	addgt	r5, r5, r3
 8006356:	f04f 0900 	mov.w	r9, #0
 800635a:	341a      	adds	r4, #26
 800635c:	454d      	cmp	r5, r9
 800635e:	d11a      	bne.n	8006396 <_printf_common+0xd6>
 8006360:	2000      	movs	r0, #0
 8006362:	e008      	b.n	8006376 <_printf_common+0xb6>
 8006364:	2301      	movs	r3, #1
 8006366:	4652      	mov	r2, sl
 8006368:	4639      	mov	r1, r7
 800636a:	4630      	mov	r0, r6
 800636c:	47c0      	blx	r8
 800636e:	3001      	adds	r0, #1
 8006370:	d103      	bne.n	800637a <_printf_common+0xba>
 8006372:	f04f 30ff 	mov.w	r0, #4294967295
 8006376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800637a:	3501      	adds	r5, #1
 800637c:	e7c3      	b.n	8006306 <_printf_common+0x46>
 800637e:	18e1      	adds	r1, r4, r3
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	2030      	movs	r0, #48	; 0x30
 8006384:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006388:	4422      	add	r2, r4
 800638a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800638e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006392:	3302      	adds	r3, #2
 8006394:	e7c5      	b.n	8006322 <_printf_common+0x62>
 8006396:	2301      	movs	r3, #1
 8006398:	4622      	mov	r2, r4
 800639a:	4639      	mov	r1, r7
 800639c:	4630      	mov	r0, r6
 800639e:	47c0      	blx	r8
 80063a0:	3001      	adds	r0, #1
 80063a2:	d0e6      	beq.n	8006372 <_printf_common+0xb2>
 80063a4:	f109 0901 	add.w	r9, r9, #1
 80063a8:	e7d8      	b.n	800635c <_printf_common+0x9c>
	...

080063ac <_printf_i>:
 80063ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063b0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80063b4:	460c      	mov	r4, r1
 80063b6:	7e09      	ldrb	r1, [r1, #24]
 80063b8:	b085      	sub	sp, #20
 80063ba:	296e      	cmp	r1, #110	; 0x6e
 80063bc:	4617      	mov	r7, r2
 80063be:	4606      	mov	r6, r0
 80063c0:	4698      	mov	r8, r3
 80063c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80063c4:	f000 80b3 	beq.w	800652e <_printf_i+0x182>
 80063c8:	d822      	bhi.n	8006410 <_printf_i+0x64>
 80063ca:	2963      	cmp	r1, #99	; 0x63
 80063cc:	d036      	beq.n	800643c <_printf_i+0x90>
 80063ce:	d80a      	bhi.n	80063e6 <_printf_i+0x3a>
 80063d0:	2900      	cmp	r1, #0
 80063d2:	f000 80b9 	beq.w	8006548 <_printf_i+0x19c>
 80063d6:	2958      	cmp	r1, #88	; 0x58
 80063d8:	f000 8083 	beq.w	80064e2 <_printf_i+0x136>
 80063dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80063e0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80063e4:	e032      	b.n	800644c <_printf_i+0xa0>
 80063e6:	2964      	cmp	r1, #100	; 0x64
 80063e8:	d001      	beq.n	80063ee <_printf_i+0x42>
 80063ea:	2969      	cmp	r1, #105	; 0x69
 80063ec:	d1f6      	bne.n	80063dc <_printf_i+0x30>
 80063ee:	6820      	ldr	r0, [r4, #0]
 80063f0:	6813      	ldr	r3, [r2, #0]
 80063f2:	0605      	lsls	r5, r0, #24
 80063f4:	f103 0104 	add.w	r1, r3, #4
 80063f8:	d52a      	bpl.n	8006450 <_printf_i+0xa4>
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	da03      	bge.n	800640a <_printf_i+0x5e>
 8006402:	222d      	movs	r2, #45	; 0x2d
 8006404:	425b      	negs	r3, r3
 8006406:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800640a:	486f      	ldr	r0, [pc, #444]	; (80065c8 <_printf_i+0x21c>)
 800640c:	220a      	movs	r2, #10
 800640e:	e039      	b.n	8006484 <_printf_i+0xd8>
 8006410:	2973      	cmp	r1, #115	; 0x73
 8006412:	f000 809d 	beq.w	8006550 <_printf_i+0x1a4>
 8006416:	d808      	bhi.n	800642a <_printf_i+0x7e>
 8006418:	296f      	cmp	r1, #111	; 0x6f
 800641a:	d020      	beq.n	800645e <_printf_i+0xb2>
 800641c:	2970      	cmp	r1, #112	; 0x70
 800641e:	d1dd      	bne.n	80063dc <_printf_i+0x30>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	f043 0320 	orr.w	r3, r3, #32
 8006426:	6023      	str	r3, [r4, #0]
 8006428:	e003      	b.n	8006432 <_printf_i+0x86>
 800642a:	2975      	cmp	r1, #117	; 0x75
 800642c:	d017      	beq.n	800645e <_printf_i+0xb2>
 800642e:	2978      	cmp	r1, #120	; 0x78
 8006430:	d1d4      	bne.n	80063dc <_printf_i+0x30>
 8006432:	2378      	movs	r3, #120	; 0x78
 8006434:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006438:	4864      	ldr	r0, [pc, #400]	; (80065cc <_printf_i+0x220>)
 800643a:	e055      	b.n	80064e8 <_printf_i+0x13c>
 800643c:	6813      	ldr	r3, [r2, #0]
 800643e:	1d19      	adds	r1, r3, #4
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6011      	str	r1, [r2, #0]
 8006444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006448:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800644c:	2301      	movs	r3, #1
 800644e:	e08c      	b.n	800656a <_printf_i+0x1be>
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	6011      	str	r1, [r2, #0]
 8006454:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006458:	bf18      	it	ne
 800645a:	b21b      	sxthne	r3, r3
 800645c:	e7cf      	b.n	80063fe <_printf_i+0x52>
 800645e:	6813      	ldr	r3, [r2, #0]
 8006460:	6825      	ldr	r5, [r4, #0]
 8006462:	1d18      	adds	r0, r3, #4
 8006464:	6010      	str	r0, [r2, #0]
 8006466:	0628      	lsls	r0, r5, #24
 8006468:	d501      	bpl.n	800646e <_printf_i+0xc2>
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	e002      	b.n	8006474 <_printf_i+0xc8>
 800646e:	0668      	lsls	r0, r5, #25
 8006470:	d5fb      	bpl.n	800646a <_printf_i+0xbe>
 8006472:	881b      	ldrh	r3, [r3, #0]
 8006474:	4854      	ldr	r0, [pc, #336]	; (80065c8 <_printf_i+0x21c>)
 8006476:	296f      	cmp	r1, #111	; 0x6f
 8006478:	bf14      	ite	ne
 800647a:	220a      	movne	r2, #10
 800647c:	2208      	moveq	r2, #8
 800647e:	2100      	movs	r1, #0
 8006480:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006484:	6865      	ldr	r5, [r4, #4]
 8006486:	60a5      	str	r5, [r4, #8]
 8006488:	2d00      	cmp	r5, #0
 800648a:	f2c0 8095 	blt.w	80065b8 <_printf_i+0x20c>
 800648e:	6821      	ldr	r1, [r4, #0]
 8006490:	f021 0104 	bic.w	r1, r1, #4
 8006494:	6021      	str	r1, [r4, #0]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d13d      	bne.n	8006516 <_printf_i+0x16a>
 800649a:	2d00      	cmp	r5, #0
 800649c:	f040 808e 	bne.w	80065bc <_printf_i+0x210>
 80064a0:	4665      	mov	r5, ip
 80064a2:	2a08      	cmp	r2, #8
 80064a4:	d10b      	bne.n	80064be <_printf_i+0x112>
 80064a6:	6823      	ldr	r3, [r4, #0]
 80064a8:	07db      	lsls	r3, r3, #31
 80064aa:	d508      	bpl.n	80064be <_printf_i+0x112>
 80064ac:	6923      	ldr	r3, [r4, #16]
 80064ae:	6862      	ldr	r2, [r4, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	bfde      	ittt	le
 80064b4:	2330      	movle	r3, #48	; 0x30
 80064b6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ba:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064be:	ebac 0305 	sub.w	r3, ip, r5
 80064c2:	6123      	str	r3, [r4, #16]
 80064c4:	f8cd 8000 	str.w	r8, [sp]
 80064c8:	463b      	mov	r3, r7
 80064ca:	aa03      	add	r2, sp, #12
 80064cc:	4621      	mov	r1, r4
 80064ce:	4630      	mov	r0, r6
 80064d0:	f7ff fef6 	bl	80062c0 <_printf_common>
 80064d4:	3001      	adds	r0, #1
 80064d6:	d14d      	bne.n	8006574 <_printf_i+0x1c8>
 80064d8:	f04f 30ff 	mov.w	r0, #4294967295
 80064dc:	b005      	add	sp, #20
 80064de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064e2:	4839      	ldr	r0, [pc, #228]	; (80065c8 <_printf_i+0x21c>)
 80064e4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80064e8:	6813      	ldr	r3, [r2, #0]
 80064ea:	6821      	ldr	r1, [r4, #0]
 80064ec:	1d1d      	adds	r5, r3, #4
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6015      	str	r5, [r2, #0]
 80064f2:	060a      	lsls	r2, r1, #24
 80064f4:	d50b      	bpl.n	800650e <_printf_i+0x162>
 80064f6:	07ca      	lsls	r2, r1, #31
 80064f8:	bf44      	itt	mi
 80064fa:	f041 0120 	orrmi.w	r1, r1, #32
 80064fe:	6021      	strmi	r1, [r4, #0]
 8006500:	b91b      	cbnz	r3, 800650a <_printf_i+0x15e>
 8006502:	6822      	ldr	r2, [r4, #0]
 8006504:	f022 0220 	bic.w	r2, r2, #32
 8006508:	6022      	str	r2, [r4, #0]
 800650a:	2210      	movs	r2, #16
 800650c:	e7b7      	b.n	800647e <_printf_i+0xd2>
 800650e:	064d      	lsls	r5, r1, #25
 8006510:	bf48      	it	mi
 8006512:	b29b      	uxthmi	r3, r3
 8006514:	e7ef      	b.n	80064f6 <_printf_i+0x14a>
 8006516:	4665      	mov	r5, ip
 8006518:	fbb3 f1f2 	udiv	r1, r3, r2
 800651c:	fb02 3311 	mls	r3, r2, r1, r3
 8006520:	5cc3      	ldrb	r3, [r0, r3]
 8006522:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006526:	460b      	mov	r3, r1
 8006528:	2900      	cmp	r1, #0
 800652a:	d1f5      	bne.n	8006518 <_printf_i+0x16c>
 800652c:	e7b9      	b.n	80064a2 <_printf_i+0xf6>
 800652e:	6813      	ldr	r3, [r2, #0]
 8006530:	6825      	ldr	r5, [r4, #0]
 8006532:	6961      	ldr	r1, [r4, #20]
 8006534:	1d18      	adds	r0, r3, #4
 8006536:	6010      	str	r0, [r2, #0]
 8006538:	0628      	lsls	r0, r5, #24
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	d501      	bpl.n	8006542 <_printf_i+0x196>
 800653e:	6019      	str	r1, [r3, #0]
 8006540:	e002      	b.n	8006548 <_printf_i+0x19c>
 8006542:	066a      	lsls	r2, r5, #25
 8006544:	d5fb      	bpl.n	800653e <_printf_i+0x192>
 8006546:	8019      	strh	r1, [r3, #0]
 8006548:	2300      	movs	r3, #0
 800654a:	6123      	str	r3, [r4, #16]
 800654c:	4665      	mov	r5, ip
 800654e:	e7b9      	b.n	80064c4 <_printf_i+0x118>
 8006550:	6813      	ldr	r3, [r2, #0]
 8006552:	1d19      	adds	r1, r3, #4
 8006554:	6011      	str	r1, [r2, #0]
 8006556:	681d      	ldr	r5, [r3, #0]
 8006558:	6862      	ldr	r2, [r4, #4]
 800655a:	2100      	movs	r1, #0
 800655c:	4628      	mov	r0, r5
 800655e:	f7f9 fe47 	bl	80001f0 <memchr>
 8006562:	b108      	cbz	r0, 8006568 <_printf_i+0x1bc>
 8006564:	1b40      	subs	r0, r0, r5
 8006566:	6060      	str	r0, [r4, #4]
 8006568:	6863      	ldr	r3, [r4, #4]
 800656a:	6123      	str	r3, [r4, #16]
 800656c:	2300      	movs	r3, #0
 800656e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006572:	e7a7      	b.n	80064c4 <_printf_i+0x118>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	462a      	mov	r2, r5
 8006578:	4639      	mov	r1, r7
 800657a:	4630      	mov	r0, r6
 800657c:	47c0      	blx	r8
 800657e:	3001      	adds	r0, #1
 8006580:	d0aa      	beq.n	80064d8 <_printf_i+0x12c>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	079b      	lsls	r3, r3, #30
 8006586:	d413      	bmi.n	80065b0 <_printf_i+0x204>
 8006588:	68e0      	ldr	r0, [r4, #12]
 800658a:	9b03      	ldr	r3, [sp, #12]
 800658c:	4298      	cmp	r0, r3
 800658e:	bfb8      	it	lt
 8006590:	4618      	movlt	r0, r3
 8006592:	e7a3      	b.n	80064dc <_printf_i+0x130>
 8006594:	2301      	movs	r3, #1
 8006596:	464a      	mov	r2, r9
 8006598:	4639      	mov	r1, r7
 800659a:	4630      	mov	r0, r6
 800659c:	47c0      	blx	r8
 800659e:	3001      	adds	r0, #1
 80065a0:	d09a      	beq.n	80064d8 <_printf_i+0x12c>
 80065a2:	3501      	adds	r5, #1
 80065a4:	68e3      	ldr	r3, [r4, #12]
 80065a6:	9a03      	ldr	r2, [sp, #12]
 80065a8:	1a9b      	subs	r3, r3, r2
 80065aa:	42ab      	cmp	r3, r5
 80065ac:	dcf2      	bgt.n	8006594 <_printf_i+0x1e8>
 80065ae:	e7eb      	b.n	8006588 <_printf_i+0x1dc>
 80065b0:	2500      	movs	r5, #0
 80065b2:	f104 0919 	add.w	r9, r4, #25
 80065b6:	e7f5      	b.n	80065a4 <_printf_i+0x1f8>
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1ac      	bne.n	8006516 <_printf_i+0x16a>
 80065bc:	7803      	ldrb	r3, [r0, #0]
 80065be:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80065c2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80065c6:	e76c      	b.n	80064a2 <_printf_i+0xf6>
 80065c8:	080068bd 	.word	0x080068bd
 80065cc:	080068ce 	.word	0x080068ce

080065d0 <memcpy>:
 80065d0:	b510      	push	{r4, lr}
 80065d2:	1e43      	subs	r3, r0, #1
 80065d4:	440a      	add	r2, r1
 80065d6:	4291      	cmp	r1, r2
 80065d8:	d100      	bne.n	80065dc <memcpy+0xc>
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80065e4:	e7f7      	b.n	80065d6 <memcpy+0x6>

080065e6 <memmove>:
 80065e6:	4288      	cmp	r0, r1
 80065e8:	b510      	push	{r4, lr}
 80065ea:	eb01 0302 	add.w	r3, r1, r2
 80065ee:	d807      	bhi.n	8006600 <memmove+0x1a>
 80065f0:	1e42      	subs	r2, r0, #1
 80065f2:	4299      	cmp	r1, r3
 80065f4:	d00a      	beq.n	800660c <memmove+0x26>
 80065f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80065fa:	f802 4f01 	strb.w	r4, [r2, #1]!
 80065fe:	e7f8      	b.n	80065f2 <memmove+0xc>
 8006600:	4283      	cmp	r3, r0
 8006602:	d9f5      	bls.n	80065f0 <memmove+0xa>
 8006604:	1881      	adds	r1, r0, r2
 8006606:	1ad2      	subs	r2, r2, r3
 8006608:	42d3      	cmn	r3, r2
 800660a:	d100      	bne.n	800660e <memmove+0x28>
 800660c:	bd10      	pop	{r4, pc}
 800660e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006612:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006616:	e7f7      	b.n	8006608 <memmove+0x22>

08006618 <_free_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	4605      	mov	r5, r0
 800661c:	2900      	cmp	r1, #0
 800661e:	d045      	beq.n	80066ac <_free_r+0x94>
 8006620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006624:	1f0c      	subs	r4, r1, #4
 8006626:	2b00      	cmp	r3, #0
 8006628:	bfb8      	it	lt
 800662a:	18e4      	addlt	r4, r4, r3
 800662c:	f000 f8d2 	bl	80067d4 <__malloc_lock>
 8006630:	4a1f      	ldr	r2, [pc, #124]	; (80066b0 <_free_r+0x98>)
 8006632:	6813      	ldr	r3, [r2, #0]
 8006634:	4610      	mov	r0, r2
 8006636:	b933      	cbnz	r3, 8006646 <_free_r+0x2e>
 8006638:	6063      	str	r3, [r4, #4]
 800663a:	6014      	str	r4, [r2, #0]
 800663c:	4628      	mov	r0, r5
 800663e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006642:	f000 b8c8 	b.w	80067d6 <__malloc_unlock>
 8006646:	42a3      	cmp	r3, r4
 8006648:	d90c      	bls.n	8006664 <_free_r+0x4c>
 800664a:	6821      	ldr	r1, [r4, #0]
 800664c:	1862      	adds	r2, r4, r1
 800664e:	4293      	cmp	r3, r2
 8006650:	bf04      	itt	eq
 8006652:	681a      	ldreq	r2, [r3, #0]
 8006654:	685b      	ldreq	r3, [r3, #4]
 8006656:	6063      	str	r3, [r4, #4]
 8006658:	bf04      	itt	eq
 800665a:	1852      	addeq	r2, r2, r1
 800665c:	6022      	streq	r2, [r4, #0]
 800665e:	6004      	str	r4, [r0, #0]
 8006660:	e7ec      	b.n	800663c <_free_r+0x24>
 8006662:	4613      	mov	r3, r2
 8006664:	685a      	ldr	r2, [r3, #4]
 8006666:	b10a      	cbz	r2, 800666c <_free_r+0x54>
 8006668:	42a2      	cmp	r2, r4
 800666a:	d9fa      	bls.n	8006662 <_free_r+0x4a>
 800666c:	6819      	ldr	r1, [r3, #0]
 800666e:	1858      	adds	r0, r3, r1
 8006670:	42a0      	cmp	r0, r4
 8006672:	d10b      	bne.n	800668c <_free_r+0x74>
 8006674:	6820      	ldr	r0, [r4, #0]
 8006676:	4401      	add	r1, r0
 8006678:	1858      	adds	r0, r3, r1
 800667a:	4282      	cmp	r2, r0
 800667c:	6019      	str	r1, [r3, #0]
 800667e:	d1dd      	bne.n	800663c <_free_r+0x24>
 8006680:	6810      	ldr	r0, [r2, #0]
 8006682:	6852      	ldr	r2, [r2, #4]
 8006684:	605a      	str	r2, [r3, #4]
 8006686:	4401      	add	r1, r0
 8006688:	6019      	str	r1, [r3, #0]
 800668a:	e7d7      	b.n	800663c <_free_r+0x24>
 800668c:	d902      	bls.n	8006694 <_free_r+0x7c>
 800668e:	230c      	movs	r3, #12
 8006690:	602b      	str	r3, [r5, #0]
 8006692:	e7d3      	b.n	800663c <_free_r+0x24>
 8006694:	6820      	ldr	r0, [r4, #0]
 8006696:	1821      	adds	r1, r4, r0
 8006698:	428a      	cmp	r2, r1
 800669a:	bf04      	itt	eq
 800669c:	6811      	ldreq	r1, [r2, #0]
 800669e:	6852      	ldreq	r2, [r2, #4]
 80066a0:	6062      	str	r2, [r4, #4]
 80066a2:	bf04      	itt	eq
 80066a4:	1809      	addeq	r1, r1, r0
 80066a6:	6021      	streq	r1, [r4, #0]
 80066a8:	605c      	str	r4, [r3, #4]
 80066aa:	e7c7      	b.n	800663c <_free_r+0x24>
 80066ac:	bd38      	pop	{r3, r4, r5, pc}
 80066ae:	bf00      	nop
 80066b0:	200000b8 	.word	0x200000b8

080066b4 <_malloc_r>:
 80066b4:	b570      	push	{r4, r5, r6, lr}
 80066b6:	1ccd      	adds	r5, r1, #3
 80066b8:	f025 0503 	bic.w	r5, r5, #3
 80066bc:	3508      	adds	r5, #8
 80066be:	2d0c      	cmp	r5, #12
 80066c0:	bf38      	it	cc
 80066c2:	250c      	movcc	r5, #12
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	4606      	mov	r6, r0
 80066c8:	db01      	blt.n	80066ce <_malloc_r+0x1a>
 80066ca:	42a9      	cmp	r1, r5
 80066cc:	d903      	bls.n	80066d6 <_malloc_r+0x22>
 80066ce:	230c      	movs	r3, #12
 80066d0:	6033      	str	r3, [r6, #0]
 80066d2:	2000      	movs	r0, #0
 80066d4:	bd70      	pop	{r4, r5, r6, pc}
 80066d6:	f000 f87d 	bl	80067d4 <__malloc_lock>
 80066da:	4a21      	ldr	r2, [pc, #132]	; (8006760 <_malloc_r+0xac>)
 80066dc:	6814      	ldr	r4, [r2, #0]
 80066de:	4621      	mov	r1, r4
 80066e0:	b991      	cbnz	r1, 8006708 <_malloc_r+0x54>
 80066e2:	4c20      	ldr	r4, [pc, #128]	; (8006764 <_malloc_r+0xb0>)
 80066e4:	6823      	ldr	r3, [r4, #0]
 80066e6:	b91b      	cbnz	r3, 80066f0 <_malloc_r+0x3c>
 80066e8:	4630      	mov	r0, r6
 80066ea:	f000 f863 	bl	80067b4 <_sbrk_r>
 80066ee:	6020      	str	r0, [r4, #0]
 80066f0:	4629      	mov	r1, r5
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 f85e 	bl	80067b4 <_sbrk_r>
 80066f8:	1c43      	adds	r3, r0, #1
 80066fa:	d124      	bne.n	8006746 <_malloc_r+0x92>
 80066fc:	230c      	movs	r3, #12
 80066fe:	6033      	str	r3, [r6, #0]
 8006700:	4630      	mov	r0, r6
 8006702:	f000 f868 	bl	80067d6 <__malloc_unlock>
 8006706:	e7e4      	b.n	80066d2 <_malloc_r+0x1e>
 8006708:	680b      	ldr	r3, [r1, #0]
 800670a:	1b5b      	subs	r3, r3, r5
 800670c:	d418      	bmi.n	8006740 <_malloc_r+0x8c>
 800670e:	2b0b      	cmp	r3, #11
 8006710:	d90f      	bls.n	8006732 <_malloc_r+0x7e>
 8006712:	600b      	str	r3, [r1, #0]
 8006714:	50cd      	str	r5, [r1, r3]
 8006716:	18cc      	adds	r4, r1, r3
 8006718:	4630      	mov	r0, r6
 800671a:	f000 f85c 	bl	80067d6 <__malloc_unlock>
 800671e:	f104 000b 	add.w	r0, r4, #11
 8006722:	1d23      	adds	r3, r4, #4
 8006724:	f020 0007 	bic.w	r0, r0, #7
 8006728:	1ac3      	subs	r3, r0, r3
 800672a:	d0d3      	beq.n	80066d4 <_malloc_r+0x20>
 800672c:	425a      	negs	r2, r3
 800672e:	50e2      	str	r2, [r4, r3]
 8006730:	e7d0      	b.n	80066d4 <_malloc_r+0x20>
 8006732:	428c      	cmp	r4, r1
 8006734:	684b      	ldr	r3, [r1, #4]
 8006736:	bf16      	itet	ne
 8006738:	6063      	strne	r3, [r4, #4]
 800673a:	6013      	streq	r3, [r2, #0]
 800673c:	460c      	movne	r4, r1
 800673e:	e7eb      	b.n	8006718 <_malloc_r+0x64>
 8006740:	460c      	mov	r4, r1
 8006742:	6849      	ldr	r1, [r1, #4]
 8006744:	e7cc      	b.n	80066e0 <_malloc_r+0x2c>
 8006746:	1cc4      	adds	r4, r0, #3
 8006748:	f024 0403 	bic.w	r4, r4, #3
 800674c:	42a0      	cmp	r0, r4
 800674e:	d005      	beq.n	800675c <_malloc_r+0xa8>
 8006750:	1a21      	subs	r1, r4, r0
 8006752:	4630      	mov	r0, r6
 8006754:	f000 f82e 	bl	80067b4 <_sbrk_r>
 8006758:	3001      	adds	r0, #1
 800675a:	d0cf      	beq.n	80066fc <_malloc_r+0x48>
 800675c:	6025      	str	r5, [r4, #0]
 800675e:	e7db      	b.n	8006718 <_malloc_r+0x64>
 8006760:	200000b8 	.word	0x200000b8
 8006764:	200000bc 	.word	0x200000bc

08006768 <_realloc_r>:
 8006768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800676a:	4607      	mov	r7, r0
 800676c:	4614      	mov	r4, r2
 800676e:	460e      	mov	r6, r1
 8006770:	b921      	cbnz	r1, 800677c <_realloc_r+0x14>
 8006772:	4611      	mov	r1, r2
 8006774:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006778:	f7ff bf9c 	b.w	80066b4 <_malloc_r>
 800677c:	b922      	cbnz	r2, 8006788 <_realloc_r+0x20>
 800677e:	f7ff ff4b 	bl	8006618 <_free_r>
 8006782:	4625      	mov	r5, r4
 8006784:	4628      	mov	r0, r5
 8006786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006788:	f000 f826 	bl	80067d8 <_malloc_usable_size_r>
 800678c:	42a0      	cmp	r0, r4
 800678e:	d20f      	bcs.n	80067b0 <_realloc_r+0x48>
 8006790:	4621      	mov	r1, r4
 8006792:	4638      	mov	r0, r7
 8006794:	f7ff ff8e 	bl	80066b4 <_malloc_r>
 8006798:	4605      	mov	r5, r0
 800679a:	2800      	cmp	r0, #0
 800679c:	d0f2      	beq.n	8006784 <_realloc_r+0x1c>
 800679e:	4631      	mov	r1, r6
 80067a0:	4622      	mov	r2, r4
 80067a2:	f7ff ff15 	bl	80065d0 <memcpy>
 80067a6:	4631      	mov	r1, r6
 80067a8:	4638      	mov	r0, r7
 80067aa:	f7ff ff35 	bl	8006618 <_free_r>
 80067ae:	e7e9      	b.n	8006784 <_realloc_r+0x1c>
 80067b0:	4635      	mov	r5, r6
 80067b2:	e7e7      	b.n	8006784 <_realloc_r+0x1c>

080067b4 <_sbrk_r>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	4c06      	ldr	r4, [pc, #24]	; (80067d0 <_sbrk_r+0x1c>)
 80067b8:	2300      	movs	r3, #0
 80067ba:	4605      	mov	r5, r0
 80067bc:	4608      	mov	r0, r1
 80067be:	6023      	str	r3, [r4, #0]
 80067c0:	f7fa fd46 	bl	8001250 <_sbrk>
 80067c4:	1c43      	adds	r3, r0, #1
 80067c6:	d102      	bne.n	80067ce <_sbrk_r+0x1a>
 80067c8:	6823      	ldr	r3, [r4, #0]
 80067ca:	b103      	cbz	r3, 80067ce <_sbrk_r+0x1a>
 80067cc:	602b      	str	r3, [r5, #0]
 80067ce:	bd38      	pop	{r3, r4, r5, pc}
 80067d0:	200001e8 	.word	0x200001e8

080067d4 <__malloc_lock>:
 80067d4:	4770      	bx	lr

080067d6 <__malloc_unlock>:
 80067d6:	4770      	bx	lr

080067d8 <_malloc_usable_size_r>:
 80067d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067dc:	1f18      	subs	r0, r3, #4
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bfbc      	itt	lt
 80067e2:	580b      	ldrlt	r3, [r1, r0]
 80067e4:	18c0      	addlt	r0, r0, r3
 80067e6:	4770      	bx	lr

080067e8 <_init>:
 80067e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ea:	bf00      	nop
 80067ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067ee:	bc08      	pop	{r3}
 80067f0:	469e      	mov	lr, r3
 80067f2:	4770      	bx	lr

080067f4 <_fini>:
 80067f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067f6:	bf00      	nop
 80067f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067fa:	bc08      	pop	{r3}
 80067fc:	469e      	mov	lr, r3
 80067fe:	4770      	bx	lr
