
eDesignMultimeter2022.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ad4  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08009c70  08009c70  00019c70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f00  08009f00  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08009f00  08009f00  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f00  08009f00  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f00  08009f00  00019f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009f04  08009f04  00019f04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08009f08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c30  2000001c  08009f24  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c4c  08009f24  00020c4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176f4  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c09  00000000  00000000  00037740  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001190  00000000  00000000  0003a350  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001068  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000227fb  00000000  00000000  0003c548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011c5c  00000000  00000000  0005ed43  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d515a  00000000  00000000  0007099f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145af9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  00145b74  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009c54 	.word	0x08009c54

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	08009c54 	.word	0x08009c54

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <ADC_Main_Function>:
uint16_t millivolts;
uint16_t adc_array[1000];
uint16_t adc_count = 0;

void ADC_Main_Function()
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
	if(adc_count > 999)
 8000b7a:	4b5b      	ldr	r3, [pc, #364]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b7c:	881b      	ldrh	r3, [r3, #0]
 8000b7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000b82:	d364      	bcc.n	8000c4e <ADC_Main_Function+0xda>
	{
	  // Do calculations every 1000 readings
	  adc_count = 0;
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	801a      	strh	r2, [r3, #0]
	  uint32_t total = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	617b      	str	r3, [r7, #20]
	  uint16_t max = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	827b      	strh	r3, [r7, #18]
	  uint16_t min = adc_array[99]; // arbitrary value
 8000b92:	4b56      	ldr	r3, [pc, #344]	; (8000cec <ADC_Main_Function+0x178>)
 8000b94:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	; 0xc6
 8000b98:	823b      	strh	r3, [r7, #16]
	  int16_t diff = 0;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	807b      	strh	r3, [r7, #2]
	  int16_t prev_diff = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	81fb      	strh	r3, [r7, #14]
	  uint16_t mid_passes = 0;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	81bb      	strh	r3, [r7, #12]
	  // 1000 measurements at 5kHz take 200ms
	  for(int x = 0; x < 1000; x++)
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	e023      	b.n	8000bf4 <ADC_Main_Function+0x80>
	  {
		  total += adc_array[x];
 8000bac:	4a4f      	ldr	r2, [pc, #316]	; (8000cec <ADC_Main_Function+0x178>)
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4413      	add	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
		  if(adc_array[x] > max)
 8000bbc:	4a4b      	ldr	r2, [pc, #300]	; (8000cec <ADC_Main_Function+0x178>)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bc4:	8a7a      	ldrh	r2, [r7, #18]
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	d205      	bcs.n	8000bd6 <ADC_Main_Function+0x62>
		  {
			  max = adc_array[x];
 8000bca:	4a48      	ldr	r2, [pc, #288]	; (8000cec <ADC_Main_Function+0x178>)
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd2:	827b      	strh	r3, [r7, #18]
 8000bd4:	e00b      	b.n	8000bee <ADC_Main_Function+0x7a>
		  }
		  else if(adc_array[x] < min)
 8000bd6:	4a45      	ldr	r2, [pc, #276]	; (8000cec <ADC_Main_Function+0x178>)
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bde:	8a3a      	ldrh	r2, [r7, #16]
 8000be0:	429a      	cmp	r2, r3
 8000be2:	d904      	bls.n	8000bee <ADC_Main_Function+0x7a>
		  {
			  min = adc_array[x];
 8000be4:	4a41      	ldr	r2, [pc, #260]	; (8000cec <ADC_Main_Function+0x178>)
 8000be6:	68bb      	ldr	r3, [r7, #8]
 8000be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bec:	823b      	strh	r3, [r7, #16]
	  for(int x = 0; x < 1000; x++)
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	60bb      	str	r3, [r7, #8]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bfa:	dbd7      	blt.n	8000bac <ADC_Main_Function+0x38>
		  }
	  }
	//			  measured_offset = total/1000;
//	  MeasurementState.Offset = 1000;
	  for(int x = 0; x < 1000; x++)
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
 8000c00:	e018      	b.n	8000c34 <ADC_Main_Function+0xc0>
	  {
		  // Calculate frequency
		  diff = adc_array[x] - MeasurementState.Offset;
 8000c02:	4a3a      	ldr	r2, [pc, #232]	; (8000cec <ADC_Main_Function+0x178>)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000c0a:	4b39      	ldr	r3, [pc, #228]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c0c:	891b      	ldrh	r3, [r3, #8]
 8000c0e:	1ad3      	subs	r3, r2, r3
 8000c10:	b29b      	uxth	r3, r3
 8000c12:	807b      	strh	r3, [r7, #2]
		  if(diff > 0 && prev_diff < 0)
 8000c14:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	dd06      	ble.n	8000c2a <ADC_Main_Function+0xb6>
 8000c1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	da02      	bge.n	8000c2a <ADC_Main_Function+0xb6>
		  {
			  mid_passes++;
 8000c24:	89bb      	ldrh	r3, [r7, #12]
 8000c26:	3301      	adds	r3, #1
 8000c28:	81bb      	strh	r3, [r7, #12]
		  }
		  prev_diff = diff;
 8000c2a:	887b      	ldrh	r3, [r7, #2]
 8000c2c:	81fb      	strh	r3, [r7, #14]
	  for(int x = 0; x < 1000; x++)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	3301      	adds	r3, #1
 8000c32:	607b      	str	r3, [r7, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c3a:	dbe2      	blt.n	8000c02 <ADC_Main_Function+0x8e>
	  }
	  MeasurementState.Period = 50000/(mid_passes);
 8000c3c:	89bb      	ldrh	r3, [r7, #12]
 8000c3e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000c42:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c46:	b29a      	uxth	r2, r3
 8000c48:	4b29      	ldr	r3, [pc, #164]	; (8000cf0 <ADC_Main_Function+0x17c>)
 8000c4a:	80da      	strh	r2, [r3, #6]
 8000c4c:	e043      	b.n	8000cd6 <ADC_Main_Function+0x162>
//			LCD_Display_Measurement();
		}
	}
	else
	{
	  HAL_ADC_Start(&hadc1);
 8000c4e:	4829      	ldr	r0, [pc, #164]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c50:	f002 fdde 	bl	8003810 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000c54:	f04f 31ff 	mov.w	r1, #4294967295
 8000c58:	4826      	ldr	r0, [pc, #152]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c5a:	f002 ff25 	bl	8003aa8 <HAL_ADC_PollForConversion>
	  raw = HAL_ADC_GetValue(&hadc1);
 8000c5e:	4825      	ldr	r0, [pc, #148]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c60:	f003 f824 	bl	8003cac <HAL_ADC_GetValue>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29a      	uxth	r2, r3
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c6a:	801a      	strh	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 8000c6c:	4821      	ldr	r0, [pc, #132]	; (8000cf4 <ADC_Main_Function+0x180>)
 8000c6e:	f002 fee5 	bl	8003a3c <HAL_ADC_Stop>
	  millivolts = raw*3300/4095;
 8000c72:	4b21      	ldr	r3, [pc, #132]	; (8000cf8 <ADC_Main_Function+0x184>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	f640 43e4 	movw	r3, #3300	; 0xce4
 8000c7c:	fb03 f302 	mul.w	r3, r3, r2
 8000c80:	4a1e      	ldr	r2, [pc, #120]	; (8000cfc <ADC_Main_Function+0x188>)
 8000c82:	fb82 1203 	smull	r1, r2, r2, r3
 8000c86:	441a      	add	r2, r3
 8000c88:	12d2      	asrs	r2, r2, #11
 8000c8a:	17db      	asrs	r3, r3, #31
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	b29a      	uxth	r2, r3
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000c92:	801a      	strh	r2, [r3, #0]
	  millivolts += 100*millivolts/1000; // Calibration
 8000c94:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000c96:	881b      	ldrh	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	2364      	movs	r3, #100	; 0x64
 8000c9c:	fb03 f302 	mul.w	r3, r3, r2
 8000ca0:	4a18      	ldr	r2, [pc, #96]	; (8000d04 <ADC_Main_Function+0x190>)
 8000ca2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ca6:	1192      	asrs	r2, r2, #6
 8000ca8:	17db      	asrs	r3, r3, #31
 8000caa:	1ad3      	subs	r3, r2, r3
 8000cac:	b29a      	uxth	r2, r3
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000cb0:	881b      	ldrh	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000cb8:	801a      	strh	r2, [r3, #0]
	  adc_array[adc_count] = millivolts;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cbc:	881b      	ldrh	r3, [r3, #0]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <ADC_Main_Function+0x18c>)
 8000cc2:	8819      	ldrh	r1, [r3, #0]
 8000cc4:	4b09      	ldr	r3, [pc, #36]	; (8000cec <ADC_Main_Function+0x178>)
 8000cc6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  adc_count++;
 8000cca:	4b07      	ldr	r3, [pc, #28]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000ccc:	881b      	ldrh	r3, [r3, #0]
 8000cce:	3301      	adds	r3, #1
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <ADC_Main_Function+0x174>)
 8000cd4:	801a      	strh	r2, [r3, #0]
	}

	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_4);
 8000cd6:	2110      	movs	r1, #16
 8000cd8:	480b      	ldr	r0, [pc, #44]	; (8000d08 <ADC_Main_Function+0x194>)
 8000cda:	f004 fc5d 	bl	8005598 <HAL_GPIO_TogglePin>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000038 	.word	0x20000038
 8000cec:	20000054 	.word	0x20000054
 8000cf0:	20000828 	.word	0x20000828
 8000cf4:	20000ad4 	.word	0x20000ad4
 8000cf8:	20000824 	.word	0x20000824
 8000cfc:	80080081 	.word	0x80080081
 8000d00:	20000826 	.word	0x20000826
 8000d04:	10624dd3 	.word	0x10624dd3
 8000d08:	48000800 	.word	0x48000800
 8000d0c:	00000000 	.word	0x00000000

08000d10 <DAC_Calculate_Buffer>:
extern DAC_HandleTypeDef hdac1;

OutputStateType OutputState;

void DAC_Calculate_Buffer()
{
 8000d10:	b5b0      	push	{r4, r5, r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
	if(OutputState.Mode == d)
 8000d16:	4b4a      	ldr	r3, [pc, #296]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000d18:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d1c:	2b64      	cmp	r3, #100	; 0x64
 8000d1e:	d114      	bne.n	8000d4a <DAC_Calculate_Buffer+0x3a>
	{
		for(int i=0; i<100; i++)
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	e00d      	b.n	8000d42 <DAC_Calculate_Buffer+0x32>
		{
			OutputState.Buffer[i] = OutputState.Offset * (4096/3300) * (1000 / 920) / 2;
 8000d26:	4b46      	ldr	r3, [pc, #280]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000d28:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000d2c:	0fda      	lsrs	r2, r3, #31
 8000d2e:	4413      	add	r3, r2
 8000d30:	105b      	asrs	r3, r3, #1
 8000d32:	4619      	mov	r1, r3
 8000d34:	4a42      	ldr	r2, [pc, #264]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2b63      	cmp	r3, #99	; 0x63
 8000d46:	ddee      	ble.n	8000d26 <DAC_Calculate_Buffer+0x16>
		for(int i=0; i<100; i++)
		{
			OutputState.Buffer[i] = (float)((((float)OutputState.Amplitude/2)*sin(i*2*PI/100) + (float)OutputState.Offset)*(4096/3300) * (float)(1000 / 550) / 2);
		}
	}
}
 8000d48:	e070      	b.n	8000e2c <DAC_Calculate_Buffer+0x11c>
	else if (OutputState.Mode == s)
 8000d4a:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000d4c:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000d50:	2b73      	cmp	r3, #115	; 0x73
 8000d52:	d16b      	bne.n	8000e2c <DAC_Calculate_Buffer+0x11c>
		for(int i=0; i<100; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	e065      	b.n	8000e26 <DAC_Calculate_Buffer+0x116>
			OutputState.Buffer[i] = (float)((((float)OutputState.Amplitude/2)*sin(i*2*PI/100) + (float)OutputState.Offset)*(4096/3300) * (float)(1000 / 550) / 2);
 8000d5a:	4b39      	ldr	r3, [pc, #228]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000d5c:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8000d60:	ee07 3a90 	vmov	s15, r3
 8000d64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d68:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000d6c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000d70:	ee16 0a90 	vmov	r0, s13
 8000d74:	f7ff fb94 	bl	80004a0 <__aeabi_f2d>
 8000d78:	4604      	mov	r4, r0
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff fb7b 	bl	800047c <__aeabi_i2d>
 8000d86:	a32c      	add	r3, pc, #176	; (adr r3, 8000e38 <DAC_Calculate_Buffer+0x128>)
 8000d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d8c:	f7ff fbe0 	bl	8000550 <__aeabi_dmul>
 8000d90:	4602      	mov	r2, r0
 8000d92:	460b      	mov	r3, r1
 8000d94:	4610      	mov	r0, r2
 8000d96:	4619      	mov	r1, r3
 8000d98:	f04f 0200 	mov.w	r2, #0
 8000d9c:	4b29      	ldr	r3, [pc, #164]	; (8000e44 <DAC_Calculate_Buffer+0x134>)
 8000d9e:	f7ff fd01 	bl	80007a4 <__aeabi_ddiv>
 8000da2:	4602      	mov	r2, r0
 8000da4:	460b      	mov	r3, r1
 8000da6:	ec43 2b17 	vmov	d7, r2, r3
 8000daa:	eeb0 0a47 	vmov.f32	s0, s14
 8000dae:	eef0 0a67 	vmov.f32	s1, s15
 8000db2:	f007 ff3d 	bl	8008c30 <sin>
 8000db6:	ec53 2b10 	vmov	r2, r3, d0
 8000dba:	4620      	mov	r0, r4
 8000dbc:	4629      	mov	r1, r5
 8000dbe:	f7ff fbc7 	bl	8000550 <__aeabi_dmul>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	4625      	mov	r5, r4
 8000dc8:	461c      	mov	r4, r3
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000dcc:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8000dd0:	ee07 3a90 	vmov	s15, r3
 8000dd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dd8:	ee17 0a90 	vmov	r0, s15
 8000ddc:	f7ff fb60 	bl	80004a0 <__aeabi_f2d>
 8000de0:	4602      	mov	r2, r0
 8000de2:	460b      	mov	r3, r1
 8000de4:	4620      	mov	r0, r4
 8000de6:	4629      	mov	r1, r5
 8000de8:	f7ff f9fc 	bl	80001e4 <__adddf3>
 8000dec:	4603      	mov	r3, r0
 8000dee:	460c      	mov	r4, r1
 8000df0:	4618      	mov	r0, r3
 8000df2:	4621      	mov	r1, r4
 8000df4:	f04f 0200 	mov.w	r2, #0
 8000df8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dfc:	f7ff fcd2 	bl	80007a4 <__aeabi_ddiv>
 8000e00:	4603      	mov	r3, r0
 8000e02:	460c      	mov	r4, r1
 8000e04:	4618      	mov	r0, r3
 8000e06:	4621      	mov	r1, r4
 8000e08:	f7ff fe64 	bl	8000ad4 <__aeabi_d2f>
 8000e0c:	ee07 0a90 	vmov	s15, r0
 8000e10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e14:	ee17 1a90 	vmov	r1, s15
 8000e18:	4a09      	ldr	r2, [pc, #36]	; (8000e40 <DAC_Calculate_Buffer+0x130>)
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i=0; i<100; i++)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	603b      	str	r3, [r7, #0]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	2b63      	cmp	r3, #99	; 0x63
 8000e2a:	dd96      	ble.n	8000d5a <DAC_Calculate_Buffer+0x4a>
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bdb0      	pop	{r4, r5, r7, pc}
 8000e34:	f3af 8000 	nop.w
 8000e38:	4d12d84a 	.word	0x4d12d84a
 8000e3c:	400921fb 	.word	0x400921fb
 8000e40:	20000834 	.word	0x20000834
 8000e44:	40590000 	.word	0x40590000

08000e48 <DAC_Set_Output_Frequency>:

void DAC_Set_Output_Frequency()
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
	OutputState.ARR_Val = OutputState.TIM2_Clock / (OutputState.Frequency*100);
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <DAC_Set_Output_Frequency+0x5c>)
 8000e4e:	f8d3 3190 	ldr.w	r3, [r3, #400]	; 0x190
 8000e52:	4a14      	ldr	r2, [pc, #80]	; (8000ea4 <DAC_Set_Output_Frequency+0x5c>)
 8000e54:	f8b2 2198 	ldrh.w	r2, [r2, #408]	; 0x198
 8000e58:	4611      	mov	r1, r2
 8000e5a:	2264      	movs	r2, #100	; 0x64
 8000e5c:	fb02 f201 	mul.w	r2, r2, r1
 8000e60:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <DAC_Set_Output_Frequency+0x5c>)
 8000e66:	f8c2 31a0 	str.w	r3, [r2, #416]	; 0x1a0
	__HAL_TIM_SET_AUTORELOAD(&htim2, OutputState.ARR_Val);
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <DAC_Set_Output_Frequency+0x60>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a0d      	ldr	r2, [pc, #52]	; (8000ea4 <DAC_Set_Output_Frequency+0x5c>)
 8000e70:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8000e74:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e76:	4b0b      	ldr	r3, [pc, #44]	; (8000ea4 <DAC_Set_Output_Frequency+0x5c>)
 8000e78:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8000e7c:	4a0a      	ldr	r2, [pc, #40]	; (8000ea8 <DAC_Set_Output_Frequency+0x60>)
 8000e7e:	60d3      	str	r3, [r2, #12]
	TIM2->CR1 = 0;				// 	Disable Timer
 8000e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
	TIM2->EGR = TIM_EGR_UG;		//	Init registers
 8000e88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	615a      	str	r2, [r3, #20]
	TIM2->CR1 = 1;				// 	Start
 8000e90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	20000834 	.word	0x20000834
 8000ea8:	20000b24 	.word	0x20000b24

08000eac <DAC_Start>:

void DAC_Start()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af02      	add	r7, sp, #8
	if(OutputState.Mode != p)
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <DAC_Start+0x44>)
 8000eb4:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8000eb8:	2b70      	cmp	r3, #112	; 0x70
 8000eba:	d016      	beq.n	8000eea <DAC_Start+0x3e>
	{
		DAC_Calculate_Buffer();
 8000ebc:	f7ff ff28 	bl	8000d10 <DAC_Calculate_Buffer>
		DAC_Set_Output_Frequency();
 8000ec0:	f7ff ffc2 	bl	8000e48 <DAC_Set_Output_Frequency>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, OutputState.Buffer, 100, DAC_ALIGN_12B_R);
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	9300      	str	r3, [sp, #0]
 8000ec8:	2364      	movs	r3, #100	; 0x64
 8000eca:	4a09      	ldr	r2, [pc, #36]	; (8000ef0 <DAC_Start+0x44>)
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4809      	ldr	r0, [pc, #36]	; (8000ef4 <DAC_Start+0x48>)
 8000ed0:	f003 fdf8 	bl	8004ac4 <HAL_DAC_Start_DMA>
		HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f004 fb43 	bl	8005568 <HAL_GPIO_WritePin>
		OutputState.On = true;
 8000ee2:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <DAC_Start+0x44>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	}
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000834 	.word	0x20000834
 8000ef4:	200009e4 	.word	0x200009e4

08000ef8 <DAC_Stop>:

void DAC_Stop()
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
	OutputState.On = false;
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <DAC_Stop+0x28>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000f04:	2100      	movs	r1, #0
 8000f06:	4807      	ldr	r0, [pc, #28]	; (8000f24 <DAC_Stop+0x2c>)
 8000f08:	f003 fd6d 	bl	80049e6 <HAL_DAC_Stop_DMA>
	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f16:	f004 fb27 	bl	8005568 <HAL_GPIO_WritePin>
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000834 	.word	0x20000834
 8000f24:	200009e4 	.word	0x200009e4

08000f28 <DAC_Update_Output>:

void DAC_Update_Output()
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
	DAC_Stop();
 8000f2c:	f7ff ffe4 	bl	8000ef8 <DAC_Stop>
	DAC_Start();
 8000f30:	f7ff ffbc 	bl	8000eac <DAC_Start>
}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <LCD_Init>:
#define lcd_D7_bit			12

DisplayStateType DisplayState;

void LCD_Init()
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

	HAL_Delay(20);
 8000f3c:	2014      	movs	r0, #20
 8000f3e:	f002 fa4b 	bl	80033d8 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f42:	2030      	movs	r0, #48	; 0x30
 8000f44:	f000 f95c 	bl	8001200 <LCD_Write_8bitInstruction>
	HAL_Delay(5);
 8000f48:	2005      	movs	r0, #5
 8000f4a:	f002 fa45 	bl	80033d8 <HAL_Delay>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f4e:	2030      	movs	r0, #48	; 0x30
 8000f50:	f000 f956 	bl	8001200 <LCD_Write_8bitInstruction>
	Delay_us_10(11);
 8000f54:	200b      	movs	r0, #11
 8000f56:	f001 fbe5 	bl	8002724 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionReset);
 8000f5a:	2030      	movs	r0, #48	; 0x30
 8000f5c:	f000 f950 	bl	8001200 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8000f60:	2005      	movs	r0, #5
 8000f62:	f001 fbdf 	bl	8002724 <Delay_us_10>

	LCD_Write_8bitInstruction(lcd_instruction_FunctionSet4bit);
 8000f66:	2028      	movs	r0, #40	; 0x28
 8000f68:	f000 f94a 	bl	8001200 <LCD_Write_8bitInstruction>
	Delay_us_10(5);
 8000f6c:	2005      	movs	r0, #5
 8000f6e:	f001 fbd9 	bl	8002724 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_FunctionSet4bit);
 8000f72:	2028      	movs	r0, #40	; 0x28
 8000f74:	f000 f89c 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f78:	2005      	movs	r0, #5
 8000f7a:	f001 fbd3 	bl	8002724 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_DisplayOn);
 8000f7e:	200f      	movs	r0, #15
 8000f80:	f000 f896 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f84:	2005      	movs	r0, #5
 8000f86:	f001 fbcd 	bl	8002724 <Delay_us_10>

	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8000f8a:	2001      	movs	r0, #1
 8000f8c:	f000 f890 	bl	80010b0 <LCD_Write_Instruction>
	HAL_Delay(2);
 8000f90:	2002      	movs	r0, #2
 8000f92:	f002 fa21 	bl	80033d8 <HAL_Delay>

	LCD_Write_Instruction(lcd_instruction_EntryMode);
 8000f96:	2006      	movs	r0, #6
 8000f98:	f000 f88a 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f001 fbc1 	bl	8002724 <Delay_us_10>
//	HAL_Delay(1);
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <LCD_Write_String>:

void LCD_Write_String(uint8_t string[])
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b084      	sub	sp, #16
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
//	HAL_Delay(1);
	int i = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000fb2:	e009      	b.n	8000fc8 <LCD_Write_String+0x22>
	{
		LCD_Write_Character(string[i]);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	687a      	ldr	r2, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f000 f84b 	bl	8001058 <LCD_Write_Character>
		i++;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	60fb      	str	r3, [r7, #12]
	while (string[i] != 0)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1ef      	bne.n	8000fb4 <LCD_Write_String+0xe>
//		HAL_Delay(1);
	}
}
 8000fd4:	bf00      	nop
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <LCD_Write_Character_Shift>:

void LCD_Write_Character_Shift(uint8_t character)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8000fe6:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <LCD_Write_Character_Shift+0x74>)
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a19      	ldr	r2, [pc, #100]	; (8001050 <LCD_Write_Character_Shift+0x74>)
 8000fec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000ff0:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f000 f871 	bl	80010dc <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d106      	bne.n	8001010 <LCD_Write_Character_Shift+0x34>
		DisplayState.ToplineCharacters ++;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8001004:	78db      	ldrb	r3, [r3, #3]
 8001006:	3301      	adds	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 800100c:	70da      	strb	r2, [r3, #3]
 800100e:	e009      	b.n	8001024 <LCD_Write_Character_Shift+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 8001010:	4b10      	ldr	r3, [pc, #64]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8001012:	789b      	ldrb	r3, [r3, #2]
 8001014:	2b01      	cmp	r3, #1
 8001016:	d105      	bne.n	8001024 <LCD_Write_Character_Shift+0x48>
		DisplayState.BottomlineCharacters ++;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	3301      	adds	r3, #1
 800101e:	b2da      	uxtb	r2, r3
 8001020:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8001022:	711a      	strb	r2, [r3, #4]
	}
	if((DisplayState.CurrentLine == Topline && DisplayState.ToplineCharacters > 15)
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8001026:	789b      	ldrb	r3, [r3, #2]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d103      	bne.n	8001034 <LCD_Write_Character_Shift+0x58>
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 800102e:	78db      	ldrb	r3, [r3, #3]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d807      	bhi.n	8001044 <LCD_Write_Character_Shift+0x68>
			|| (DisplayState.CurrentLine == Bottomline && DisplayState.BottomlineCharacters > 15))
 8001034:	4b07      	ldr	r3, [pc, #28]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 8001036:	789b      	ldrb	r3, [r3, #2]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <LCD_Write_Character_Shift+0x6c>
 800103c:	4b05      	ldr	r3, [pc, #20]	; (8001054 <LCD_Write_Character_Shift+0x78>)
 800103e:	791b      	ldrb	r3, [r3, #4]
 8001040:	2b0f      	cmp	r3, #15
 8001042:	d901      	bls.n	8001048 <LCD_Write_Character_Shift+0x6c>
	{
		// Scroll Screen
		LCD_Shift_Left();
 8001044:	f000 f9ac 	bl	80013a0 <LCD_Shift_Left>
	}
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	48000400 	.word	0x48000400
 8001054:	200009d8 	.word	0x200009d8

08001058 <LCD_Write_Character>:

void LCD_Write_Character(uint8_t character)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR |= (1<<lcd_RS_bit);			// select data register (RS High)
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <LCD_Write_Character+0x50>)
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	4a10      	ldr	r2, [pc, #64]	; (80010a8 <LCD_Write_Character+0x50>)
 8001068:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800106c:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(character);
 800106e:	79fb      	ldrb	r3, [r7, #7]
 8001070:	4618      	mov	r0, r3
 8001072:	f000 f833 	bl	80010dc <LCD_Write_Nibbles>
	if(DisplayState.CurrentLine == Topline){
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <LCD_Write_Character+0x54>)
 8001078:	789b      	ldrb	r3, [r3, #2]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <LCD_Write_Character+0x34>
		DisplayState.ToplineCharacters ++;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <LCD_Write_Character+0x54>)
 8001080:	78db      	ldrb	r3, [r3, #3]
 8001082:	3301      	adds	r3, #1
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <LCD_Write_Character+0x54>)
 8001088:	70da      	strb	r2, [r3, #3]
	} else if (DisplayState.CurrentLine == Bottomline){
		DisplayState.BottomlineCharacters ++;
	}
}
 800108a:	e009      	b.n	80010a0 <LCD_Write_Character+0x48>
	} else if (DisplayState.CurrentLine == Bottomline){
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <LCD_Write_Character+0x54>)
 800108e:	789b      	ldrb	r3, [r3, #2]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d105      	bne.n	80010a0 <LCD_Write_Character+0x48>
		DisplayState.BottomlineCharacters ++;
 8001094:	4b05      	ldr	r3, [pc, #20]	; (80010ac <LCD_Write_Character+0x54>)
 8001096:	791b      	ldrb	r3, [r3, #4]
 8001098:	3301      	adds	r3, #1
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b03      	ldr	r3, [pc, #12]	; (80010ac <LCD_Write_Character+0x54>)
 800109e:	711a      	strb	r2, [r3, #4]
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	48000400 	.word	0x48000400
 80010ac:	200009d8 	.word	0x200009d8

080010b0 <LCD_Write_Instruction>:

void LCD_Write_Instruction(uint8_t instruction)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// select the Instruction Register (RS low)
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <LCD_Write_Instruction+0x28>)
 80010bc:	695b      	ldr	r3, [r3, #20]
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <LCD_Write_Instruction+0x28>)
 80010c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80010c4:	6153      	str	r3, [r2, #20]
	LCD_Write_Nibbles(instruction);
 80010c6:	79fb      	ldrb	r3, [r7, #7]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f000 f807 	bl	80010dc <LCD_Write_Nibbles>
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	48000400 	.word	0x48000400

080010dc <LCD_Write_Nibbles>:

void LCD_Write_Nibbles(uint8_t byte)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
	Delay_us_10(1); // tsu1 > 40ns
 80010e6:	2001      	movs	r0, #1
 80010e8:	f001 fb1c 	bl	8002724 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);			// set E high
 80010ec:	4b42      	ldr	r3, [pc, #264]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	4a41      	ldr	r2, [pc, #260]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 80010f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f6:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 80010f8:	f000 f8d8 	bl	80012ac <LCD_ZeroPins>

	// Write first (most significant) nibble
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 80010fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001100:	2b00      	cmp	r3, #0
 8001102:	da07      	bge.n	8001114 <LCD_Write_Nibbles+0x38>
 8001104:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001108:	695b      	ldr	r3, [r3, #20]
 800110a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800110e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001112:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001114:	79fb      	ldrb	r3, [r7, #7]
 8001116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800111a:	2b00      	cmp	r3, #0
 800111c:	d007      	beq.n	800112e <LCD_Write_Nibbles+0x52>
 800111e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001128:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800112c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	2b00      	cmp	r3, #0
 8001136:	d005      	beq.n	8001144 <LCD_Write_Nibbles+0x68>
 8001138:	4b30      	ldr	r3, [pc, #192]	; (80011fc <LCD_Write_Nibbles+0x120>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <LCD_Write_Nibbles+0x120>)
 800113e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001142:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	f003 0310 	and.w	r3, r3, #16
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <LCD_Write_Nibbles+0x7e>
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <LCD_Write_Nibbles+0x120>)
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	4a2a      	ldr	r2, [pc, #168]	; (80011fc <LCD_Write_Nibbles+0x120>)
 8001154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001158:	6153      	str	r3, [r2, #20]


	// Pulse Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 800115a:	200a      	movs	r0, #10
 800115c:	f001 fae2 	bl	8002724 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);			// Set to 0
 8001160:	4b25      	ldr	r3, [pc, #148]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 8001162:	695b      	ldr	r3, [r3, #20]
 8001164:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 8001166:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800116a:	6153      	str	r3, [r2, #20]
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set to 1
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 800116e:	695b      	ldr	r3, [r3, #20]
 8001170:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 8001172:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001176:	6153      	str	r3, [r2, #20]

	LCD_ZeroPins();
 8001178:	f000 f898 	bl	80012ac <LCD_ZeroPins>
	if(byte & 1<<3)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800117c:	79fb      	ldrb	r3, [r7, #7]
 800117e:	f003 0308 	and.w	r3, r3, #8
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <LCD_Write_Nibbles+0xba>
 8001186:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800118a:	695b      	ldr	r3, [r3, #20]
 800118c:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001194:	6153      	str	r3, [r2, #20]
	if(byte & 1<<2)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	f003 0304 	and.w	r3, r3, #4
 800119c:	2b00      	cmp	r3, #0
 800119e:	d007      	beq.n	80011b0 <LCD_Write_Nibbles+0xd4>
 80011a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80011aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011ae:	6153      	str	r3, [r2, #20]
	if(byte & 1<<1)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d005      	beq.n	80011c6 <LCD_Write_Nibbles+0xea>
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <LCD_Write_Nibbles+0x120>)
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <LCD_Write_Nibbles+0x120>)
 80011c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c4:	6153      	str	r3, [r2, #20]
	if(byte & 1<<0)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	f003 0301 	and.w	r3, r3, #1
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d005      	beq.n	80011dc <LCD_Write_Nibbles+0x100>
 80011d0:	4b0a      	ldr	r3, [pc, #40]	; (80011fc <LCD_Write_Nibbles+0x120>)
 80011d2:	695b      	ldr	r3, [r3, #20]
 80011d4:	4a09      	ldr	r2, [pc, #36]	; (80011fc <LCD_Write_Nibbles+0x120>)
 80011d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011da:	6153      	str	r3, [r2, #20]

	// Drop Enable
//	HAL_Delay(1);
	Delay_us_10(10);
 80011dc:	200a      	movs	r0, #10
 80011de:	f001 faa1 	bl	8002724 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set to 0
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	4a04      	ldr	r2, [pc, #16]	; (80011f8 <LCD_Write_Nibbles+0x11c>)
 80011e8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80011ec:	6153      	str	r3, [r2, #20]
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	48000400 	.word	0x48000400
 80011fc:	48000800 	.word	0x48000800

08001200 <LCD_Write_8bitInstruction>:

void LCD_Write_8bitInstruction(uint8_t byte)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	71fb      	strb	r3, [r7, #7]
	lcd_RS_GPIO_Port->ODR &= ~(1<<lcd_RS_bit);			// Set RS to 0
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	4a25      	ldr	r2, [pc, #148]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 8001210:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001214:	6153      	str	r3, [r2, #20]
	Delay_us_10(1); // tsu1 > 40ns
 8001216:	2001      	movs	r0, #1
 8001218:	f001 fa84 	bl	8002724 <Delay_us_10>
	lcd_E_GPIO_Port->ODR |= (1<<lcd_E_bit);				// Set E to 1
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 8001222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001226:	6153      	str	r3, [r2, #20]
	LCD_ZeroPins();
 8001228:	f000 f840 	bl	80012ac <LCD_ZeroPins>

	// Set to zero first
	if(byte & 1<<7)	lcd_D7_GPIO_Port->ODR |= (1<<lcd_D7_bit);
 800122c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da07      	bge.n	8001244 <LCD_Write_8bitInstruction+0x44>
 8001234:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800123e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001242:	6153      	str	r3, [r2, #20]
	if(byte & 1<<6)	lcd_D6_GPIO_Port->ODR |= (1<<lcd_D6_bit);
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800124a:	2b00      	cmp	r3, #0
 800124c:	d007      	beq.n	800125e <LCD_Write_8bitInstruction+0x5e>
 800124e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001258:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800125c:	6153      	str	r3, [r2, #20]
	if(byte & 1<<5)	lcd_D5_GPIO_Port->ODR |= (1<<lcd_D5_bit);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	f003 0320 	and.w	r3, r3, #32
 8001264:	2b00      	cmp	r3, #0
 8001266:	d005      	beq.n	8001274 <LCD_Write_8bitInstruction+0x74>
 8001268:	4b0f      	ldr	r3, [pc, #60]	; (80012a8 <LCD_Write_8bitInstruction+0xa8>)
 800126a:	695b      	ldr	r3, [r3, #20]
 800126c:	4a0e      	ldr	r2, [pc, #56]	; (80012a8 <LCD_Write_8bitInstruction+0xa8>)
 800126e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001272:	6153      	str	r3, [r2, #20]
	if(byte & 1<<4)	lcd_D4_GPIO_Port->ODR |= (1<<lcd_D4_bit);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	f003 0310 	and.w	r3, r3, #16
 800127a:	2b00      	cmp	r3, #0
 800127c:	d005      	beq.n	800128a <LCD_Write_8bitInstruction+0x8a>
 800127e:	4b0a      	ldr	r3, [pc, #40]	; (80012a8 <LCD_Write_8bitInstruction+0xa8>)
 8001280:	695b      	ldr	r3, [r3, #20]
 8001282:	4a09      	ldr	r2, [pc, #36]	; (80012a8 <LCD_Write_8bitInstruction+0xa8>)
 8001284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001288:	6153      	str	r3, [r2, #20]

//	HAL_Delay(1);
	Delay_us_10(1);
 800128a:	2001      	movs	r0, #1
 800128c:	f001 fa4a 	bl	8002724 <Delay_us_10>
	lcd_E_GPIO_Port->ODR &= ~(1<<lcd_E_bit);		// Set E to 0
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	4a03      	ldr	r2, [pc, #12]	; (80012a4 <LCD_Write_8bitInstruction+0xa4>)
 8001296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800129a:	6153      	str	r3, [r2, #20]
}
 800129c:	bf00      	nop
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	48000400 	.word	0x48000400
 80012a8:	48000800 	.word	0x48000800

080012ac <LCD_ZeroPins>:

void LCD_ZeroPins()
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
	lcd_D7_GPIO_Port->ODR &= ~(1<<lcd_D7_bit);
 80012b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012b4:	695b      	ldr	r3, [r3, #20]
 80012b6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80012be:	6153      	str	r3, [r2, #20]
	lcd_D6_GPIO_Port->ODR &= ~(1<<lcd_D6_bit);
 80012c0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80012c4:	695b      	ldr	r3, [r3, #20]
 80012c6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80012ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80012ce:	6153      	str	r3, [r2, #20]
	lcd_D5_GPIO_Port->ODR &= ~(1<<lcd_D5_bit);
 80012d0:	4b08      	ldr	r3, [pc, #32]	; (80012f4 <LCD_ZeroPins+0x48>)
 80012d2:	695b      	ldr	r3, [r3, #20]
 80012d4:	4a07      	ldr	r2, [pc, #28]	; (80012f4 <LCD_ZeroPins+0x48>)
 80012d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012da:	6153      	str	r3, [r2, #20]
	lcd_D4_GPIO_Port->ODR &= ~(1<<lcd_D4_bit);
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <LCD_ZeroPins+0x48>)
 80012de:	695b      	ldr	r3, [r3, #20]
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <LCD_ZeroPins+0x48>)
 80012e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012e6:	6153      	str	r3, [r2, #20]
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	48000800 	.word	0x48000800

080012f8 <LCD_Clear_Display>:

void LCD_Clear_Display()
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_ReturnHome);
 80012fc:	2002      	movs	r0, #2
 80012fe:	f7ff fed7 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 8001302:	20c8      	movs	r0, #200	; 0xc8
 8001304:	f001 fa0e 	bl	8002724 <Delay_us_10>
	LCD_Write_Instruction(lcd_instruction_ClearDisplay);
 8001308:	2001      	movs	r0, #1
 800130a:	f7ff fed1 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(200); // 2ms
 800130e:	20c8      	movs	r0, #200	; 0xc8
 8001310:	f001 fa08 	bl	8002724 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <LCD_Clear_Display+0x38>)
 8001316:	2200      	movs	r2, #0
 8001318:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 800131a:	4b05      	ldr	r3, [pc, #20]	; (8001330 <LCD_Clear_Display+0x38>)
 800131c:	2200      	movs	r2, #0
 800131e:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 8001320:	4b03      	ldr	r3, [pc, #12]	; (8001330 <LCD_Clear_Display+0x38>)
 8001322:	2200      	movs	r2, #0
 8001324:	709a      	strb	r2, [r3, #2]
	DisplayState.DisplayPosition = 0;
 8001326:	4b02      	ldr	r3, [pc, #8]	; (8001330 <LCD_Clear_Display+0x38>)
 8001328:	2200      	movs	r2, #0
 800132a:	725a      	strb	r2, [r3, #9]
}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	200009d8 	.word	0x200009d8

08001334 <LCD_NewLine>:

void LCD_NewLine()
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorNewLine);
 8001338:	20c0      	movs	r0, #192	; 0xc0
 800133a:	f7ff feb9 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 800133e:	2005      	movs	r0, #5
 8001340:	f001 f9f0 	bl	8002724 <Delay_us_10>
	DisplayState.CurrentLine = Bottomline;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <LCD_NewLine+0x1c>)
 8001346:	2201      	movs	r2, #1
 8001348:	709a      	strb	r2, [r3, #2]
}
 800134a:	bf00      	nop
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	200009d8 	.word	0x200009d8

08001354 <LCD_AutoScroll>:

void LCD_AutoScroll()
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
	uint8_t returnflag = DisplayState.DisplayPosition + 12;
 800135a:	4b10      	ldr	r3, [pc, #64]	; (800139c <LCD_AutoScroll+0x48>)
 800135c:	7a5b      	ldrb	r3, [r3, #9]
 800135e:	330c      	adds	r3, #12
 8001360:	71bb      	strb	r3, [r7, #6]
	uint8_t longestline;
	if(DisplayState.ToplineCharacters >= DisplayState.BottomlineCharacters) longestline = DisplayState.ToplineCharacters;
 8001362:	4b0e      	ldr	r3, [pc, #56]	; (800139c <LCD_AutoScroll+0x48>)
 8001364:	78da      	ldrb	r2, [r3, #3]
 8001366:	4b0d      	ldr	r3, [pc, #52]	; (800139c <LCD_AutoScroll+0x48>)
 8001368:	791b      	ldrb	r3, [r3, #4]
 800136a:	429a      	cmp	r2, r3
 800136c:	d303      	bcc.n	8001376 <LCD_AutoScroll+0x22>
 800136e:	4b0b      	ldr	r3, [pc, #44]	; (800139c <LCD_AutoScroll+0x48>)
 8001370:	78db      	ldrb	r3, [r3, #3]
 8001372:	71fb      	strb	r3, [r7, #7]
 8001374:	e002      	b.n	800137c <LCD_AutoScroll+0x28>
	else longestline = DisplayState.BottomlineCharacters;
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <LCD_AutoScroll+0x48>)
 8001378:	791b      	ldrb	r3, [r3, #4]
 800137a:	71fb      	strb	r3, [r7, #7]
	if(longestline > 16)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	2b10      	cmp	r3, #16
 8001380:	d908      	bls.n	8001394 <LCD_AutoScroll+0x40>
	{
		if(returnflag > longestline)
 8001382:	79ba      	ldrb	r2, [r7, #6]
 8001384:	79fb      	ldrb	r3, [r7, #7]
 8001386:	429a      	cmp	r2, r3
 8001388:	d902      	bls.n	8001390 <LCD_AutoScroll+0x3c>
		{
			LCD_Shift_Home();
 800138a:	f000 f82d 	bl	80013e8 <LCD_Shift_Home>
		else
		{
			LCD_Shift_Left();
		}
	}
}
 800138e:	e001      	b.n	8001394 <LCD_AutoScroll+0x40>
			LCD_Shift_Left();
 8001390:	f000 f806 	bl	80013a0 <LCD_Shift_Left>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200009d8 	.word	0x200009d8

080013a0 <LCD_Shift_Left>:

void LCD_Shift_Left()
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftLeft);
 80013a4:	2018      	movs	r0, #24
 80013a6:	f7ff fe83 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 80013aa:	2005      	movs	r0, #5
 80013ac:	f001 f9ba 	bl	8002724 <Delay_us_10>
	DisplayState.DisplayPosition ++;
 80013b0:	4b03      	ldr	r3, [pc, #12]	; (80013c0 <LCD_Shift_Left+0x20>)
 80013b2:	7a5b      	ldrb	r3, [r3, #9]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	4b01      	ldr	r3, [pc, #4]	; (80013c0 <LCD_Shift_Left+0x20>)
 80013ba:	725a      	strb	r2, [r3, #9]
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	200009d8 	.word	0x200009d8

080013c4 <LCD_Shift_Right>:

void LCD_Shift_Right()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_DisplayShiftRight);
 80013c8:	201c      	movs	r0, #28
 80013ca:	f7ff fe71 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 80013ce:	2005      	movs	r0, #5
 80013d0:	f001 f9a8 	bl	8002724 <Delay_us_10>
	DisplayState.DisplayPosition -= 1;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <LCD_Shift_Right+0x20>)
 80013d6:	7a5b      	ldrb	r3, [r3, #9]
 80013d8:	3b01      	subs	r3, #1
 80013da:	b2da      	uxtb	r2, r3
 80013dc:	4b01      	ldr	r3, [pc, #4]	; (80013e4 <LCD_Shift_Right+0x20>)
 80013de:	725a      	strb	r2, [r3, #9]
}
 80013e0:	bf00      	nop
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200009d8 	.word	0x200009d8

080013e8 <LCD_Shift_Home>:

void LCD_Shift_Home()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
	uint8_t num_shifted = DisplayState.DisplayPosition;
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <LCD_Shift_Home+0x2c>)
 80013f0:	7a5b      	ldrb	r3, [r3, #9]
 80013f2:	70fb      	strb	r3, [r7, #3]
	for(int i = 0; i < num_shifted; i++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	e004      	b.n	8001404 <LCD_Shift_Home+0x1c>
	{
		LCD_Shift_Right();
 80013fa:	f7ff ffe3 	bl	80013c4 <LCD_Shift_Right>
	for(int i = 0; i < num_shifted; i++)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	78fb      	ldrb	r3, [r7, #3]
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	429a      	cmp	r2, r3
 800140a:	dbf6      	blt.n	80013fa <LCD_Shift_Home+0x12>
	}
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200009d8 	.word	0x200009d8

08001418 <LCD_Cursor_Home>:

void LCD_Cursor_Home()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
	LCD_Write_Instruction(lcd_instruction_CursorHome);
 800141c:	2080      	movs	r0, #128	; 0x80
 800141e:	f7ff fe47 	bl	80010b0 <LCD_Write_Instruction>
	Delay_us_10(5);
 8001422:	2005      	movs	r0, #5
 8001424:	f001 f97e 	bl	8002724 <Delay_us_10>
	DisplayState.ToplineCharacters = 0;
 8001428:	4b05      	ldr	r3, [pc, #20]	; (8001440 <LCD_Cursor_Home+0x28>)
 800142a:	2200      	movs	r2, #0
 800142c:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 800142e:	4b04      	ldr	r3, [pc, #16]	; (8001440 <LCD_Cursor_Home+0x28>)
 8001430:	2200      	movs	r2, #0
 8001432:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 8001434:	4b02      	ldr	r3, [pc, #8]	; (8001440 <LCD_Cursor_Home+0x28>)
 8001436:	2200      	movs	r2, #0
 8001438:	709a      	strb	r2, [r3, #2]
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200009d8 	.word	0x200009d8

08001444 <LCD_changeDisplayMode>:

void LCD_changeDisplayMode(DisplayMode newDisplayMode)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4603      	mov	r3, r0
 800144c:	71fb      	strb	r3, [r7, #7]
	LCD_Clear_Display();
 800144e:	f7ff ff53 	bl	80012f8 <LCD_Clear_Display>
	if (newDisplayMode == Menu)
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d11b      	bne.n	8001490 <LCD_changeDisplayMode+0x4c>
	{
		// Change to Menu Display State
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001458:	2201      	movs	r2, #1
 800145a:	2120      	movs	r1, #32
 800145c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001460:	f004 f882 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001464:	2200      	movs	r2, #0
 8001466:	2180      	movs	r1, #128	; 0x80
 8001468:	4829      	ldr	r0, [pc, #164]	; (8001510 <LCD_changeDisplayMode+0xcc>)
 800146a:	f004 f87d 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800146e:	2200      	movs	r2, #0
 8001470:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001474:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001478:	f004 f876 	bl	8005568 <HAL_GPIO_WritePin>
		LCD_Display_Menu();
 800147c:	f000 f84c 	bl	8001518 <LCD_Display_Menu>
		DisplayState.LastMode = DisplayState.Mode;
 8001480:	4b24      	ldr	r3, [pc, #144]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 8001482:	781a      	ldrb	r2, [r3, #0]
 8001484:	4b23      	ldr	r3, [pc, #140]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 8001486:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Menu;
 8001488:	4b22      	ldr	r3, [pc, #136]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 800148a:	2200      	movs	r2, #0
 800148c:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
		DisplayState.LastMode = DisplayState.Mode;
		DisplayState.Mode = Output;
	}
}
 800148e:	e03a      	b.n	8001506 <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Measurement)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d11b      	bne.n	80014ce <LCD_changeDisplayMode+0x8a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001496:	2200      	movs	r2, #0
 8001498:	2120      	movs	r1, #32
 800149a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800149e:	f004 f863 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80014a2:	2201      	movs	r2, #1
 80014a4:	2180      	movs	r1, #128	; 0x80
 80014a6:	481a      	ldr	r0, [pc, #104]	; (8001510 <LCD_changeDisplayMode+0xcc>)
 80014a8:	f004 f85e 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80014ac:	2200      	movs	r2, #0
 80014ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014b6:	f004 f857 	bl	8005568 <HAL_GPIO_WritePin>
		LCD_Display_Measurement();
 80014ba:	f000 f843 	bl	8001544 <LCD_Display_Measurement>
		DisplayState.LastMode = DisplayState.Mode;
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 80014c0:	781a      	ldrb	r2, [r3, #0]
 80014c2:	4b14      	ldr	r3, [pc, #80]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 80014c4:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Measurement;
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 80014c8:	2201      	movs	r2, #1
 80014ca:	701a      	strb	r2, [r3, #0]
}
 80014cc:	e01b      	b.n	8001506 <LCD_changeDisplayMode+0xc2>
	else if (newDisplayMode == Output)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d118      	bne.n	8001506 <LCD_changeDisplayMode+0xc2>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	2120      	movs	r1, #32
 80014d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014dc:	f004 f844 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2180      	movs	r1, #128	; 0x80
 80014e4:	480a      	ldr	r0, [pc, #40]	; (8001510 <LCD_changeDisplayMode+0xcc>)
 80014e6:	f004 f83f 	bl	8005568 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f4:	f004 f838 	bl	8005568 <HAL_GPIO_WritePin>
		DisplayState.LastMode = DisplayState.Mode;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 80014fe:	705a      	strb	r2, [r3, #1]
		DisplayState.Mode = Output;
 8001500:	4b04      	ldr	r3, [pc, #16]	; (8001514 <LCD_changeDisplayMode+0xd0>)
 8001502:	2202      	movs	r2, #2
 8001504:	701a      	strb	r2, [r3, #0]
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	48000800 	.word	0x48000800
 8001514:	200009d8 	.word	0x200009d8

08001518 <LCD_Display_Menu>:

void LCD_Display_Menu()
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
	uint8_t lcd_string[] = "Menu Top Level";
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <LCD_Display_Menu+0x28>)
 8001520:	463c      	mov	r4, r7
 8001522:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001524:	c407      	stmia	r4!, {r0, r1, r2}
 8001526:	8023      	strh	r3, [r4, #0]
 8001528:	3402      	adds	r4, #2
 800152a:	0c1b      	lsrs	r3, r3, #16
 800152c:	7023      	strb	r3, [r4, #0]
	LCD_Write_String(lcd_string);
 800152e:	463b      	mov	r3, r7
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fd38 	bl	8000fa6 <LCD_Write_String>
}
 8001536:	bf00      	nop
 8001538:	3714      	adds	r7, #20
 800153a:	46bd      	mov	sp, r7
 800153c:	bd90      	pop	{r4, r7, pc}
 800153e:	bf00      	nop
 8001540:	08009c70 	.word	0x08009c70

08001544 <LCD_Display_Measurement>:

void LCD_Display_Measurement()
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b09e      	sub	sp, #120	; 0x78
 8001548:	af00      	add	r7, sp, #0
//	LCD_Clear_Display();
	LCD_Cursor_Home();
 800154a:	f7ff ff65 	bl	8001418 <LCD_Cursor_Home>
	switch(MeasurementState.Mode)
 800154e:	4b44      	ldr	r3, [pc, #272]	; (8001660 <LCD_Display_Measurement+0x11c>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b04      	cmp	r3, #4
 8001554:	f200 81c8 	bhi.w	80018e8 <LCD_Display_Measurement+0x3a4>
 8001558:	a201      	add	r2, pc, #4	; (adr r2, 8001560 <LCD_Display_Measurement+0x1c>)
 800155a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800155e:	bf00      	nop
 8001560:	08001575 	.word	0x08001575
 8001564:	0800163f 	.word	0x0800163f
 8001568:	08001679 	.word	0x08001679
 800156c:	08001893 	.word	0x08001893
 8001570:	080018b3 	.word	0x080018b3
	{
		case DV:
		{
			uint8_t topline[] = "x.xxxV";
 8001574:	4a3b      	ldr	r2, [pc, #236]	; (8001664 <LCD_Display_Measurement+0x120>)
 8001576:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800157a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157e:	6018      	str	r0, [r3, #0]
 8001580:	3304      	adds	r3, #4
 8001582:	8019      	strh	r1, [r3, #0]
 8001584:	3302      	adds	r3, #2
 8001586:	0c0a      	lsrs	r2, r1, #16
 8001588:	701a      	strb	r2, [r3, #0]
			topline[0] = ((MeasurementState.Offset/1000) % 10) + 48;
 800158a:	4b35      	ldr	r3, [pc, #212]	; (8001660 <LCD_Display_Measurement+0x11c>)
 800158c:	891b      	ldrh	r3, [r3, #8]
 800158e:	4a36      	ldr	r2, [pc, #216]	; (8001668 <LCD_Display_Measurement+0x124>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	b29a      	uxth	r2, r3
 8001598:	4b34      	ldr	r3, [pc, #208]	; (800166c <LCD_Display_Measurement+0x128>)
 800159a:	fba3 1302 	umull	r1, r3, r3, r2
 800159e:	08d9      	lsrs	r1, r3, #3
 80015a0:	460b      	mov	r3, r1
 80015a2:	009b      	lsls	r3, r3, #2
 80015a4:	440b      	add	r3, r1
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	b29b      	uxth	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	3330      	adds	r3, #48	; 0x30
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
			topline[2] = ((MeasurementState.Offset/100) % 10) + 48;
 80015b6:	4b2a      	ldr	r3, [pc, #168]	; (8001660 <LCD_Display_Measurement+0x11c>)
 80015b8:	891b      	ldrh	r3, [r3, #8]
 80015ba:	4a2d      	ldr	r2, [pc, #180]	; (8001670 <LCD_Display_Measurement+0x12c>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	095b      	lsrs	r3, r3, #5
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	4b29      	ldr	r3, [pc, #164]	; (800166c <LCD_Display_Measurement+0x128>)
 80015c6:	fba3 1302 	umull	r1, r3, r3, r2
 80015ca:	08d9      	lsrs	r1, r3, #3
 80015cc:	460b      	mov	r3, r1
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	440b      	add	r3, r1
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	3330      	adds	r3, #48	; 0x30
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
			topline[3] = ((MeasurementState.Offset/10) % 10) + 48;
 80015e2:	4b1f      	ldr	r3, [pc, #124]	; (8001660 <LCD_Display_Measurement+0x11c>)
 80015e4:	891b      	ldrh	r3, [r3, #8]
 80015e6:	4a21      	ldr	r2, [pc, #132]	; (800166c <LCD_Display_Measurement+0x128>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	08db      	lsrs	r3, r3, #3
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b1e      	ldr	r3, [pc, #120]	; (800166c <LCD_Display_Measurement+0x128>)
 80015f2:	fba3 1302 	umull	r1, r3, r3, r2
 80015f6:	08d9      	lsrs	r1, r3, #3
 80015f8:	460b      	mov	r3, r1
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	b29b      	uxth	r3, r3
 8001604:	b2db      	uxtb	r3, r3
 8001606:	3330      	adds	r3, #48	; 0x30
 8001608:	b2db      	uxtb	r3, r3
 800160a:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
			topline[4] = ((MeasurementState.Offset) % 10) + 48;
 800160e:	4b14      	ldr	r3, [pc, #80]	; (8001660 <LCD_Display_Measurement+0x11c>)
 8001610:	891a      	ldrh	r2, [r3, #8]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <LCD_Display_Measurement+0x128>)
 8001614:	fba3 1302 	umull	r1, r3, r3, r2
 8001618:	08d9      	lsrs	r1, r3, #3
 800161a:	460b      	mov	r3, r1
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	1ad3      	subs	r3, r2, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	b2db      	uxtb	r3, r3
 8001628:	3330      	adds	r3, #48	; 0x30
 800162a:	b2db      	uxtb	r3, r3
 800162c:	f887 3074 	strb.w	r3, [r7, #116]	; 0x74
			LCD_Write_String(topline);
 8001630:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fcb6 	bl	8000fa6 <LCD_Write_String>
			break;
 800163a:	bf00      	nop
 800163c:	e155      	b.n	80018ea <LCD_Display_Measurement+0x3a6>
		}
		case DI:
		{
			uint8_t topline[] = "DC Current";
 800163e:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <LCD_Display_Measurement+0x130>)
 8001640:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001644:	ca07      	ldmia	r2, {r0, r1, r2}
 8001646:	c303      	stmia	r3!, {r0, r1}
 8001648:	801a      	strh	r2, [r3, #0]
 800164a:	3302      	adds	r3, #2
 800164c:	0c12      	lsrs	r2, r2, #16
 800164e:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 8001650:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fca6 	bl	8000fa6 <LCD_Write_String>
			break;
 800165a:	bf00      	nop
 800165c:	e145      	b.n	80018ea <LCD_Display_Measurement+0x3a6>
 800165e:	bf00      	nop
 8001660:	20000828 	.word	0x20000828
 8001664:	08009c80 	.word	0x08009c80
 8001668:	10624dd3 	.word	0x10624dd3
 800166c:	cccccccd 	.word	0xcccccccd
 8001670:	51eb851f 	.word	0x51eb851f
 8001674:	08009c88 	.word	0x08009c88
		}
		case AV:
		{
			uint8_t topline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 8001678:	4b94      	ldr	r3, [pc, #592]	; (80018cc <LCD_Display_Measurement+0x388>)
 800167a:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800167e:	461d      	mov	r5, r3
 8001680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001684:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001688:	c403      	stmia	r4!, {r0, r1}
 800168a:	8022      	strh	r2, [r4, #0]
 800168c:	3402      	adds	r4, #2
 800168e:	0c13      	lsrs	r3, r2, #16
 8001690:	7023      	strb	r3, [r4, #0]
			topline[2] = ((MeasurementState.Offset/1000) % 10) + 48;
 8001692:	4b8f      	ldr	r3, [pc, #572]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001694:	891b      	ldrh	r3, [r3, #8]
 8001696:	4a8f      	ldr	r2, [pc, #572]	; (80018d4 <LCD_Display_Measurement+0x390>)
 8001698:	fba2 2303 	umull	r2, r3, r2, r3
 800169c:	099b      	lsrs	r3, r3, #6
 800169e:	b29a      	uxth	r2, r3
 80016a0:	4b8d      	ldr	r3, [pc, #564]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80016a2:	fba3 1302 	umull	r1, r3, r3, r2
 80016a6:	08d9      	lsrs	r1, r3, #3
 80016a8:	460b      	mov	r3, r1
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	440b      	add	r3, r1
 80016ae:	005b      	lsls	r3, r3, #1
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	3330      	adds	r3, #48	; 0x30
 80016b8:	b2db      	uxtb	r3, r3
 80016ba:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
			topline[4] = ((MeasurementState.Offset/100) % 10) + 48;
 80016be:	4b84      	ldr	r3, [pc, #528]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 80016c0:	891b      	ldrh	r3, [r3, #8]
 80016c2:	4a86      	ldr	r2, [pc, #536]	; (80018dc <LCD_Display_Measurement+0x398>)
 80016c4:	fba2 2303 	umull	r2, r3, r2, r3
 80016c8:	095b      	lsrs	r3, r3, #5
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b82      	ldr	r3, [pc, #520]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80016ce:	fba3 1302 	umull	r1, r3, r3, r2
 80016d2:	08d9      	lsrs	r1, r3, #3
 80016d4:	460b      	mov	r3, r1
 80016d6:	009b      	lsls	r3, r3, #2
 80016d8:	440b      	add	r3, r1
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	b29b      	uxth	r3, r3
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	3330      	adds	r3, #48	; 0x30
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
			topline[5] = ((MeasurementState.Offset/10) % 10) + 48;
 80016ea:	4b79      	ldr	r3, [pc, #484]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 80016ec:	891b      	ldrh	r3, [r3, #8]
 80016ee:	4a7a      	ldr	r2, [pc, #488]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80016f0:	fba2 2303 	umull	r2, r3, r2, r3
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b77      	ldr	r3, [pc, #476]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80016fa:	fba3 1302 	umull	r1, r3, r3, r2
 80016fe:	08d9      	lsrs	r1, r3, #3
 8001700:	460b      	mov	r3, r1
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	b29b      	uxth	r3, r3
 800170c:	b2db      	uxtb	r3, r3
 800170e:	3330      	adds	r3, #48	; 0x30
 8001710:	b2db      	uxtb	r3, r3
 8001712:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
			topline[6] = ((MeasurementState.Offset) % 10) + 48;
 8001716:	4b6e      	ldr	r3, [pc, #440]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001718:	891a      	ldrh	r2, [r3, #8]
 800171a:	4b6f      	ldr	r3, [pc, #444]	; (80018d8 <LCD_Display_Measurement+0x394>)
 800171c:	fba3 1302 	umull	r1, r3, r3, r2
 8001720:	08d9      	lsrs	r1, r3, #3
 8001722:	460b      	mov	r3, r1
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	440b      	add	r3, r1
 8001728:	005b      	lsls	r3, r3, #1
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	b29b      	uxth	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	3330      	adds	r3, #48	; 0x30
 8001732:	b2db      	uxtb	r3, r3
 8001734:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			topline[11] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8001738:	4b65      	ldr	r3, [pc, #404]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 800173a:	885b      	ldrh	r3, [r3, #2]
 800173c:	4a65      	ldr	r2, [pc, #404]	; (80018d4 <LCD_Display_Measurement+0x390>)
 800173e:	fba2 2303 	umull	r2, r3, r2, r3
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	b29a      	uxth	r2, r3
 8001746:	4b64      	ldr	r3, [pc, #400]	; (80018d8 <LCD_Display_Measurement+0x394>)
 8001748:	fba3 1302 	umull	r1, r3, r3, r2
 800174c:	08d9      	lsrs	r1, r3, #3
 800174e:	460b      	mov	r3, r1
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	b29b      	uxth	r3, r3
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3330      	adds	r3, #48	; 0x30
 800175e:	b2db      	uxtb	r3, r3
 8001760:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
			topline[13] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8001764:	4b5a      	ldr	r3, [pc, #360]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001766:	885b      	ldrh	r3, [r3, #2]
 8001768:	4a5c      	ldr	r2, [pc, #368]	; (80018dc <LCD_Display_Measurement+0x398>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	095b      	lsrs	r3, r3, #5
 8001770:	b29a      	uxth	r2, r3
 8001772:	4b59      	ldr	r3, [pc, #356]	; (80018d8 <LCD_Display_Measurement+0x394>)
 8001774:	fba3 1302 	umull	r1, r3, r3, r2
 8001778:	08d9      	lsrs	r1, r3, #3
 800177a:	460b      	mov	r3, r1
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	440b      	add	r3, r1
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	b29b      	uxth	r3, r3
 8001786:	b2db      	uxtb	r3, r3
 8001788:	3330      	adds	r3, #48	; 0x30
 800178a:	b2db      	uxtb	r3, r3
 800178c:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
			topline[14] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8001790:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001792:	885b      	ldrh	r3, [r3, #2]
 8001794:	4a50      	ldr	r2, [pc, #320]	; (80018d8 <LCD_Display_Measurement+0x394>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	08db      	lsrs	r3, r3, #3
 800179c:	b29a      	uxth	r2, r3
 800179e:	4b4e      	ldr	r3, [pc, #312]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80017a0:	fba3 1302 	umull	r1, r3, r3, r2
 80017a4:	08d9      	lsrs	r1, r3, #3
 80017a6:	460b      	mov	r3, r1
 80017a8:	009b      	lsls	r3, r3, #2
 80017aa:	440b      	add	r3, r1
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	b29b      	uxth	r3, r3
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	3330      	adds	r3, #48	; 0x30
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			topline[15] = ((MeasurementState.Amplitude) % 10) + 48;
 80017bc:	4b44      	ldr	r3, [pc, #272]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 80017be:	885a      	ldrh	r2, [r3, #2]
 80017c0:	4b45      	ldr	r3, [pc, #276]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80017c2:	fba3 1302 	umull	r1, r3, r3, r2
 80017c6:	08d9      	lsrs	r1, r3, #3
 80017c8:	460b      	mov	r3, r1
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	3330      	adds	r3, #48	; 0x30
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			topline[20] = ((MeasurementState.Frequency/1000) % 10) + 48;
 80017de:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 80017e0:	889b      	ldrh	r3, [r3, #4]
 80017e2:	4a3c      	ldr	r2, [pc, #240]	; (80018d4 <LCD_Display_Measurement+0x390>)
 80017e4:	fba2 2303 	umull	r2, r3, r2, r3
 80017e8:	099b      	lsrs	r3, r3, #6
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <LCD_Display_Measurement+0x394>)
 80017ee:	fba3 1302 	umull	r1, r3, r3, r2
 80017f2:	08d9      	lsrs	r1, r3, #3
 80017f4:	460b      	mov	r3, r1
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	440b      	add	r3, r1
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	b29b      	uxth	r3, r3
 8001800:	b2db      	uxtb	r3, r3
 8001802:	3330      	adds	r3, #48	; 0x30
 8001804:	b2db      	uxtb	r3, r3
 8001806:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
			topline[21] = ((MeasurementState.Frequency/100) % 10) + 48;
 800180a:	4b31      	ldr	r3, [pc, #196]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 800180c:	889b      	ldrh	r3, [r3, #4]
 800180e:	4a33      	ldr	r2, [pc, #204]	; (80018dc <LCD_Display_Measurement+0x398>)
 8001810:	fba2 2303 	umull	r2, r3, r2, r3
 8001814:	095b      	lsrs	r3, r3, #5
 8001816:	b29a      	uxth	r2, r3
 8001818:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <LCD_Display_Measurement+0x394>)
 800181a:	fba3 1302 	umull	r1, r3, r3, r2
 800181e:	08d9      	lsrs	r1, r3, #3
 8001820:	460b      	mov	r3, r1
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	440b      	add	r3, r1
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	b29b      	uxth	r3, r3
 800182c:	b2db      	uxtb	r3, r3
 800182e:	3330      	adds	r3, #48	; 0x30
 8001830:	b2db      	uxtb	r3, r3
 8001832:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
			topline[22] = ((MeasurementState.Frequency/10) % 10) + 48;
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001838:	889b      	ldrh	r3, [r3, #4]
 800183a:	4a27      	ldr	r2, [pc, #156]	; (80018d8 <LCD_Display_Measurement+0x394>)
 800183c:	fba2 2303 	umull	r2, r3, r2, r3
 8001840:	08db      	lsrs	r3, r3, #3
 8001842:	b29a      	uxth	r2, r3
 8001844:	4b24      	ldr	r3, [pc, #144]	; (80018d8 <LCD_Display_Measurement+0x394>)
 8001846:	fba3 1302 	umull	r1, r3, r3, r2
 800184a:	08d9      	lsrs	r1, r3, #3
 800184c:	460b      	mov	r3, r1
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	440b      	add	r3, r1
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	b29b      	uxth	r3, r3
 8001858:	b2db      	uxtb	r3, r3
 800185a:	3330      	adds	r3, #48	; 0x30
 800185c:	b2db      	uxtb	r3, r3
 800185e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			topline[23] = ((MeasurementState.Frequency) % 10) + 48;
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <LCD_Display_Measurement+0x38c>)
 8001864:	889a      	ldrh	r2, [r3, #4]
 8001866:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <LCD_Display_Measurement+0x394>)
 8001868:	fba3 1302 	umull	r1, r3, r3, r2
 800186c:	08d9      	lsrs	r1, r3, #3
 800186e:	460b      	mov	r3, r1
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	440b      	add	r3, r1
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	b29b      	uxth	r3, r3
 800187a:	b2db      	uxtb	r3, r3
 800187c:	3330      	adds	r3, #48	; 0x30
 800187e:	b2db      	uxtb	r3, r3
 8001880:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			LCD_Write_String(topline);
 8001884:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fb8c 	bl	8000fa6 <LCD_Write_String>
			break;
 800188e:	bf00      	nop
 8001890:	e02b      	b.n	80018ea <LCD_Display_Measurement+0x3a6>
		}
		case AI:
		{
			uint8_t topline[] = "AC Current";
 8001892:	4a13      	ldr	r2, [pc, #76]	; (80018e0 <LCD_Display_Measurement+0x39c>)
 8001894:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001898:	ca07      	ldmia	r2, {r0, r1, r2}
 800189a:	c303      	stmia	r3!, {r0, r1}
 800189c:	801a      	strh	r2, [r3, #0]
 800189e:	3302      	adds	r3, #2
 80018a0:	0c12      	lsrs	r2, r2, #16
 80018a2:	701a      	strb	r2, [r3, #0]
			LCD_Write_String(topline);
 80018a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff fb7c 	bl	8000fa6 <LCD_Write_String>
			break;
 80018ae:	bf00      	nop
 80018b0:	e01b      	b.n	80018ea <LCD_Display_Measurement+0x3a6>
		}
		case TC:
		{
			uint8_t topline[] = "Temperature";
 80018b2:	4a0c      	ldr	r2, [pc, #48]	; (80018e4 <LCD_Display_Measurement+0x3a0>)
 80018b4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80018ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			LCD_Write_String(topline);
 80018be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff fb6f 	bl	8000fa6 <LCD_Write_String>
			break;
 80018c8:	bf00      	nop
 80018ca:	e00e      	b.n	80018ea <LCD_Display_Measurement+0x3a6>
 80018cc:	08009c94 	.word	0x08009c94
 80018d0:	20000828 	.word	0x20000828
 80018d4:	10624dd3 	.word	0x10624dd3
 80018d8:	cccccccd 	.word	0xcccccccd
 80018dc:	51eb851f 	.word	0x51eb851f
 80018e0:	08009cb0 	.word	0x08009cb0
 80018e4:	08009cbc 	.word	0x08009cbc
		}
		default:
			// Problems
			break;
 80018e8:	bf00      	nop
	}
	LCD_NewLine();
 80018ea:	f7ff fd23 	bl	8001334 <LCD_NewLine>
	if(OutputState.On){
 80018ee:	4b39      	ldr	r3, [pc, #228]	; (80019d4 <LCD_Display_Measurement+0x490>)
 80018f0:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	f000 818d 	beq.w	8001c14 <LCD_Display_Measurement+0x6d0>
		if(OutputState.Mode == d){
 80018fa:	4b36      	ldr	r3, [pc, #216]	; (80019d4 <LCD_Display_Measurement+0x490>)
 80018fc:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 8001900:	2b64      	cmp	r3, #100	; 0x64
 8001902:	d171      	bne.n	80019e8 <LCD_Display_Measurement+0x4a4>
			uint8_t bottomline[] = "x.xxxV";
 8001904:	4a34      	ldr	r2, [pc, #208]	; (80019d8 <LCD_Display_Measurement+0x494>)
 8001906:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800190a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800190e:	6018      	str	r0, [r3, #0]
 8001910:	3304      	adds	r3, #4
 8001912:	8019      	strh	r1, [r3, #0]
 8001914:	3302      	adds	r3, #2
 8001916:	0c0a      	lsrs	r2, r1, #16
 8001918:	701a      	strb	r2, [r3, #0]
			bottomline[0] = ((OutputState.DCValue/1000) % 10) + 48;
 800191a:	4b2e      	ldr	r3, [pc, #184]	; (80019d4 <LCD_Display_Measurement+0x490>)
 800191c:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 8001920:	4a2e      	ldr	r2, [pc, #184]	; (80019dc <LCD_Display_Measurement+0x498>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	099b      	lsrs	r3, r3, #6
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b2d      	ldr	r3, [pc, #180]	; (80019e0 <LCD_Display_Measurement+0x49c>)
 800192c:	fba3 1302 	umull	r1, r3, r3, r2
 8001930:	08d9      	lsrs	r1, r3, #3
 8001932:	460b      	mov	r3, r1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	b29b      	uxth	r3, r3
 800193e:	b2db      	uxtb	r3, r3
 8001940:	3330      	adds	r3, #48	; 0x30
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			bottomline[2] = ((OutputState.DCValue/100) % 10) + 48;
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <LCD_Display_Measurement+0x490>)
 800194a:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800194e:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <LCD_Display_Measurement+0x4a0>)
 8001950:	fba2 2303 	umull	r2, r3, r2, r3
 8001954:	095b      	lsrs	r3, r3, #5
 8001956:	b29a      	uxth	r2, r3
 8001958:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <LCD_Display_Measurement+0x49c>)
 800195a:	fba3 1302 	umull	r1, r3, r3, r2
 800195e:	08d9      	lsrs	r1, r3, #3
 8001960:	460b      	mov	r3, r1
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	b29b      	uxth	r3, r3
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3330      	adds	r3, #48	; 0x30
 8001970:	b2db      	uxtb	r3, r3
 8001972:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			bottomline[3] = ((OutputState.DCValue/10) % 10) + 48;
 8001976:	4b17      	ldr	r3, [pc, #92]	; (80019d4 <LCD_Display_Measurement+0x490>)
 8001978:	f8b3 319a 	ldrh.w	r3, [r3, #410]	; 0x19a
 800197c:	4a18      	ldr	r2, [pc, #96]	; (80019e0 <LCD_Display_Measurement+0x49c>)
 800197e:	fba2 2303 	umull	r2, r3, r2, r3
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	b29a      	uxth	r2, r3
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <LCD_Display_Measurement+0x49c>)
 8001988:	fba3 1302 	umull	r1, r3, r3, r2
 800198c:	08d9      	lsrs	r1, r3, #3
 800198e:	460b      	mov	r3, r1
 8001990:	009b      	lsls	r3, r3, #2
 8001992:	440b      	add	r3, r1
 8001994:	005b      	lsls	r3, r3, #1
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	b29b      	uxth	r3, r3
 800199a:	b2db      	uxtb	r3, r3
 800199c:	3330      	adds	r3, #48	; 0x30
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			bottomline[4] = ((OutputState.DCValue) % 10) + 48;
 80019a4:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <LCD_Display_Measurement+0x490>)
 80019a6:	f8b3 219a 	ldrh.w	r2, [r3, #410]	; 0x19a
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <LCD_Display_Measurement+0x49c>)
 80019ac:	fba3 1302 	umull	r1, r3, r3, r2
 80019b0:	08d9      	lsrs	r1, r3, #3
 80019b2:	460b      	mov	r3, r1
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	440b      	add	r3, r1
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	b29b      	uxth	r3, r3
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	3330      	adds	r3, #48	; 0x30
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			LCD_Write_String(bottomline);
 80019c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff faea 	bl	8000fa6 <LCD_Write_String>
		}
	} else {
		uint8_t bottomline[] = "OUTPUT OFF";
		LCD_Write_String(bottomline);
	}
}
 80019d2:	e12b      	b.n	8001c2c <LCD_Display_Measurement+0x6e8>
 80019d4:	20000834 	.word	0x20000834
 80019d8:	08009c80 	.word	0x08009c80
 80019dc:	10624dd3 	.word	0x10624dd3
 80019e0:	cccccccd 	.word	0xcccccccd
 80019e4:	51eb851f 	.word	0x51eb851f
		} else if (OutputState.Mode == s){
 80019e8:	4b92      	ldr	r3, [pc, #584]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 80019ea:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80019ee:	2b73      	cmp	r3, #115	; 0x73
 80019f0:	f040 811c 	bne.w	8001c2c <LCD_Display_Measurement+0x6e8>
			uint8_t bottomline[] = "O:x.xxxV,A:x.xxxV,F:xxxxHz";
 80019f4:	4b90      	ldr	r3, [pc, #576]	; (8001c38 <LCD_Display_Measurement+0x6f4>)
 80019f6:	f107 040c 	add.w	r4, r7, #12
 80019fa:	461d      	mov	r5, r3
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a04:	c403      	stmia	r4!, {r0, r1}
 8001a06:	8022      	strh	r2, [r4, #0]
 8001a08:	3402      	adds	r4, #2
 8001a0a:	0c13      	lsrs	r3, r2, #16
 8001a0c:	7023      	strb	r3, [r4, #0]
			bottomline[2] = ((OutputState.Offset/1000) % 10) + 48;
 8001a0e:	4b89      	ldr	r3, [pc, #548]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001a10:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001a14:	4a89      	ldr	r2, [pc, #548]	; (8001c3c <LCD_Display_Measurement+0x6f8>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	099b      	lsrs	r3, r3, #6
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	4b88      	ldr	r3, [pc, #544]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001a20:	fba3 1302 	umull	r1, r3, r3, r2
 8001a24:	08d9      	lsrs	r1, r3, #3
 8001a26:	460b      	mov	r3, r1
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	3330      	adds	r3, #48	; 0x30
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	73bb      	strb	r3, [r7, #14]
			bottomline[4] = ((OutputState.Offset/100) % 10) + 48;
 8001a3a:	4b7e      	ldr	r3, [pc, #504]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001a3c:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001a40:	4a80      	ldr	r2, [pc, #512]	; (8001c44 <LCD_Display_Measurement+0x700>)
 8001a42:	fba2 2303 	umull	r2, r3, r2, r3
 8001a46:	095b      	lsrs	r3, r3, #5
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	4b7d      	ldr	r3, [pc, #500]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8001a50:	08d9      	lsrs	r1, r3, #3
 8001a52:	460b      	mov	r3, r1
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	3330      	adds	r3, #48	; 0x30
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	743b      	strb	r3, [r7, #16]
			bottomline[5] = ((OutputState.Offset/10) % 10) + 48;
 8001a66:	4b73      	ldr	r3, [pc, #460]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001a68:	f8b3 319c 	ldrh.w	r3, [r3, #412]	; 0x19c
 8001a6c:	4a74      	ldr	r2, [pc, #464]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	08db      	lsrs	r3, r3, #3
 8001a74:	b29a      	uxth	r2, r3
 8001a76:	4b72      	ldr	r3, [pc, #456]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001a78:	fba3 1302 	umull	r1, r3, r3, r2
 8001a7c:	08d9      	lsrs	r1, r3, #3
 8001a7e:	460b      	mov	r3, r1
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	3330      	adds	r3, #48	; 0x30
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	747b      	strb	r3, [r7, #17]
			bottomline[6] = ((OutputState.Offset) % 10) + 48;
 8001a92:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001a94:	f8b3 219c 	ldrh.w	r2, [r3, #412]	; 0x19c
 8001a98:	4b69      	ldr	r3, [pc, #420]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001a9e:	08d9      	lsrs	r1, r3, #3
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	b29b      	uxth	r3, r3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3330      	adds	r3, #48	; 0x30
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	74bb      	strb	r3, [r7, #18]
			bottomline[11] = ((OutputState.Amplitude/1000) % 10) + 48;
 8001ab4:	4b5f      	ldr	r3, [pc, #380]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001ab6:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001aba:	4a60      	ldr	r2, [pc, #384]	; (8001c3c <LCD_Display_Measurement+0x6f8>)
 8001abc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac0:	099b      	lsrs	r3, r3, #6
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	4b5e      	ldr	r3, [pc, #376]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001ac6:	fba3 1302 	umull	r1, r3, r3, r2
 8001aca:	08d9      	lsrs	r1, r3, #3
 8001acc:	460b      	mov	r3, r1
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29b      	uxth	r3, r3
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	3330      	adds	r3, #48	; 0x30
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	75fb      	strb	r3, [r7, #23]
			bottomline[13] = ((OutputState.Amplitude/100) % 10) + 48;
 8001ae0:	4b54      	ldr	r3, [pc, #336]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001ae2:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001ae6:	4a57      	ldr	r2, [pc, #348]	; (8001c44 <LCD_Display_Measurement+0x700>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	095b      	lsrs	r3, r3, #5
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b53      	ldr	r3, [pc, #332]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001af2:	fba3 1302 	umull	r1, r3, r3, r2
 8001af6:	08d9      	lsrs	r1, r3, #3
 8001af8:	460b      	mov	r3, r1
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	3330      	adds	r3, #48	; 0x30
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	767b      	strb	r3, [r7, #25]
			bottomline[14] = ((OutputState.Amplitude/10) % 10) + 48;
 8001b0c:	4b49      	ldr	r3, [pc, #292]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001b0e:	f8b3 3196 	ldrh.w	r3, [r3, #406]	; 0x196
 8001b12:	4a4b      	ldr	r2, [pc, #300]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001b14:	fba2 2303 	umull	r2, r3, r2, r3
 8001b18:	08db      	lsrs	r3, r3, #3
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	4b48      	ldr	r3, [pc, #288]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001b1e:	fba3 1302 	umull	r1, r3, r3, r2
 8001b22:	08d9      	lsrs	r1, r3, #3
 8001b24:	460b      	mov	r3, r1
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	005b      	lsls	r3, r3, #1
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	3330      	adds	r3, #48	; 0x30
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	76bb      	strb	r3, [r7, #26]
			bottomline[15] = ((OutputState.Amplitude) % 10) + 48;
 8001b38:	4b3e      	ldr	r3, [pc, #248]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001b3a:	f8b3 2196 	ldrh.w	r2, [r3, #406]	; 0x196
 8001b3e:	4b40      	ldr	r3, [pc, #256]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001b40:	fba3 1302 	umull	r1, r3, r3, r2
 8001b44:	08d9      	lsrs	r1, r3, #3
 8001b46:	460b      	mov	r3, r1
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	3330      	adds	r3, #48	; 0x30
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	76fb      	strb	r3, [r7, #27]
			bottomline[20] = ((OutputState.Frequency/1000) % 10) + 48;
 8001b5a:	4b36      	ldr	r3, [pc, #216]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001b5c:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001b60:	4a36      	ldr	r2, [pc, #216]	; (8001c3c <LCD_Display_Measurement+0x6f8>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	099b      	lsrs	r3, r3, #6
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001b6c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b70:	08d9      	lsrs	r1, r3, #3
 8001b72:	460b      	mov	r3, r1
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	440b      	add	r3, r1
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	b29b      	uxth	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	3330      	adds	r3, #48	; 0x30
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	f887 3020 	strb.w	r3, [r7, #32]
			bottomline[21] = ((OutputState.Frequency/100) % 10) + 48;
 8001b88:	4b2a      	ldr	r3, [pc, #168]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001b8a:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001b8e:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <LCD_Display_Measurement+0x700>)
 8001b90:	fba2 2303 	umull	r2, r3, r2, r3
 8001b94:	095b      	lsrs	r3, r3, #5
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	4b29      	ldr	r3, [pc, #164]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b9e:	08d9      	lsrs	r1, r3, #3
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	3330      	adds	r3, #48	; 0x30
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
			bottomline[22] = ((OutputState.Frequency/10) % 10) + 48;
 8001bb6:	4b1f      	ldr	r3, [pc, #124]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001bb8:	f8b3 3198 	ldrh.w	r3, [r3, #408]	; 0x198
 8001bbc:	4a20      	ldr	r2, [pc, #128]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	4b1e      	ldr	r3, [pc, #120]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001bc8:	fba3 1302 	umull	r1, r3, r3, r2
 8001bcc:	08d9      	lsrs	r1, r3, #3
 8001bce:	460b      	mov	r3, r1
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	440b      	add	r3, r1
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	1ad3      	subs	r3, r2, r3
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	3330      	adds	r3, #48	; 0x30
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
			bottomline[23] = ((OutputState.Frequency) % 10) + 48;
 8001be4:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <LCD_Display_Measurement+0x6f0>)
 8001be6:	f8b3 2198 	ldrh.w	r2, [r3, #408]	; 0x198
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <LCD_Display_Measurement+0x6fc>)
 8001bec:	fba3 1302 	umull	r1, r3, r3, r2
 8001bf0:	08d9      	lsrs	r1, r3, #3
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	1ad3      	subs	r3, r2, r3
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	3330      	adds	r3, #48	; 0x30
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			LCD_Write_String(bottomline);
 8001c08:	f107 030c 	add.w	r3, r7, #12
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f9ca 	bl	8000fa6 <LCD_Write_String>
}
 8001c12:	e00b      	b.n	8001c2c <LCD_Display_Measurement+0x6e8>
		uint8_t bottomline[] = "OUTPUT OFF";
 8001c14:	4a0c      	ldr	r2, [pc, #48]	; (8001c48 <LCD_Display_Measurement+0x704>)
 8001c16:	463b      	mov	r3, r7
 8001c18:	ca07      	ldmia	r2, {r0, r1, r2}
 8001c1a:	c303      	stmia	r3!, {r0, r1}
 8001c1c:	801a      	strh	r2, [r3, #0]
 8001c1e:	3302      	adds	r3, #2
 8001c20:	0c12      	lsrs	r2, r2, #16
 8001c22:	701a      	strb	r2, [r3, #0]
		LCD_Write_String(bottomline);
 8001c24:	463b      	mov	r3, r7
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f9bd 	bl	8000fa6 <LCD_Write_String>
}
 8001c2c:	bf00      	nop
 8001c2e:	3778      	adds	r7, #120	; 0x78
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bdb0      	pop	{r4, r5, r7, pc}
 8001c34:	20000834 	.word	0x20000834
 8001c38:	08009c94 	.word	0x08009c94
 8001c3c:	10624dd3 	.word	0x10624dd3
 8001c40:	cccccccd 	.word	0xcccccccd
 8001c44:	51eb851f 	.word	0x51eb851f
 8001c48:	08009cc8 	.word	0x08009cc8

08001c4c <HAL_UART_RxCpltCallback>:

// Flag set every 10 us
uint8_t us_10 = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
	message_received = 1;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <HAL_UART_RxCpltCallback+0x28>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	701a      	strb	r2, [r3, #0]
	rx_stored[0] = rx_byte[0];
 8001c5a:	4b07      	ldr	r3, [pc, #28]	; (8001c78 <HAL_UART_RxCpltCallback+0x2c>)
 8001c5c:	781a      	ldrb	r2, [r3, #0]
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <HAL_UART_RxCpltCallback+0x30>)
 8001c60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001c62:	2201      	movs	r2, #1
 8001c64:	4904      	ldr	r1, [pc, #16]	; (8001c78 <HAL_UART_RxCpltCallback+0x2c>)
 8001c66:	4806      	ldr	r0, [pc, #24]	; (8001c80 <HAL_UART_RxCpltCallback+0x34>)
 8001c68:	f005 fe2c 	bl	80078c4 <HAL_UART_Receive_IT>
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000044 	.word	0x20000044
 8001c78:	20000c44 	.word	0x20000c44
 8001c7c:	20000c40 	.word	0x20000c40
 8001c80:	20000b70 	.word	0x20000b70

08001c84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	80fb      	strh	r3, [r7, #6]
	last_ticks = HAL_GetTick();
 8001c8e:	f001 fb97 	bl	80033c0 <HAL_GetTick>
 8001c92:	4602      	mov	r2, r0
 8001c94:	4b15      	ldr	r3, [pc, #84]	; (8001cec <HAL_GPIO_EXTI_Callback+0x68>)
 8001c96:	601a      	str	r2, [r3, #0]
	if(GPIO_Pin == btn_mid_Pin)
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	2b40      	cmp	r3, #64	; 0x40
 8001c9c:	d103      	bne.n	8001ca6 <HAL_GPIO_EXTI_Callback+0x22>
	{
		btn_mid_flag = 1;
 8001c9e:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == btn_down_Pin)
	{
		btn_down_flag = 1;
	}
}
 8001ca4:	e01d      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_right_Pin)
 8001ca6:	88fb      	ldrh	r3, [r7, #6]
 8001ca8:	2b80      	cmp	r3, #128	; 0x80
 8001caa:	d103      	bne.n	8001cb4 <HAL_GPIO_EXTI_Callback+0x30>
		btn_right_flag = 1;
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x70>)
 8001cae:	2201      	movs	r2, #1
 8001cb0:	701a      	strb	r2, [r3, #0]
}
 8001cb2:	e016      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_up_Pin)
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cba:	d103      	bne.n	8001cc4 <HAL_GPIO_EXTI_Callback+0x40>
		btn_up_flag = 1;
 8001cbc:	4b0e      	ldr	r3, [pc, #56]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x74>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
}
 8001cc2:	e00e      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_left_Pin)
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cca:	d103      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x50>
		btn_left_flag = 1;
 8001ccc:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x78>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	701a      	strb	r2, [r3, #0]
}
 8001cd2:	e006      	b.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
	else if(GPIO_Pin == btn_down_Pin)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d102      	bne.n	8001ce2 <HAL_GPIO_EXTI_Callback+0x5e>
		btn_down_flag = 1;
 8001cdc:	4b08      	ldr	r3, [pc, #32]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001cde:	2201      	movs	r2, #1
 8001ce0:	701a      	strb	r2, [r3, #0]
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	20000040 	.word	0x20000040
 8001cf0:	2000003a 	.word	0x2000003a
 8001cf4:	2000003b 	.word	0x2000003b
 8001cf8:	2000003c 	.word	0x2000003c
 8001cfc:	2000003d 	.word	0x2000003d
 8001d00:	2000003e 	.word	0x2000003e

08001d04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	OutputState.TIM2_Clock = 72000000;
 8001d08:	4baf      	ldr	r3, [pc, #700]	; (8001fc8 <main+0x2c4>)
 8001d0a:	4ab0      	ldr	r2, [pc, #704]	; (8001fcc <main+0x2c8>)
 8001d0c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	OutputState.On = false;
 8001d10:	4bad      	ldr	r3, [pc, #692]	; (8001fc8 <main+0x2c4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
	OutputState.Mode = d;
 8001d18:	4bab      	ldr	r3, [pc, #684]	; (8001fc8 <main+0x2c4>)
 8001d1a:	2264      	movs	r2, #100	; 0x64
 8001d1c:	f883 2195 	strb.w	r2, [r3, #405]	; 0x195
	OutputState.Amplitude = 1000;
 8001d20:	4ba9      	ldr	r3, [pc, #676]	; (8001fc8 <main+0x2c4>)
 8001d22:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d26:	f8a3 2196 	strh.w	r2, [r3, #406]	; 0x196
	OutputState.Offset = 1200;
 8001d2a:	4ba7      	ldr	r3, [pc, #668]	; (8001fc8 <main+0x2c4>)
 8001d2c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8001d30:	f8a3 219c 	strh.w	r2, [r3, #412]	; 0x19c
	OutputState.Frequency = 1000;
 8001d34:	4ba4      	ldr	r3, [pc, #656]	; (8001fc8 <main+0x2c4>)
 8001d36:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d3a:	f8a3 2198 	strh.w	r2, [r3, #408]	; 0x198
	OutputState.DCValue = 1000;
 8001d3e:	4ba2      	ldr	r3, [pc, #648]	; (8001fc8 <main+0x2c4>)
 8001d40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d44:	f8a3 219a 	strh.w	r2, [r3, #410]	; 0x19a

	MeasurementState.Mode = DV;
 8001d48:	4ba1      	ldr	r3, [pc, #644]	; (8001fd0 <main+0x2cc>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
	MeasurementState.Amplitude = 0;
 8001d4e:	4ba0      	ldr	r3, [pc, #640]	; (8001fd0 <main+0x2cc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	805a      	strh	r2, [r3, #2]
	MeasurementState.Frequency = 0;
 8001d54:	4b9e      	ldr	r3, [pc, #632]	; (8001fd0 <main+0x2cc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	809a      	strh	r2, [r3, #4]
	MeasurementState.Offset = 0;
 8001d5a:	4b9d      	ldr	r3, [pc, #628]	; (8001fd0 <main+0x2cc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	811a      	strh	r2, [r3, #8]
	MeasurementState.Period = 0;
 8001d60:	4b9b      	ldr	r3, [pc, #620]	; (8001fd0 <main+0x2cc>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	80da      	strh	r2, [r3, #6]

	DisplayState.PrintFlag = 0;
 8001d66:	4b9b      	ldr	r3, [pc, #620]	; (8001fd4 <main+0x2d0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	715a      	strb	r2, [r3, #5]
	DisplayState.RefreshFlag = 0;
 8001d6c:	4b99      	ldr	r3, [pc, #612]	; (8001fd4 <main+0x2d0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	71da      	strb	r2, [r3, #7]
	DisplayState.AutoScrollCounter = 0;
 8001d72:	4b98      	ldr	r3, [pc, #608]	; (8001fd4 <main+0x2d0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	721a      	strb	r2, [r3, #8]
	DisplayState.DisplayPosition = 0;
 8001d78:	4b96      	ldr	r3, [pc, #600]	; (8001fd4 <main+0x2d0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	725a      	strb	r2, [r3, #9]
	DisplayState.ToplineCharacters = 0;
 8001d7e:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <main+0x2d0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	70da      	strb	r2, [r3, #3]
	DisplayState.BottomlineCharacters = 0;
 8001d84:	4b93      	ldr	r3, [pc, #588]	; (8001fd4 <main+0x2d0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	711a      	strb	r2, [r3, #4]
	DisplayState.CurrentLine = Topline;
 8001d8a:	4b92      	ldr	r3, [pc, #584]	; (8001fd4 <main+0x2d0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	709a      	strb	r2, [r3, #2]
	DisplayState.LastMode = Menu;
 8001d90:	4b90      	ldr	r3, [pc, #576]	; (8001fd4 <main+0x2d0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	705a      	strb	r2, [r3, #1]

	// Tempory Measurement Values
	MeasurementState.Offset = 1000;
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <main+0x2cc>)
 8001d98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9c:	811a      	strh	r2, [r3, #8]
	MeasurementState.Frequency = 5250;
 8001d9e:	4b8c      	ldr	r3, [pc, #560]	; (8001fd0 <main+0x2cc>)
 8001da0:	f241 4282 	movw	r2, #5250	; 0x1482
 8001da4:	809a      	strh	r2, [r3, #4]
	MeasurementState.Amplitude = 500;
 8001da6:	4b8a      	ldr	r3, [pc, #552]	; (8001fd0 <main+0x2cc>)
 8001da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dac:	805a      	strh	r2, [r3, #2]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001dae:	f001 faad 	bl	800330c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001db2:	f000 f94d 	bl	8002050 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001db6:	f000 fb8b 	bl	80024d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001dba:	f000 fb6b 	bl	8002494 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001dbe:	f000 fb39 	bl	8002434 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001dc2:	f000 fae9 	bl	8002398 <MX_TIM16_Init>
  MX_ADC1_Init();
 8001dc6:	f000 f9af 	bl	8002128 <MX_ADC1_Init>
  MX_DAC1_Init();
 8001dca:	f000 fa1d 	bl	8002208 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001dce:	f000 fa45 	bl	800225c <MX_TIM2_Init>
  MX_TIM17_Init();
 8001dd2:	f000 fb07 	bl	80023e4 <MX_TIM17_Init>
  MX_TIM15_Init();
 8001dd6:	f000 fa8f 	bl	80022f8 <MX_TIM15_Init>
  /* USER CODE BEGIN 2 */

  	// Transmit Student Number
	HAL_UART_Transmit(&huart2, std_num, 13, 10);
 8001dda:	230a      	movs	r3, #10
 8001ddc:	220d      	movs	r2, #13
 8001dde:	497e      	ldr	r1, [pc, #504]	; (8001fd8 <main+0x2d4>)
 8001de0:	487e      	ldr	r0, [pc, #504]	; (8001fdc <main+0x2d8>)
 8001de2:	f005 fcdb 	bl	800779c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8001de6:	2201      	movs	r2, #1
 8001de8:	497d      	ldr	r1, [pc, #500]	; (8001fe0 <main+0x2dc>)
 8001dea:	487c      	ldr	r0, [pc, #496]	; (8001fdc <main+0x2d8>)
 8001dec:	f005 fd6a 	bl	80078c4 <HAL_UART_Receive_IT>

	// Init ADC Timer
	HAL_TIM_Base_Start_IT(&htim16);
 8001df0:	487c      	ldr	r0, [pc, #496]	; (8001fe4 <main+0x2e0>)
 8001df2:	f005 f82d 	bl	8006e50 <HAL_TIM_Base_Start_IT>

	// Init LCD Refresh Timer
	HAL_TIM_Base_Start_IT(&htim17);
 8001df6:	487c      	ldr	r0, [pc, #496]	; (8001fe8 <main+0x2e4>)
 8001df8:	f005 f82a 	bl	8006e50 <HAL_TIM_Base_Start_IT>

	// Init 10us Timer
	HAL_TIM_Base_Start_IT(&htim15);
 8001dfc:	487b      	ldr	r0, [pc, #492]	; (8001fec <main+0x2e8>)
 8001dfe:	f005 f827 	bl	8006e50 <HAL_TIM_Base_Start_IT>

	// Init LCD
	LCD_Init();
 8001e02:	f7ff f899 	bl	8000f38 <LCD_Init>

	// Init Display State
	HAL_Delay(1);
 8001e06:	2001      	movs	r0, #1
 8001e08:	f001 fae6 	bl	80033d8 <HAL_Delay>
	LCD_changeDisplayMode(Menu);
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fb19 	bl	8001444 <LCD_changeDisplayMode>

	// Init DAC Timer
	HAL_TIM_Base_Start(&htim2);
 8001e12:	4877      	ldr	r0, [pc, #476]	; (8001ff0 <main+0x2ec>)
 8001e14:	f004 ffb4 	bl	8006d80 <HAL_TIM_Base_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(DisplayState.RefreshFlag == 1)
 8001e18:	4b6e      	ldr	r3, [pc, #440]	; (8001fd4 <main+0x2d0>)
 8001e1a:	79db      	ldrb	r3, [r3, #7]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d12a      	bne.n	8001e76 <main+0x172>
	  {
		  if(DisplayState.Mode == Measurement)
 8001e20:	4b6c      	ldr	r3, [pc, #432]	; (8001fd4 <main+0x2d0>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d123      	bne.n	8001e70 <main+0x16c>
		  {
//			  if(MeasurementState.Mode == AV || MeasurementState.Mode == AI)
			  if(MeasurementState.Mode == AV)
 8001e28:	4b69      	ldr	r3, [pc, #420]	; (8001fd0 <main+0x2cc>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d11f      	bne.n	8001e70 <main+0x16c>
			  {
				  DisplayState.AutoScrollCounter ++;
 8001e30:	4b68      	ldr	r3, [pc, #416]	; (8001fd4 <main+0x2d0>)
 8001e32:	7a1b      	ldrb	r3, [r3, #8]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b66      	ldr	r3, [pc, #408]	; (8001fd4 <main+0x2d0>)
 8001e3a:	721a      	strb	r2, [r3, #8]
				  if(DisplayState.AutoScrollCounter > 1)
 8001e3c:	4b65      	ldr	r3, [pc, #404]	; (8001fd4 <main+0x2d0>)
 8001e3e:	7a1b      	ldrb	r3, [r3, #8]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d915      	bls.n	8001e70 <main+0x16c>
				  {
					  MeasurementState.Amplitude += 1;
 8001e44:	4b62      	ldr	r3, [pc, #392]	; (8001fd0 <main+0x2cc>)
 8001e46:	885b      	ldrh	r3, [r3, #2]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	4b60      	ldr	r3, [pc, #384]	; (8001fd0 <main+0x2cc>)
 8001e4e:	805a      	strh	r2, [r3, #2]
					  if(MeasurementState.Amplitude > 2000) MeasurementState.Amplitude = 500;
 8001e50:	4b5f      	ldr	r3, [pc, #380]	; (8001fd0 <main+0x2cc>)
 8001e52:	885b      	ldrh	r3, [r3, #2]
 8001e54:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001e58:	d903      	bls.n	8001e62 <main+0x15e>
 8001e5a:	4b5d      	ldr	r3, [pc, #372]	; (8001fd0 <main+0x2cc>)
 8001e5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001e60:	805a      	strh	r2, [r3, #2]
					  LCD_Display_Measurement();
 8001e62:	f7ff fb6f 	bl	8001544 <LCD_Display_Measurement>
					  LCD_AutoScroll();
 8001e66:	f7ff fa75 	bl	8001354 <LCD_AutoScroll>
					  DisplayState.AutoScrollCounter = 0;
 8001e6a:	4b5a      	ldr	r3, [pc, #360]	; (8001fd4 <main+0x2d0>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	721a      	strb	r2, [r3, #8]
				  }
			  }

		  }
		  DisplayState.RefreshFlag = 0;
 8001e70:	4b58      	ldr	r3, [pc, #352]	; (8001fd4 <main+0x2d0>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	71da      	strb	r2, [r3, #7]
	  }

	  // LCD UART OUTPUT JOB
	  if(DisplayState.PrintFlag)
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <main+0x2d0>)
 8001e78:	795b      	ldrb	r3, [r3, #5]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00e      	beq.n	8001e9c <main+0x198>
	  {
		  if(DisplayState.Mode != Output)
 8001e7e:	4b55      	ldr	r3, [pc, #340]	; (8001fd4 <main+0x2d0>)
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d002      	beq.n	8001e8c <main+0x188>
		  {
			  LCD_changeDisplayMode(Output);
 8001e86:	2002      	movs	r0, #2
 8001e88:	f7ff fadc 	bl	8001444 <LCD_changeDisplayMode>
		  }
		  LCD_Write_Character_Shift(DisplayState.PrintByte);
 8001e8c:	4b51      	ldr	r3, [pc, #324]	; (8001fd4 <main+0x2d0>)
 8001e8e:	799b      	ldrb	r3, [r3, #6]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f7ff f8a3 	bl	8000fdc <LCD_Write_Character_Shift>
		  DisplayState.PrintFlag = 0;
 8001e96:	4b4f      	ldr	r3, [pc, #316]	; (8001fd4 <main+0x2d0>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	715a      	strb	r2, [r3, #5]
	  }

	  // UART JOB
	  if(message_received)
 8001e9c:	4b55      	ldr	r3, [pc, #340]	; (8001ff4 <main+0x2f0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d004      	beq.n	8001eae <main+0x1aa>
	  {
		  UART_Main_Function();
 8001ea4:	f000 fe92 	bl	8002bcc <UART_Main_Function>
		  message_received = 0;
 8001ea8:	4b52      	ldr	r3, [pc, #328]	; (8001ff4 <main+0x2f0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
	  }

	  // BUTTONS JOB
	  if(btn_up_flag)
 8001eae:	4b52      	ldr	r3, [pc, #328]	; (8001ff8 <main+0x2f4>)
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d011      	beq.n	8001eda <main+0x1d6>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001eb6:	f001 fa83 	bl	80033c0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b4f      	ldr	r3, [pc, #316]	; (8001ffc <main+0x2f8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b36      	cmp	r3, #54	; 0x36
 8001ec4:	f240 80b2 	bls.w	800202c <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_up_GPIO_Port, btn_up_Pin))
 8001ec8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001ecc:	484c      	ldr	r0, [pc, #304]	; (8002000 <main+0x2fc>)
 8001ece:	f003 fb33 	bl	8005538 <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
//				  uint32_t code = HAL_UART_GetError(&huart2);
			  }
			  btn_up_flag = 0;
 8001ed2:	4b49      	ldr	r3, [pc, #292]	; (8001ff8 <main+0x2f4>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
 8001ed8:	e0a8      	b.n	800202c <main+0x328>
		  }
	  }
	  else if(btn_left_flag)
 8001eda:	4b4a      	ldr	r3, [pc, #296]	; (8002004 <main+0x300>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d01a      	beq.n	8001f18 <main+0x214>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001ee2:	f001 fa6d 	bl	80033c0 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	4b44      	ldr	r3, [pc, #272]	; (8001ffc <main+0x2f8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b36      	cmp	r3, #54	; 0x36
 8001ef0:	f240 809c 	bls.w	800202c <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin))
 8001ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ef8:	4841      	ldr	r0, [pc, #260]	; (8002000 <main+0x2fc>)
 8001efa:	f003 fb1d 	bl	8005538 <HAL_GPIO_ReadPin>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d005      	beq.n	8001f10 <main+0x20c>
			  {
				  // HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
				  LCD_Write_Instruction(0b00011100);
 8001f04:	201c      	movs	r0, #28
 8001f06:	f7ff f8d3 	bl	80010b0 <LCD_Write_Instruction>
				  Delay_us_10(5);
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f000 fc0a 	bl	8002724 <Delay_us_10>
			  }
			  btn_left_flag = 0;
 8001f10:	4b3c      	ldr	r3, [pc, #240]	; (8002004 <main+0x300>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	701a      	strb	r2, [r3, #0]
 8001f16:	e089      	b.n	800202c <main+0x328>
		  }
	  }
	  else if(btn_down_flag)
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <main+0x304>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d010      	beq.n	8001f42 <main+0x23e>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001f20:	f001 fa4e 	bl	80033c0 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <main+0x2f8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b36      	cmp	r3, #54	; 0x36
 8001f2e:	d97d      	bls.n	800202c <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_down_GPIO_Port, btn_down_Pin))
 8001f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f34:	4832      	ldr	r0, [pc, #200]	; (8002000 <main+0x2fc>)
 8001f36:	f003 faff 	bl	8005538 <HAL_GPIO_ReadPin>
			  {
				  // HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
			  }
			  btn_down_flag = 0;
 8001f3a:	4b33      	ldr	r3, [pc, #204]	; (8002008 <main+0x304>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	701a      	strb	r2, [r3, #0]
 8001f40:	e074      	b.n	800202c <main+0x328>
		  }
	  }
	  else if(btn_right_flag)
 8001f42:	4b32      	ldr	r3, [pc, #200]	; (800200c <main+0x308>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d019      	beq.n	8001f7e <main+0x27a>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001f4a:	f001 fa39 	bl	80033c0 <HAL_GetTick>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	4b2a      	ldr	r3, [pc, #168]	; (8001ffc <main+0x2f8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b36      	cmp	r3, #54	; 0x36
 8001f58:	d968      	bls.n	800202c <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin))
 8001f5a:	2180      	movs	r1, #128	; 0x80
 8001f5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f60:	f003 faea 	bl	8005538 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d005      	beq.n	8001f76 <main+0x272>
			  {
				  // HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
				  LCD_Write_Instruction(0b00011000);
 8001f6a:	2018      	movs	r0, #24
 8001f6c:	f7ff f8a0 	bl	80010b0 <LCD_Write_Instruction>
				  Delay_us_10(5);
 8001f70:	2005      	movs	r0, #5
 8001f72:	f000 fbd7 	bl	8002724 <Delay_us_10>
			  }
			  btn_right_flag = 0;
 8001f76:	4b25      	ldr	r3, [pc, #148]	; (800200c <main+0x308>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	701a      	strb	r2, [r3, #0]
 8001f7c:	e056      	b.n	800202c <main+0x328>
		  }
	  }
	  else if(btn_mid_flag)
 8001f7e:	4b24      	ldr	r3, [pc, #144]	; (8002010 <main+0x30c>)
 8001f80:	781b      	ldrb	r3, [r3, #0]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d052      	beq.n	800202c <main+0x328>
	  {
		  if(HAL_GetTick() - last_ticks >= 55)
 8001f86:	f001 fa1b 	bl	80033c0 <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <main+0x2f8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b36      	cmp	r3, #54	; 0x36
 8001f94:	d94a      	bls.n	800202c <main+0x328>
		  {
			  if(HAL_GPIO_ReadPin(btn_mid_GPIO_Port, btn_mid_Pin))
 8001f96:	2140      	movs	r1, #64	; 0x40
 8001f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f9c:	f003 facc 	bl	8005538 <HAL_GPIO_ReadPin>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d03f      	beq.n	8002026 <main+0x322>
			  {
				  // Toggle Menu Display state
				  if(DisplayState.Mode == Menu){
 8001fa6:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <main+0x2d0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d103      	bne.n	8001fb6 <main+0x2b2>
					  LCD_changeDisplayMode(Measurement);
 8001fae:	2001      	movs	r0, #1
 8001fb0:	f7ff fa48 	bl	8001444 <LCD_changeDisplayMode>
 8001fb4:	e037      	b.n	8002026 <main+0x322>
				  } else if(DisplayState.Mode == Measurement){
 8001fb6:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <main+0x2d0>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d12a      	bne.n	8002014 <main+0x310>
					  LCD_changeDisplayMode(Menu);
 8001fbe:	2000      	movs	r0, #0
 8001fc0:	f7ff fa40 	bl	8001444 <LCD_changeDisplayMode>
 8001fc4:	e02f      	b.n	8002026 <main+0x322>
 8001fc6:	bf00      	nop
 8001fc8:	20000834 	.word	0x20000834
 8001fcc:	044aa200 	.word	0x044aa200
 8001fd0:	20000828 	.word	0x20000828
 8001fd4:	200009d8 	.word	0x200009d8
 8001fd8:	20000000 	.word	0x20000000
 8001fdc:	20000b70 	.word	0x20000b70
 8001fe0:	20000c44 	.word	0x20000c44
 8001fe4:	20000bf4 	.word	0x20000bf4
 8001fe8:	20000a44 	.word	0x20000a44
 8001fec:	200009f8 	.word	0x200009f8
 8001ff0:	20000b24 	.word	0x20000b24
 8001ff4:	20000044 	.word	0x20000044
 8001ff8:	2000003c 	.word	0x2000003c
 8001ffc:	20000040 	.word	0x20000040
 8002000:	48000400 	.word	0x48000400
 8002004:	2000003d 	.word	0x2000003d
 8002008:	2000003e 	.word	0x2000003e
 800200c:	2000003b 	.word	0x2000003b
 8002010:	2000003a 	.word	0x2000003a
				  } else if(DisplayState.Mode == Output){
 8002014:	4b0b      	ldr	r3, [pc, #44]	; (8002044 <main+0x340>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b02      	cmp	r3, #2
 800201a:	d104      	bne.n	8002026 <main+0x322>
					  LCD_changeDisplayMode(DisplayState.LastMode);
 800201c:	4b09      	ldr	r3, [pc, #36]	; (8002044 <main+0x340>)
 800201e:	785b      	ldrb	r3, [r3, #1]
 8002020:	4618      	mov	r0, r3
 8002022:	f7ff fa0f 	bl	8001444 <LCD_changeDisplayMode>
				  }
			  }
			  btn_mid_flag = 0;
 8002026:	4b08      	ldr	r3, [pc, #32]	; (8002048 <main+0x344>)
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  // ADC JOB
	  if(adc_timer_flag)
 800202c:	4b07      	ldr	r3, [pc, #28]	; (800204c <main+0x348>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	f43f aef1 	beq.w	8001e18 <main+0x114>
	  {
		  ADC_Main_Function();
 8002036:	f7fe fd9d 	bl	8000b74 <ADC_Main_Function>
		  adc_timer_flag = 0;
 800203a:	4b04      	ldr	r3, [pc, #16]	; (800204c <main+0x348>)
 800203c:	2200      	movs	r2, #0
 800203e:	701a      	strb	r2, [r3, #0]
	  if(DisplayState.RefreshFlag == 1)
 8002040:	e6ea      	b.n	8001e18 <main+0x114>
 8002042:	bf00      	nop
 8002044:	200009d8 	.word	0x200009d8
 8002048:	2000003a 	.word	0x2000003a
 800204c:	2000003f 	.word	0x2000003f

08002050 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b0a6      	sub	sp, #152	; 0x98
 8002054:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002056:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800205a:	2228      	movs	r2, #40	; 0x28
 800205c:	2100      	movs	r1, #0
 800205e:	4618      	mov	r0, r3
 8002060:	f006 fddc 	bl	8008c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002064:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2258      	movs	r2, #88	; 0x58
 8002078:	2100      	movs	r1, #0
 800207a:	4618      	mov	r0, r3
 800207c:	f006 fdce 	bl	8008c1c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002080:	2302      	movs	r3, #2
 8002082:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002084:	2301      	movs	r3, #1
 8002086:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002088:	2310      	movs	r3, #16
 800208a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800208e:	2302      	movs	r3, #2
 8002090:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002094:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002098:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800209c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80020a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80020a4:	2300      	movs	r3, #0
 80020a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80020ae:	4618      	mov	r0, r3
 80020b0:	f003 faa4 	bl	80055fc <HAL_RCC_OscConfig>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80020ba:	f000 fb51 	bl	8002760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020be:	230f      	movs	r3, #15
 80020c0:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020c2:	2302      	movs	r3, #2
 80020c4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020c6:	2300      	movs	r3, #0
 80020c8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020ce:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020d4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80020d8:	2102      	movs	r1, #2
 80020da:	4618      	mov	r0, r3
 80020dc:	f004 f9a4 	bl	8006428 <HAL_RCC_ClockConfig>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80020e6:	f000 fb3b 	bl	8002760 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM15
 80020ea:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <SystemClock_Config+0xd4>)
 80020ec:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_TIM16|RCC_PERIPHCLK_TIM17
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_TIM2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80020f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInit.Tim15ClockSelection = RCC_TIM15CLK_HCLK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.Tim16ClockSelection = RCC_TIM16CLK_HCLK;
 80020fc:	2300      	movs	r3, #0
 80020fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.Tim17ClockSelection = RCC_TIM17CLK_HCLK;
 8002100:	2300      	movs	r3, #0
 8002102:	653b      	str	r3, [r7, #80]	; 0x50
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8002104:	2300      	movs	r3, #0
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002108:	1d3b      	adds	r3, r7, #4
 800210a:	4618      	mov	r0, r3
 800210c:	f004 fbc2 	bl	8006894 <HAL_RCCEx_PeriphCLKConfig>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002116:	f000 fb23 	bl	8002760 <Error_Handler>
  }
}
 800211a:	bf00      	nop
 800211c:	3798      	adds	r7, #152	; 0x98
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	01d00082 	.word	0x01d00082

08002128 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800212e:	f107 031c 	add.w	r3, r7, #28
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800213a:	1d3b      	adds	r3, r7, #4
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	605a      	str	r2, [r3, #4]
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	60da      	str	r2, [r3, #12]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 800214a:	4b2e      	ldr	r3, [pc, #184]	; (8002204 <MX_ADC1_Init+0xdc>)
 800214c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002150:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002152:	4b2c      	ldr	r3, [pc, #176]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002154:	2200      	movs	r2, #0
 8002156:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002158:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <MX_ADC1_Init+0xdc>)
 800215a:	2200      	movs	r2, #0
 800215c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800215e:	4b29      	ldr	r3, [pc, #164]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002164:	4b27      	ldr	r3, [pc, #156]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002166:	2200      	movs	r2, #0
 8002168:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800216a:	4b26      	ldr	r3, [pc, #152]	; (8002204 <MX_ADC1_Init+0xdc>)
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002174:	2200      	movs	r2, #0
 8002176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002178:	4b22      	ldr	r3, [pc, #136]	; (8002204 <MX_ADC1_Init+0xdc>)
 800217a:	2201      	movs	r2, #1
 800217c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800217e:	4b21      	ldr	r3, [pc, #132]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002180:	2200      	movs	r2, #0
 8002182:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002184:	4b1f      	ldr	r3, [pc, #124]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002186:	2201      	movs	r2, #1
 8002188:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800218a:	4b1e      	ldr	r3, [pc, #120]	; (8002204 <MX_ADC1_Init+0xdc>)
 800218c:	2200      	movs	r2, #0
 800218e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002192:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <MX_ADC1_Init+0xdc>)
 8002194:	2204      	movs	r2, #4
 8002196:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002198:	4b1a      	ldr	r3, [pc, #104]	; (8002204 <MX_ADC1_Init+0xdc>)
 800219a:	2200      	movs	r2, #0
 800219c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800219e:	4b19      	ldr	r3, [pc, #100]	; (8002204 <MX_ADC1_Init+0xdc>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021a4:	4817      	ldr	r0, [pc, #92]	; (8002204 <MX_ADC1_Init+0xdc>)
 80021a6:	f001 f939 	bl	800341c <HAL_ADC_Init>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80021b0:	f000 fad6 	bl	8002760 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80021b8:	f107 031c 	add.w	r3, r7, #28
 80021bc:	4619      	mov	r1, r3
 80021be:	4811      	ldr	r0, [pc, #68]	; (8002204 <MX_ADC1_Init+0xdc>)
 80021c0:	f002 f86e 	bl	80042a0 <HAL_ADCEx_MultiModeConfigChannel>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d001      	beq.n	80021ce <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80021ca:	f000 fac9 	bl	8002760 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80021d2:	2301      	movs	r3, #1
 80021d4:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	4619      	mov	r1, r3
 80021ea:	4806      	ldr	r0, [pc, #24]	; (8002204 <MX_ADC1_Init+0xdc>)
 80021ec:	f001 fd6c 	bl	8003cc8 <HAL_ADC_ConfigChannel>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 80021f6:	f000 fab3 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	3728      	adds	r7, #40	; 0x28
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000ad4 	.word	0x20000ad4

08002208 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8002218:	4b0e      	ldr	r3, [pc, #56]	; (8002254 <MX_DAC1_Init+0x4c>)
 800221a:	4a0f      	ldr	r2, [pc, #60]	; (8002258 <MX_DAC1_Init+0x50>)
 800221c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800221e:	480d      	ldr	r0, [pc, #52]	; (8002254 <MX_DAC1_Init+0x4c>)
 8002220:	f002 fbbf 	bl	80049a2 <HAL_DAC_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 800222a:	f000 fa99 	bl	8002760 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800222e:	2324      	movs	r3, #36	; 0x24
 8002230:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	; (8002254 <MX_DAC1_Init+0x4c>)
 800223e:	f002 fcef 	bl	8004c20 <HAL_DAC_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8002248:	f000 fa8a 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800224c:	bf00      	nop
 800224e:	3710      	adds	r7, #16
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	200009e4 	.word	0x200009e4
 8002258:	40007400 	.word	0x40007400

0800225c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002262:	f107 0310 	add.w	r3, r7, #16
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	605a      	str	r2, [r3, #4]
 800226c:	609a      	str	r2, [r3, #8]
 800226e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002270:	1d3b      	adds	r3, r7, #4
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800227a:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <MX_TIM2_Init+0x98>)
 800227c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002282:	4b1c      	ldr	r3, [pc, #112]	; (80022f4 <MX_TIM2_Init+0x98>)
 8002284:	2200      	movs	r2, #0
 8002286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002288:	4b1a      	ldr	r3, [pc, #104]	; (80022f4 <MX_TIM2_Init+0x98>)
 800228a:	2200      	movs	r2, #0
 800228c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <MX_TIM2_Init+0x98>)
 8002290:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002296:	4b17      	ldr	r3, [pc, #92]	; (80022f4 <MX_TIM2_Init+0x98>)
 8002298:	2200      	movs	r2, #0
 800229a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800229c:	4b15      	ldr	r3, [pc, #84]	; (80022f4 <MX_TIM2_Init+0x98>)
 800229e:	2200      	movs	r2, #0
 80022a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022a2:	4814      	ldr	r0, [pc, #80]	; (80022f4 <MX_TIM2_Init+0x98>)
 80022a4:	f004 fd14 	bl	8006cd0 <HAL_TIM_Base_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80022ae:	f000 fa57 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	4619      	mov	r1, r3
 80022be:	480d      	ldr	r0, [pc, #52]	; (80022f4 <MX_TIM2_Init+0x98>)
 80022c0:	f004 ff55 	bl	800716e <HAL_TIM_ConfigClockSource>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80022ca:	f000 fa49 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80022ce:	2320      	movs	r3, #32
 80022d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022d6:	1d3b      	adds	r3, r7, #4
 80022d8:	4619      	mov	r1, r3
 80022da:	4806      	ldr	r0, [pc, #24]	; (80022f4 <MX_TIM2_Init+0x98>)
 80022dc:	f005 f966 	bl	80075ac <HAL_TIMEx_MasterConfigSynchronization>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80022e6:	f000 fa3b 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80022ea:	bf00      	nop
 80022ec:	3720      	adds	r7, #32
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000b24 	.word	0x20000b24

080022f8 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022fe:	f107 0310 	add.w	r3, r7, #16
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	605a      	str	r2, [r3, #4]
 8002308:	609a      	str	r2, [r3, #8]
 800230a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800230c:	1d3b      	adds	r3, r7, #4
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	605a      	str	r2, [r3, #4]
 8002314:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8002316:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <MX_TIM15_Init+0x98>)
 8002318:	4a1e      	ldr	r2, [pc, #120]	; (8002394 <MX_TIM15_Init+0x9c>)
 800231a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 72-1;
 800231c:	4b1c      	ldr	r3, [pc, #112]	; (8002390 <MX_TIM15_Init+0x98>)
 800231e:	2247      	movs	r2, #71	; 0x47
 8002320:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002322:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <MX_TIM15_Init+0x98>)
 8002324:	2200      	movs	r2, #0
 8002326:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 10-1;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <MX_TIM15_Init+0x98>)
 800232a:	2209      	movs	r2, #9
 800232c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800232e:	4b18      	ldr	r3, [pc, #96]	; (8002390 <MX_TIM15_Init+0x98>)
 8002330:	2200      	movs	r2, #0
 8002332:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002334:	4b16      	ldr	r3, [pc, #88]	; (8002390 <MX_TIM15_Init+0x98>)
 8002336:	2200      	movs	r2, #0
 8002338:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800233a:	4b15      	ldr	r3, [pc, #84]	; (8002390 <MX_TIM15_Init+0x98>)
 800233c:	2200      	movs	r2, #0
 800233e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8002340:	4813      	ldr	r0, [pc, #76]	; (8002390 <MX_TIM15_Init+0x98>)
 8002342:	f004 fcc5 	bl	8006cd0 <HAL_TIM_Base_Init>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM15_Init+0x58>
  {
    Error_Handler();
 800234c:	f000 fa08 	bl	8002760 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002350:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002354:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002356:	f107 0310 	add.w	r3, r7, #16
 800235a:	4619      	mov	r1, r3
 800235c:	480c      	ldr	r0, [pc, #48]	; (8002390 <MX_TIM15_Init+0x98>)
 800235e:	f004 ff06 	bl	800716e <HAL_TIM_ConfigClockSource>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM15_Init+0x74>
  {
    Error_Handler();
 8002368:	f000 f9fa 	bl	8002760 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800236c:	2300      	movs	r3, #0
 800236e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002374:	1d3b      	adds	r3, r7, #4
 8002376:	4619      	mov	r1, r3
 8002378:	4805      	ldr	r0, [pc, #20]	; (8002390 <MX_TIM15_Init+0x98>)
 800237a:	f005 f917 	bl	80075ac <HAL_TIMEx_MasterConfigSynchronization>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8002384:	f000 f9ec 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8002388:	bf00      	nop
 800238a:	3720      	adds	r7, #32
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	200009f8 	.word	0x200009f8
 8002394:	40014000 	.word	0x40014000

08002398 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800239c:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <MX_TIM16_Init+0x44>)
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <MX_TIM16_Init+0x48>)
 80023a0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 72-1;
 80023a2:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <MX_TIM16_Init+0x44>)
 80023a4:	2247      	movs	r2, #71	; 0x47
 80023a6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023a8:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <MX_TIM16_Init+0x44>)
 80023aa:	2200      	movs	r2, #0
 80023ac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 50 - 1;
 80023ae:	4b0b      	ldr	r3, [pc, #44]	; (80023dc <MX_TIM16_Init+0x44>)
 80023b0:	2231      	movs	r2, #49	; 0x31
 80023b2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b4:	4b09      	ldr	r3, [pc, #36]	; (80023dc <MX_TIM16_Init+0x44>)
 80023b6:	2200      	movs	r2, #0
 80023b8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80023ba:	4b08      	ldr	r3, [pc, #32]	; (80023dc <MX_TIM16_Init+0x44>)
 80023bc:	2200      	movs	r2, #0
 80023be:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023c0:	4b06      	ldr	r3, [pc, #24]	; (80023dc <MX_TIM16_Init+0x44>)
 80023c2:	2200      	movs	r2, #0
 80023c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80023c6:	4805      	ldr	r0, [pc, #20]	; (80023dc <MX_TIM16_Init+0x44>)
 80023c8:	f004 fc82 	bl	8006cd0 <HAL_TIM_Base_Init>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <MX_TIM16_Init+0x3e>
  {
    Error_Handler();
 80023d2:	f000 f9c5 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80023d6:	bf00      	nop
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	20000bf4 	.word	0x20000bf4
 80023e0:	40014400 	.word	0x40014400

080023e4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80023e8:	4b10      	ldr	r3, [pc, #64]	; (800242c <MX_TIM17_Init+0x48>)
 80023ea:	4a11      	ldr	r2, [pc, #68]	; (8002430 <MX_TIM17_Init+0x4c>)
 80023ec:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 7200-1;
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <MX_TIM17_Init+0x48>)
 80023f0:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80023f4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023f6:	4b0d      	ldr	r3, [pc, #52]	; (800242c <MX_TIM17_Init+0x48>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 5000-1;
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <MX_TIM17_Init+0x48>)
 80023fe:	f241 3287 	movw	r2, #4999	; 0x1387
 8002402:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002404:	4b09      	ldr	r3, [pc, #36]	; (800242c <MX_TIM17_Init+0x48>)
 8002406:	2200      	movs	r2, #0
 8002408:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800240a:	4b08      	ldr	r3, [pc, #32]	; (800242c <MX_TIM17_Init+0x48>)
 800240c:	2200      	movs	r2, #0
 800240e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002410:	4b06      	ldr	r3, [pc, #24]	; (800242c <MX_TIM17_Init+0x48>)
 8002412:	2200      	movs	r2, #0
 8002414:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002416:	4805      	ldr	r0, [pc, #20]	; (800242c <MX_TIM17_Init+0x48>)
 8002418:	f004 fc5a 	bl	8006cd0 <HAL_TIM_Base_Init>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 8002422:	f000 f99d 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8002426:	bf00      	nop
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000a44 	.word	0x20000a44
 8002430:	40014800 	.word	0x40014800

08002434 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002438:	4b14      	ldr	r3, [pc, #80]	; (800248c <MX_USART2_UART_Init+0x58>)
 800243a:	4a15      	ldr	r2, [pc, #84]	; (8002490 <MX_USART2_UART_Init+0x5c>)
 800243c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002440:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002444:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002446:	4b11      	ldr	r3, [pc, #68]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002448:	2200      	movs	r2, #0
 800244a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800244c:	4b0f      	ldr	r3, [pc, #60]	; (800248c <MX_USART2_UART_Init+0x58>)
 800244e:	2200      	movs	r2, #0
 8002450:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002452:	4b0e      	ldr	r3, [pc, #56]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002454:	2200      	movs	r2, #0
 8002456:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002458:	4b0c      	ldr	r3, [pc, #48]	; (800248c <MX_USART2_UART_Init+0x58>)
 800245a:	220c      	movs	r2, #12
 800245c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002460:	2200      	movs	r2, #0
 8002462:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002464:	4b09      	ldr	r3, [pc, #36]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002466:	2200      	movs	r2, #0
 8002468:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800246a:	4b08      	ldr	r3, [pc, #32]	; (800248c <MX_USART2_UART_Init+0x58>)
 800246c:	2200      	movs	r2, #0
 800246e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002470:	4b06      	ldr	r3, [pc, #24]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002472:	2200      	movs	r2, #0
 8002474:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002476:	4805      	ldr	r0, [pc, #20]	; (800248c <MX_USART2_UART_Init+0x58>)
 8002478:	f005 f942 	bl	8007700 <HAL_UART_Init>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d001      	beq.n	8002486 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002482:	f000 f96d 	bl	8002760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000b70 	.word	0x20000b70
 8002490:	40004400 	.word	0x40004400

08002494 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800249a:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <MX_DMA_Init+0x38>)
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	4a0b      	ldr	r2, [pc, #44]	; (80024cc <MX_DMA_Init+0x38>)
 80024a0:	f043 0301 	orr.w	r3, r3, #1
 80024a4:	6153      	str	r3, [r2, #20]
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <MX_DMA_Init+0x38>)
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	607b      	str	r3, [r7, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2100      	movs	r1, #0
 80024b6:	200d      	movs	r0, #13
 80024b8:	f002 fa3d 	bl	8004936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80024bc:	200d      	movs	r0, #13
 80024be:	f002 fa56 	bl	800496e <HAL_NVIC_EnableIRQ>

}
 80024c2:	bf00      	nop
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d6:	f107 0314 	add.w	r3, r7, #20
 80024da:	2200      	movs	r2, #0
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	60da      	str	r2, [r3, #12]
 80024e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	4b75      	ldr	r3, [pc, #468]	; (80026bc <MX_GPIO_Init+0x1ec>)
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	4a74      	ldr	r2, [pc, #464]	; (80026bc <MX_GPIO_Init+0x1ec>)
 80024ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80024f0:	6153      	str	r3, [r2, #20]
 80024f2:	4b72      	ldr	r3, [pc, #456]	; (80026bc <MX_GPIO_Init+0x1ec>)
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024fa:	613b      	str	r3, [r7, #16]
 80024fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80024fe:	4b6f      	ldr	r3, [pc, #444]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	4a6e      	ldr	r2, [pc, #440]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002508:	6153      	str	r3, [r2, #20]
 800250a:	4b6c      	ldr	r3, [pc, #432]	; (80026bc <MX_GPIO_Init+0x1ec>)
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002516:	4b69      	ldr	r3, [pc, #420]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	4a68      	ldr	r2, [pc, #416]	; (80026bc <MX_GPIO_Init+0x1ec>)
 800251c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002520:	6153      	str	r3, [r2, #20]
 8002522:	4b66      	ldr	r3, [pc, #408]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800252e:	4b63      	ldr	r3, [pc, #396]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	4a62      	ldr	r2, [pc, #392]	; (80026bc <MX_GPIO_Init+0x1ec>)
 8002534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002538:	6153      	str	r3, [r2, #20]
 800253a:	4b60      	ldr	r3, [pc, #384]	; (80026bc <MX_GPIO_Init+0x1ec>)
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	607b      	str	r3, [r7, #4]
 8002544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|LD5_Pin|LD4_Pin|lcd_D6_Pin 
 8002546:	2200      	movs	r2, #0
 8002548:	f44f 51f1 	mov.w	r1, #7712	; 0x1e20
 800254c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002550:	f003 f80a 	bl	8005568 <HAL_GPIO_WritePin>
                          |lcd_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|lcd_D4_Pin|LD3_Pin|lcd_D5_Pin, GPIO_PIN_RESET);
 8002554:	2200      	movs	r2, #0
 8002556:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
 800255a:	4859      	ldr	r0, [pc, #356]	; (80026c0 <MX_GPIO_Init+0x1f0>)
 800255c:	f003 f804 	bl	8005568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, lcd_blown_Pin|lcd_RS_Pin|lcd_E_Pin, GPIO_PIN_RESET);
 8002560:	2200      	movs	r2, #0
 8002562:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8002566:	4857      	ldr	r0, [pc, #348]	; (80026c4 <MX_GPIO_Init+0x1f4>)
 8002568:	f002 fffe 	bl	8005568 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800256c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002572:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002576:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	484f      	ldr	r0, [pc, #316]	; (80026c0 <MX_GPIO_Init+0x1f0>)
 8002584:	f002 fe4e 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin LD5_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|LD5_Pin|LD4_Pin;
 8002588:	f44f 63c4 	mov.w	r3, #1568	; 0x620
 800258c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258e:	2301      	movs	r3, #1
 8002590:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002596:	2300      	movs	r3, #0
 8002598:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800259a:	f107 0314 	add.w	r3, r7, #20
 800259e:	4619      	mov	r1, r3
 80025a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025a4:	f002 fe3e 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_mid_Pin */
  GPIO_InitStruct.Pin = btn_mid_Pin;
 80025a8:	2340      	movs	r3, #64	; 0x40
 80025aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80025ac:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80025b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025b2:	2301      	movs	r3, #1
 80025b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_mid_GPIO_Port, &GPIO_InitStruct);
 80025b6:	f107 0314 	add.w	r3, r7, #20
 80025ba:	4619      	mov	r1, r3
 80025bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025c0:	f002 fe30 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_right_Pin */
  GPIO_InitStruct.Pin = btn_right_Pin;
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80025c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80025cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ce:	2301      	movs	r3, #1
 80025d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(btn_right_GPIO_Port, &GPIO_InitStruct);
 80025d2:	f107 0314 	add.w	r3, r7, #20
 80025d6:	4619      	mov	r1, r3
 80025d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025dc:	f002 fe22 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 LD3_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD3_Pin;
 80025e0:	2390      	movs	r3, #144	; 0x90
 80025e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025e4:	2301      	movs	r3, #1
 80025e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025f0:	f107 0314 	add.w	r3, r7, #20
 80025f4:	4619      	mov	r1, r3
 80025f6:	4832      	ldr	r0, [pc, #200]	; (80026c0 <MX_GPIO_Init+0x1f0>)
 80025f8:	f002 fe14 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_down_Pin btn_left_Pin btn_up_Pin */
  GPIO_InitStruct.Pin = btn_down_Pin|btn_left_Pin|btn_up_Pin;
 80025fc:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002602:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002606:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002608:	2301      	movs	r3, #1
 800260a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800260c:	f107 0314 	add.w	r3, r7, #20
 8002610:	4619      	mov	r1, r3
 8002612:	482c      	ldr	r0, [pc, #176]	; (80026c4 <MX_GPIO_Init+0x1f4>)
 8002614:	f002 fe06 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pin : lcd_blown_Pin */
  GPIO_InitStruct.Pin = lcd_blown_Pin;
 8002618:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800261e:	2311      	movs	r3, #17
 8002620:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002622:	2300      	movs	r3, #0
 8002624:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(lcd_blown_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 0314 	add.w	r3, r7, #20
 800262e:	4619      	mov	r1, r3
 8002630:	4824      	ldr	r0, [pc, #144]	; (80026c4 <MX_GPIO_Init+0x1f4>)
 8002632:	f002 fdf7 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_RS_Pin lcd_E_Pin */
  GPIO_InitStruct.Pin = lcd_RS_Pin|lcd_E_Pin;
 8002636:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 800263a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800263c:	2301      	movs	r3, #1
 800263e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002640:	2300      	movs	r3, #0
 8002642:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002644:	2300      	movs	r3, #0
 8002646:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002648:	f107 0314 	add.w	r3, r7, #20
 800264c:	4619      	mov	r1, r3
 800264e:	481d      	ldr	r0, [pc, #116]	; (80026c4 <MX_GPIO_Init+0x1f4>)
 8002650:	f002 fde8 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D4_Pin lcd_D5_Pin */
  GPIO_InitStruct.Pin = lcd_D4_Pin|lcd_D5_Pin;
 8002654:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002658:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800265a:	2311      	movs	r3, #17
 800265c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	2300      	movs	r3, #0
 8002664:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002666:	f107 0314 	add.w	r3, r7, #20
 800266a:	4619      	mov	r1, r3
 800266c:	4814      	ldr	r0, [pc, #80]	; (80026c0 <MX_GPIO_Init+0x1f0>)
 800266e:	f002 fdd9 	bl	8005224 <HAL_GPIO_Init>

  /*Configure GPIO pins : lcd_D6_Pin lcd_D7_Pin */
  GPIO_InitStruct.Pin = lcd_D6_Pin|lcd_D7_Pin;
 8002672:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002676:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002678:	2311      	movs	r3, #17
 800267a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002680:	2300      	movs	r3, #0
 8002682:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002684:	f107 0314 	add.w	r3, r7, #20
 8002688:	4619      	mov	r1, r3
 800268a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268e:	f002 fdc9 	bl	8005224 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2017      	movs	r0, #23
 8002698:	f002 f94d 	bl	8004936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800269c:	2017      	movs	r0, #23
 800269e:	f002 f966 	bl	800496e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2028      	movs	r0, #40	; 0x28
 80026a8:	f002 f945 	bl	8004936 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80026ac:	2028      	movs	r0, #40	; 0x28
 80026ae:	f002 f95e 	bl	800496e <HAL_NVIC_EnableIRQ>

}
 80026b2:	bf00      	nop
 80026b4:	3728      	adds	r7, #40	; 0x28
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	48000800 	.word	0x48000800
 80026c4:	48000400 	.word	0x48000400

080026c8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	// Check which version of the timer triggered this interrupt
	if(htim == &htim16){
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	4a0e      	ldr	r2, [pc, #56]	; (800270c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d103      	bne.n	80026e0 <HAL_TIM_PeriodElapsedCallback+0x18>
		adc_timer_flag = 1;
 80026d8:	4b0d      	ldr	r3, [pc, #52]	; (8002710 <HAL_TIM_PeriodElapsedCallback+0x48>)
 80026da:	2201      	movs	r2, #1
 80026dc:	701a      	strb	r2, [r3, #0]
	} else if (htim == &htim17){
		DisplayState.RefreshFlag = 1;
	} else if (htim == &htim15){
		us_10 = 1;
	}
}
 80026de:	e00e      	b.n	80026fe <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim17){
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d103      	bne.n	80026f0 <HAL_TIM_PeriodElapsedCallback+0x28>
		DisplayState.RefreshFlag = 1;
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80026ea:	2201      	movs	r2, #1
 80026ec:	71da      	strb	r2, [r3, #7]
}
 80026ee:	e006      	b.n	80026fe <HAL_TIM_PeriodElapsedCallback+0x36>
	} else if (htim == &htim15){
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a0a      	ldr	r2, [pc, #40]	; (800271c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d102      	bne.n	80026fe <HAL_TIM_PeriodElapsedCallback+0x36>
		us_10 = 1;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80026fa:	2201      	movs	r2, #1
 80026fc:	701a      	strb	r2, [r3, #0]
}
 80026fe:	bf00      	nop
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
 800270a:	bf00      	nop
 800270c:	20000bf4 	.word	0x20000bf4
 8002710:	2000003f 	.word	0x2000003f
 8002714:	20000a44 	.word	0x20000a44
 8002718:	200009d8 	.word	0x200009d8
 800271c:	200009f8 	.word	0x200009f8
 8002720:	20000045 	.word	0x20000045

08002724 <Delay_us_10>:

void Delay_us_10(uint8_t tens)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	4603      	mov	r3, r0
 800272c:	71fb      	strb	r3, [r7, #7]
	uint8_t us_10_counter = 0;
 800272e:	2300      	movs	r3, #0
 8002730:	73fb      	strb	r3, [r7, #15]
	while(us_10_counter < tens)
 8002732:	e009      	b.n	8002748 <Delay_us_10+0x24>
	{
		if(us_10){
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <Delay_us_10+0x38>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <Delay_us_10+0x24>
			us_10_counter ++;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	3301      	adds	r3, #1
 8002740:	73fb      	strb	r3, [r7, #15]
			us_10 = 0;
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <Delay_us_10+0x38>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
	while(us_10_counter < tens)
 8002748:	7bfa      	ldrb	r2, [r7, #15]
 800274a:	79fb      	ldrb	r3, [r7, #7]
 800274c:	429a      	cmp	r2, r3
 800274e:	d3f1      	bcc.n	8002734 <Delay_us_10+0x10>
		}
	}
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr
 800275c:	20000045 	.word	0x20000045

08002760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002764:	bf00      	nop
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	4b0f      	ldr	r3, [pc, #60]	; (80027b4 <HAL_MspInit+0x44>)
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	4a0e      	ldr	r2, [pc, #56]	; (80027b4 <HAL_MspInit+0x44>)
 800277c:	f043 0301 	orr.w	r3, r3, #1
 8002780:	6193      	str	r3, [r2, #24]
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_MspInit+0x44>)
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <HAL_MspInit+0x44>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	4a08      	ldr	r2, [pc, #32]	; (80027b4 <HAL_MspInit+0x44>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002798:	61d3      	str	r3, [r2, #28]
 800279a:	4b06      	ldr	r3, [pc, #24]	; (80027b4 <HAL_MspInit+0x44>)
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80027a6:	2007      	movs	r0, #7
 80027a8:	f002 f8ba 	bl	8004920 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}
 80027b4:	40021000 	.word	0x40021000

080027b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b08a      	sub	sp, #40	; 0x28
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	2200      	movs	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
 80027c8:	605a      	str	r2, [r3, #4]
 80027ca:	609a      	str	r2, [r3, #8]
 80027cc:	60da      	str	r2, [r3, #12]
 80027ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027d8:	d124      	bne.n	8002824 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80027da:	4b14      	ldr	r3, [pc, #80]	; (800282c <HAL_ADC_MspInit+0x74>)
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	4a13      	ldr	r2, [pc, #76]	; (800282c <HAL_ADC_MspInit+0x74>)
 80027e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027e4:	6153      	str	r3, [r2, #20]
 80027e6:	4b11      	ldr	r3, [pc, #68]	; (800282c <HAL_ADC_MspInit+0x74>)
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ee:	613b      	str	r3, [r7, #16]
 80027f0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027f2:	4b0e      	ldr	r3, [pc, #56]	; (800282c <HAL_ADC_MspInit+0x74>)
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4a0d      	ldr	r2, [pc, #52]	; (800282c <HAL_ADC_MspInit+0x74>)
 80027f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027fc:	6153      	str	r3, [r2, #20]
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <HAL_ADC_MspInit+0x74>)
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800280a:	2301      	movs	r3, #1
 800280c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800280e:	2303      	movs	r3, #3
 8002810:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002812:	2300      	movs	r3, #0
 8002814:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002816:	f107 0314 	add.w	r3, r7, #20
 800281a:	4619      	mov	r1, r3
 800281c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002820:	f002 fd00 	bl	8005224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002824:	bf00      	nop
 8002826:	3728      	adds	r7, #40	; 0x28
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}
 800282c:	40021000 	.word	0x40021000

08002830 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08a      	sub	sp, #40	; 0x28
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a2c      	ldr	r2, [pc, #176]	; (8002900 <HAL_DAC_MspInit+0xd0>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d152      	bne.n	80028f8 <HAL_DAC_MspInit+0xc8>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002852:	4b2c      	ldr	r3, [pc, #176]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 8002854:	69db      	ldr	r3, [r3, #28]
 8002856:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 8002858:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800285c:	61d3      	str	r3, [r2, #28]
 800285e:	4b29      	ldr	r3, [pc, #164]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002866:	613b      	str	r3, [r7, #16]
 8002868:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800286a:	4b26      	ldr	r3, [pc, #152]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	4a25      	ldr	r2, [pc, #148]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 8002870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002874:	6153      	str	r3, [r2, #20]
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_DAC_MspInit+0xd4>)
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002882:	2310      	movs	r3, #16
 8002884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002886:	2303      	movs	r3, #3
 8002888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800288e:	f107 0314 	add.w	r3, r7, #20
 8002892:	4619      	mov	r1, r3
 8002894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002898:	f002 fcc4 	bl	8005224 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 800289e:	4a1b      	ldr	r2, [pc, #108]	; (800290c <HAL_DAC_MspInit+0xdc>)
 80028a0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028a2:	4b19      	ldr	r3, [pc, #100]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028a4:	2210      	movs	r2, #16
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80028a8:	4b17      	ldr	r3, [pc, #92]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80028ae:	4b16      	ldr	r3, [pc, #88]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028b0:	2280      	movs	r2, #128	; 0x80
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80028b4:	4b14      	ldr	r3, [pc, #80]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028ba:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80028bc:	4b12      	ldr	r3, [pc, #72]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028c2:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80028c4:	4b10      	ldr	r3, [pc, #64]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028c6:	2220      	movs	r2, #32
 80028c8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80028ca:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80028d0:	480d      	ldr	r0, [pc, #52]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028d2:	f002 fa7c 	bl	8004dce <HAL_DMA_Init>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d001      	beq.n	80028e0 <HAL_DAC_MspInit+0xb0>
    {
      Error_Handler();
 80028dc:	f7ff ff40 	bl	8002760 <Error_Handler>
    }

    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80028e0:	4b0b      	ldr	r3, [pc, #44]	; (8002910 <HAL_DAC_MspInit+0xe0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a0a      	ldr	r2, [pc, #40]	; (8002910 <HAL_DAC_MspInit+0xe0>)
 80028e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80028ea:	6013      	str	r3, [r2, #0]

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a06      	ldr	r2, [pc, #24]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028f0:	609a      	str	r2, [r3, #8]
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <HAL_DAC_MspInit+0xd8>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80028f8:	bf00      	nop
 80028fa:	3728      	adds	r7, #40	; 0x28
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	40007400 	.word	0x40007400
 8002904:	40021000 	.word	0x40021000
 8002908:	20000a90 	.word	0x20000a90
 800290c:	40020030 	.word	0x40020030
 8002910:	40010000 	.word	0x40010000

08002914 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b086      	sub	sp, #24
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d114      	bne.n	8002950 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002926:	4b33      	ldr	r3, [pc, #204]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002928:	69db      	ldr	r3, [r3, #28]
 800292a:	4a32      	ldr	r2, [pc, #200]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	61d3      	str	r3, [r2, #28]
 8002932:	4b30      	ldr	r3, [pc, #192]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	617b      	str	r3, [r7, #20]
 800293c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800293e:	2200      	movs	r2, #0
 8002940:	2100      	movs	r1, #0
 8002942:	201c      	movs	r0, #28
 8002944:	f001 fff7 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002948:	201c      	movs	r0, #28
 800294a:	f002 f810 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800294e:	e04c      	b.n	80029ea <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM15)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a28      	ldr	r2, [pc, #160]	; (80029f8 <HAL_TIM_Base_MspInit+0xe4>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d114      	bne.n	8002984 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800295a:	4b26      	ldr	r3, [pc, #152]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	4a25      	ldr	r2, [pc, #148]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002964:	6193      	str	r3, [r2, #24]
 8002966:	4b23      	ldr	r3, [pc, #140]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8002972:	2200      	movs	r2, #0
 8002974:	2100      	movs	r1, #0
 8002976:	2018      	movs	r0, #24
 8002978:	f001 ffdd 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800297c:	2018      	movs	r0, #24
 800297e:	f001 fff6 	bl	800496e <HAL_NVIC_EnableIRQ>
}
 8002982:	e032      	b.n	80029ea <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM16)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a1c      	ldr	r2, [pc, #112]	; (80029fc <HAL_TIM_Base_MspInit+0xe8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d114      	bne.n	80029b8 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800298e:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	4a18      	ldr	r2, [pc, #96]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 8002994:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002998:	6193      	str	r3, [r2, #24]
 800299a:	4b16      	ldr	r3, [pc, #88]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	60fb      	str	r3, [r7, #12]
 80029a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80029a6:	2200      	movs	r2, #0
 80029a8:	2100      	movs	r1, #0
 80029aa:	2019      	movs	r0, #25
 80029ac:	f001 ffc3 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80029b0:	2019      	movs	r0, #25
 80029b2:	f001 ffdc 	bl	800496e <HAL_NVIC_EnableIRQ>
}
 80029b6:	e018      	b.n	80029ea <HAL_TIM_Base_MspInit+0xd6>
  else if(htim_base->Instance==TIM17)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <HAL_TIM_Base_MspInit+0xec>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d113      	bne.n	80029ea <HAL_TIM_Base_MspInit+0xd6>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80029c2:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	4a0b      	ldr	r2, [pc, #44]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6193      	str	r3, [r2, #24]
 80029ce:	4b09      	ldr	r3, [pc, #36]	; (80029f4 <HAL_TIM_Base_MspInit+0xe0>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 0, 0);
 80029da:	2200      	movs	r2, #0
 80029dc:	2100      	movs	r1, #0
 80029de:	201a      	movs	r0, #26
 80029e0:	f001 ffa9 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80029e4:	201a      	movs	r0, #26
 80029e6:	f001 ffc2 	bl	800496e <HAL_NVIC_EnableIRQ>
}
 80029ea:	bf00      	nop
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	40014000 	.word	0x40014000
 80029fc:	40014400 	.word	0x40014400
 8002a00:	40014800 	.word	0x40014800

08002a04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b08a      	sub	sp, #40	; 0x28
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a0c:	f107 0314 	add.w	r3, r7, #20
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	609a      	str	r2, [r3, #8]
 8002a18:	60da      	str	r2, [r3, #12]
 8002a1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_UART_MspInit+0x8c>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d130      	bne.n	8002a88 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a26:	4b1b      	ldr	r3, [pc, #108]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a28:	69db      	ldr	r3, [r3, #28]
 8002a2a:	4a1a      	ldr	r2, [pc, #104]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a30:	61d3      	str	r3, [r2, #28]
 8002a32:	4b18      	ldr	r3, [pc, #96]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a34:	69db      	ldr	r3, [r3, #28]
 8002a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3a:	613b      	str	r3, [r7, #16]
 8002a3c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	4a14      	ldr	r2, [pc, #80]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a48:	6153      	str	r3, [r2, #20]
 8002a4a:	4b12      	ldr	r3, [pc, #72]	; (8002a94 <HAL_UART_MspInit+0x90>)
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a52:	60fb      	str	r3, [r7, #12]
 8002a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002a56:	230c      	movs	r3, #12
 8002a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a62:	2300      	movs	r3, #0
 8002a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002a66:	2307      	movs	r3, #7
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a6a:	f107 0314 	add.w	r3, r7, #20
 8002a6e:	4619      	mov	r1, r3
 8002a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002a74:	f002 fbd6 	bl	8005224 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002a78:	2200      	movs	r2, #0
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	2026      	movs	r0, #38	; 0x26
 8002a7e:	f001 ff5a 	bl	8004936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002a82:	2026      	movs	r0, #38	; 0x26
 8002a84:	f001 ff73 	bl	800496e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002a88:	bf00      	nop
 8002a8a:	3728      	adds	r7, #40	; 0x28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40004400 	.word	0x40004400
 8002a94:	40021000 	.word	0x40021000

08002a98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr

08002aa6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aa6:	b480      	push	{r7}
 8002aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aaa:	e7fe      	b.n	8002aaa <HardFault_Handler+0x4>

08002aac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ab0:	e7fe      	b.n	8002ab0 <MemManage_Handler+0x4>

08002ab2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ab6:	e7fe      	b.n	8002ab6 <BusFault_Handler+0x4>

08002ab8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002abc:	e7fe      	b.n	8002abc <UsageFault_Handler+0x4>

08002abe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002abe:	b480      	push	{r7}
 8002ac0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ada:	b480      	push	{r7}
 8002adc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ade:	bf00      	nop
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aec:	f000 fc54 	bl	8003398 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002af0:	bf00      	nop
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002af8:	4802      	ldr	r0, [pc, #8]	; (8002b04 <DMA1_Channel3_IRQHandler+0x10>)
 8002afa:	f002 fa85 	bl	8005008 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8002afe:	bf00      	nop
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000a90 	.word	0x20000a90

08002b08 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002b0c:	2040      	movs	r0, #64	; 0x40
 8002b0e:	f002 fd5d 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002b12:	2080      	movs	r0, #128	; 0x80
 8002b14:	f002 fd5a 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8002b18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002b1c:	f002 fd56 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002b20:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b24:	f002 fd52 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	bd80      	pop	{r7, pc}

08002b2c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break and TIM15 interrupts.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8002b30:	4802      	ldr	r0, [pc, #8]	; (8002b3c <TIM1_BRK_TIM15_IRQHandler+0x10>)
 8002b32:	f004 f9fd 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8002b36:	bf00      	nop
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	200009f8 	.word	0x200009f8

08002b40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update and TIM16 interrupts.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8002b44:	4802      	ldr	r0, [pc, #8]	; (8002b50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8002b46:	f004 f9f3 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8002b4a:	bf00      	nop
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	20000bf4 	.word	0x20000bf4

08002b54 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger, commutation and TIM17 interrupts.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8002b58:	4802      	ldr	r0, [pc, #8]	; (8002b64 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8002b5a:	f004 f9e9 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	bd80      	pop	{r7, pc}
 8002b62:	bf00      	nop
 8002b64:	20000a44 	.word	0x20000a44

08002b68 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b6c:	4802      	ldr	r0, [pc, #8]	; (8002b78 <TIM2_IRQHandler+0x10>)
 8002b6e:	f004 f9df 	bl	8006f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	20000b24 	.word	0x20000b24

08002b7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b80:	4802      	ldr	r0, [pc, #8]	; (8002b8c <USART2_IRQHandler+0x10>)
 8002b82:	f004 feed 	bl	8007960 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b86:	bf00      	nop
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000b70 	.word	0x20000b70

08002b90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8002b94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002b98:	f002 fd18 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002b9c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002ba0:	f002 fd14 	bl	80055cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002ba4:	bf00      	nop
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002bac:	4b06      	ldr	r3, [pc, #24]	; (8002bc8 <SystemInit+0x20>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <SystemInit+0x20>)
 8002bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002bbc:	bf00      	nop
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <UART_Main_Function>:
uint8_t rx_bytes[10] = {0};
uint8_t rx_bytes_counter = 0;
uint8_t count = 0;

void UART_Main_Function()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
	if(rx_stored[0] != '\n' && rx_stored[0] != '\0' && rx_stored[0] != 0x0a)
 8002bd0:	4b20      	ldr	r3, [pc, #128]	; (8002c54 <UART_Main_Function+0x88>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b0a      	cmp	r3, #10
 8002bd6:	d03b      	beq.n	8002c50 <UART_Main_Function+0x84>
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	; (8002c54 <UART_Main_Function+0x88>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d037      	beq.n	8002c50 <UART_Main_Function+0x84>
 8002be0:	4b1c      	ldr	r3, [pc, #112]	; (8002c54 <UART_Main_Function+0x88>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2b0a      	cmp	r3, #10
 8002be6:	d033      	beq.n	8002c50 <UART_Main_Function+0x84>
	{
	  rx_bytes[rx_bytes_counter] = rx_stored[0];
 8002be8:	4b1b      	ldr	r3, [pc, #108]	; (8002c58 <UART_Main_Function+0x8c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <UART_Main_Function+0x88>)
 8002bf0:	7819      	ldrb	r1, [r3, #0]
 8002bf2:	4b1a      	ldr	r3, [pc, #104]	; (8002c5c <UART_Main_Function+0x90>)
 8002bf4:	5499      	strb	r1, [r3, r2]
	  if(rx_bytes_counter == 0 && rx_stored[0] == '@'){
 8002bf6:	4b18      	ldr	r3, [pc, #96]	; (8002c58 <UART_Main_Function+0x8c>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10d      	bne.n	8002c1a <UART_Main_Function+0x4e>
 8002bfe:	4b15      	ldr	r3, [pc, #84]	; (8002c54 <UART_Main_Function+0x88>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d109      	bne.n	8002c1a <UART_Main_Function+0x4e>
		  rx_bytes_counter = 0;
 8002c06:	4b14      	ldr	r3, [pc, #80]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	701a      	strb	r2, [r3, #0]
		  rx_bytes_counter++;
 8002c0c:	4b12      	ldr	r3, [pc, #72]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	3301      	adds	r3, #1
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	4b10      	ldr	r3, [pc, #64]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c16:	701a      	strb	r2, [r3, #0]
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
			  rx_bytes_counter = 0;
		  }
	  }
	}
}
 8002c18:	e01a      	b.n	8002c50 <UART_Main_Function+0x84>
	  } else if(rx_bytes_counter > 0){
 8002c1a:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d016      	beq.n	8002c50 <UART_Main_Function+0x84>
		  rx_bytes_counter++;
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	3301      	adds	r3, #1
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4b0b      	ldr	r3, [pc, #44]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c2c:	701a      	strb	r2, [r3, #0]
		  if(UART_Rx_Complete(rx_stored[0]))
 8002c2e:	4b09      	ldr	r3, [pc, #36]	; (8002c54 <UART_Main_Function+0x88>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 f814 	bl	8002c60 <UART_Rx_Complete>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d008      	beq.n	8002c50 <UART_Main_Function+0x84>
			  UART_Interpret_Rx_Message(rx_bytes, rx_bytes_counter);
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4619      	mov	r1, r3
 8002c44:	4805      	ldr	r0, [pc, #20]	; (8002c5c <UART_Main_Function+0x90>)
 8002c46:	f000 f81d 	bl	8002c84 <UART_Interpret_Rx_Message>
			  rx_bytes_counter = 0;
 8002c4a:	4b03      	ldr	r3, [pc, #12]	; (8002c58 <UART_Main_Function+0x8c>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	701a      	strb	r2, [r3, #0]
}
 8002c50:	bf00      	nop
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000c40 	.word	0x20000c40
 8002c58:	20000052 	.word	0x20000052
 8002c5c:	20000048 	.word	0x20000048

08002c60 <UART_Rx_Complete>:

bool UART_Rx_Complete(uint8_t last_byte)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	71fb      	strb	r3, [r7, #7]
	if(last_byte == '!')
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	2b21      	cmp	r3, #33	; 0x21
 8002c6e:	d101      	bne.n	8002c74 <UART_Rx_Complete+0x14>
	{
		return true;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <UART_Rx_Complete+0x16>
	}
	else
	{
		return false;
 8002c74:	2300      	movs	r3, #0
	}
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
	...

08002c84 <UART_Interpret_Rx_Message>:

void UART_Interpret_Rx_Message(uint8_t *rx_array, uint8_t length)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	70fb      	strb	r3, [r7, #3]

	if(length > 7)
 8002c90:	78fb      	ldrb	r3, [r7, #3]
 8002c92:	2b07      	cmp	r3, #7
 8002c94:	d956      	bls.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
	{
		if(rx_array[2] == '*')
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3302      	adds	r3, #2
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9e:	d126      	bne.n	8002cee <UART_Interpret_Rx_Message+0x6a>
		{
			// Requests
			switch(rx_array[4])
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b6d      	cmp	r3, #109	; 0x6d
 8002ca8:	d002      	beq.n	8002cb0 <UART_Interpret_Rx_Message+0x2c>
 8002caa:	2b73      	cmp	r3, #115	; 0x73
 8002cac:	d007      	beq.n	8002cbe <UART_Interpret_Rx_Message+0x3a>
					DAC_Update_Output();
					UART_Request_Status();
					break;
				default:
					// Problems
					break;
 8002cae:	e049      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
					UART_Request_Measurement(rx_array[6]);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3306      	adds	r3, #6
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f000 f86c 	bl	8002d94 <UART_Request_Measurement>
					break;
 8002cbc:	e042      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
					if(rx_array[6] == '1') OutputState.On = true;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3306      	adds	r3, #6
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b31      	cmp	r3, #49	; 0x31
 8002cc6:	d104      	bne.n	8002cd2 <UART_Interpret_Rx_Message+0x4e>
 8002cc8:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <UART_Interpret_Rx_Message+0xc8>)
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
 8002cd0:	e008      	b.n	8002ce4 <UART_Interpret_Rx_Message+0x60>
					else if(rx_array[6] == '0') OutputState.On = false;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3306      	adds	r3, #6
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b30      	cmp	r3, #48	; 0x30
 8002cda:	d103      	bne.n	8002ce4 <UART_Interpret_Rx_Message+0x60>
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <UART_Interpret_Rx_Message+0xc8>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2194 	strb.w	r2, [r3, #404]	; 0x194
					DAC_Update_Output();
 8002ce4:	f7fe f920 	bl	8000f28 <DAC_Update_Output>
					UART_Request_Status();
 8002ce8:	f000 f9a6 	bl	8003038 <UART_Request_Status>
					break;
 8002cec:	e02a      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
			}
		}
		else if(rx_array[2] == '$'){
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	781b      	ldrb	r3, [r3, #0]
 8002cf4:	2b24      	cmp	r3, #36	; 0x24
 8002cf6:	d10a      	bne.n	8002d0e <UART_Interpret_Rx_Message+0x8a>
			// Set Measurement Mode
			UART_Set_Measurement_Mode(rx_array[4], rx_array[5]);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3304      	adds	r3, #4
 8002cfc:	781a      	ldrb	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3305      	adds	r3, #5
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4619      	mov	r1, r3
 8002d06:	4610      	mov	r0, r2
 8002d08:	f000 f9f4 	bl	80030f4 <UART_Set_Measurement_Mode>
		}else if(rx_array[2] == '#'){
			// Display on LCD
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
		}
	}
}
 8002d0c:	e01a      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
		}else if(rx_array[2] == '^'){
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3302      	adds	r3, #2
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b5e      	cmp	r3, #94	; 0x5e
 8002d16:	d105      	bne.n	8002d24 <UART_Interpret_Rx_Message+0xa0>
			UART_Set_Output_Parameter(rx_array, length);
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 fa2b 	bl	8003178 <UART_Set_Output_Parameter>
}
 8002d22:	e00f      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
		}else if(rx_array[2] == '#'){
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	3302      	adds	r3, #2
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b23      	cmp	r3, #35	; 0x23
 8002d2c:	d10a      	bne.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
			UART_Display_On_LCD(rx_array[4], rx_array[6]);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3304      	adds	r3, #4
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3306      	adds	r3, #6
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	f000 f807 	bl	8002d50 <UART_Display_On_LCD>
}
 8002d42:	e7ff      	b.n	8002d44 <UART_Interpret_Rx_Message+0xc0>
 8002d44:	bf00      	nop
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	20000834 	.word	0x20000834

08002d50 <UART_Display_On_LCD>:

void UART_Display_On_LCD(uint8_t rs, uint8_t byte)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	460a      	mov	r2, r1
 8002d5a:	71fb      	strb	r3, [r7, #7]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	71bb      	strb	r3, [r7, #6]
	if(rs == '1'){
 8002d60:	79fb      	ldrb	r3, [r7, #7]
 8002d62:	2b31      	cmp	r3, #49	; 0x31
 8002d64:	d106      	bne.n	8002d74 <UART_Display_On_LCD+0x24>
		// Set print flag; store rs and byte
		DisplayState.PrintFlag = 1;
 8002d66:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <UART_Display_On_LCD+0x40>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	715a      	strb	r2, [r3, #5]
		DisplayState.PrintByte = byte;
 8002d6c:	4a08      	ldr	r2, [pc, #32]	; (8002d90 <UART_Display_On_LCD+0x40>)
 8002d6e:	79bb      	ldrb	r3, [r7, #6]
 8002d70:	7193      	strb	r3, [r2, #6]
	}else if(rs == '0'){
		// Instruction
		LCD_Write_Instruction(byte);
		Delay_us_10(200); // 2ms
	}
}
 8002d72:	e009      	b.n	8002d88 <UART_Display_On_LCD+0x38>
	}else if(rs == '0'){
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	2b30      	cmp	r3, #48	; 0x30
 8002d78:	d106      	bne.n	8002d88 <UART_Display_On_LCD+0x38>
		LCD_Write_Instruction(byte);
 8002d7a:	79bb      	ldrb	r3, [r7, #6]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fe f997 	bl	80010b0 <LCD_Write_Instruction>
		Delay_us_10(200); // 2ms
 8002d82:	20c8      	movs	r0, #200	; 0xc8
 8002d84:	f7ff fcce 	bl	8002724 <Delay_us_10>
}
 8002d88:	bf00      	nop
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	200009d8 	.word	0x200009d8

08002d94 <UART_Request_Measurement>:

void UART_Request_Measurement(uint8_t parameter)
{
 8002d94:	b590      	push	{r4, r7, lr}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	71fb      	strb	r3, [r7, #7]
	uint8_t msg[13] = "@,m,x,xxxx,!\n";
 8002d9e:	4b9f      	ldr	r3, [pc, #636]	; (800301c <UART_Request_Measurement+0x288>)
 8002da0:	f107 0408 	add.w	r4, r7, #8
 8002da4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002da6:	c407      	stmia	r4!, {r0, r1, r2}
 8002da8:	7023      	strb	r3, [r4, #0]
	switch(parameter){
 8002daa:	79fb      	ldrb	r3, [r7, #7]
 8002dac:	3b61      	subs	r3, #97	; 0x61
 8002dae:	2b13      	cmp	r3, #19
 8002db0:	f200 8122 	bhi.w	8002ff8 <UART_Request_Measurement+0x264>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <UART_Request_Measurement+0x28>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002e0d 	.word	0x08002e0d
 8002dc0:	08002ff9 	.word	0x08002ff9
 8002dc4:	08002ff9 	.word	0x08002ff9
 8002dc8:	08002ff9 	.word	0x08002ff9
 8002dcc:	08002ff9 	.word	0x08002ff9
 8002dd0:	08002f55 	.word	0x08002f55
 8002dd4:	08002ff9 	.word	0x08002ff9
 8002dd8:	08002ff9 	.word	0x08002ff9
 8002ddc:	08002ff9 	.word	0x08002ff9
 8002de0:	08002ff9 	.word	0x08002ff9
 8002de4:	08002ff9 	.word	0x08002ff9
 8002de8:	08002ff9 	.word	0x08002ff9
 8002dec:	08002ff9 	.word	0x08002ff9
 8002df0:	08002ff9 	.word	0x08002ff9
 8002df4:	08002eb1 	.word	0x08002eb1
 8002df8:	08002ff9 	.word	0x08002ff9
 8002dfc:	08002ff9 	.word	0x08002ff9
 8002e00:	08002ff9 	.word	0x08002ff9
 8002e04:	08002ff9 	.word	0x08002ff9
 8002e08:	08002ff9 	.word	0x08002ff9
		case 't':
			// Type
			break;
		case 'a':
			// Amplitude (peak-to-peak)
			msg[4] = 'a';
 8002e0c:	2361      	movs	r3, #97	; 0x61
 8002e0e:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Amplitude/1000) % 10) + 48;
 8002e10:	4b83      	ldr	r3, [pc, #524]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002e12:	885b      	ldrh	r3, [r3, #2]
 8002e14:	4a83      	ldr	r2, [pc, #524]	; (8003024 <UART_Request_Measurement+0x290>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	099b      	lsrs	r3, r3, #6
 8002e1c:	b29a      	uxth	r2, r3
 8002e1e:	4b82      	ldr	r3, [pc, #520]	; (8003028 <UART_Request_Measurement+0x294>)
 8002e20:	fba3 1302 	umull	r1, r3, r3, r2
 8002e24:	08d9      	lsrs	r1, r3, #3
 8002e26:	460b      	mov	r3, r1
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	005b      	lsls	r3, r3, #1
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	b29b      	uxth	r3, r3
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	3330      	adds	r3, #48	; 0x30
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Amplitude/100) % 10) + 48;
 8002e3a:	4b79      	ldr	r3, [pc, #484]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002e3c:	885b      	ldrh	r3, [r3, #2]
 8002e3e:	4a7b      	ldr	r2, [pc, #492]	; (800302c <UART_Request_Measurement+0x298>)
 8002e40:	fba2 2303 	umull	r2, r3, r2, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	4b77      	ldr	r3, [pc, #476]	; (8003028 <UART_Request_Measurement+0x294>)
 8002e4a:	fba3 1302 	umull	r1, r3, r3, r2
 8002e4e:	08d9      	lsrs	r1, r3, #3
 8002e50:	460b      	mov	r3, r1
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	440b      	add	r3, r1
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	3330      	adds	r3, #48	; 0x30
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Amplitude/10) % 10) + 48;
 8002e64:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002e66:	885b      	ldrh	r3, [r3, #2]
 8002e68:	4a6f      	ldr	r2, [pc, #444]	; (8003028 <UART_Request_Measurement+0x294>)
 8002e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e6e:	08db      	lsrs	r3, r3, #3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	4b6d      	ldr	r3, [pc, #436]	; (8003028 <UART_Request_Measurement+0x294>)
 8002e74:	fba3 1302 	umull	r1, r3, r3, r2
 8002e78:	08d9      	lsrs	r1, r3, #3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	440b      	add	r3, r1
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	3330      	adds	r3, #48	; 0x30
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Amplitude % 10) + 48;
 8002e8e:	4b64      	ldr	r3, [pc, #400]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002e90:	885a      	ldrh	r2, [r3, #2]
 8002e92:	4b65      	ldr	r3, [pc, #404]	; (8003028 <UART_Request_Measurement+0x294>)
 8002e94:	fba3 1302 	umull	r1, r3, r3, r2
 8002e98:	08d9      	lsrs	r1, r3, #3
 8002e9a:	460b      	mov	r3, r1
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	3330      	adds	r3, #48	; 0x30
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	747b      	strb	r3, [r7, #17]
			break;
 8002eae:	e0a4      	b.n	8002ffa <UART_Request_Measurement+0x266>
		case 'o':
			// Offset
			msg[4] = 'o';
 8002eb0:	236f      	movs	r3, #111	; 0x6f
 8002eb2:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Offset/1000) % 10) + 48;
 8002eb4:	4b5a      	ldr	r3, [pc, #360]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002eb6:	891b      	ldrh	r3, [r3, #8]
 8002eb8:	4a5a      	ldr	r2, [pc, #360]	; (8003024 <UART_Request_Measurement+0x290>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	099b      	lsrs	r3, r3, #6
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	4b59      	ldr	r3, [pc, #356]	; (8003028 <UART_Request_Measurement+0x294>)
 8002ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8002ec8:	08d9      	lsrs	r1, r3, #3
 8002eca:	460b      	mov	r3, r1
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	3330      	adds	r3, #48	; 0x30
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Offset/100) % 10) + 48;
 8002ede:	4b50      	ldr	r3, [pc, #320]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002ee0:	891b      	ldrh	r3, [r3, #8]
 8002ee2:	4a52      	ldr	r2, [pc, #328]	; (800302c <UART_Request_Measurement+0x298>)
 8002ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ee8:	095b      	lsrs	r3, r3, #5
 8002eea:	b29a      	uxth	r2, r3
 8002eec:	4b4e      	ldr	r3, [pc, #312]	; (8003028 <UART_Request_Measurement+0x294>)
 8002eee:	fba3 1302 	umull	r1, r3, r3, r2
 8002ef2:	08d9      	lsrs	r1, r3, #3
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	440b      	add	r3, r1
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3330      	adds	r3, #48	; 0x30
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Offset/10) % 10) + 48;
 8002f08:	4b45      	ldr	r3, [pc, #276]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002f0a:	891b      	ldrh	r3, [r3, #8]
 8002f0c:	4a46      	ldr	r2, [pc, #280]	; (8003028 <UART_Request_Measurement+0x294>)
 8002f0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f12:	08db      	lsrs	r3, r3, #3
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	4b44      	ldr	r3, [pc, #272]	; (8003028 <UART_Request_Measurement+0x294>)
 8002f18:	fba3 1302 	umull	r1, r3, r3, r2
 8002f1c:	08d9      	lsrs	r1, r3, #3
 8002f1e:	460b      	mov	r3, r1
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	440b      	add	r3, r1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	3330      	adds	r3, #48	; 0x30
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Offset % 10) + 48;
 8002f32:	4b3b      	ldr	r3, [pc, #236]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002f34:	891a      	ldrh	r2, [r3, #8]
 8002f36:	4b3c      	ldr	r3, [pc, #240]	; (8003028 <UART_Request_Measurement+0x294>)
 8002f38:	fba3 1302 	umull	r1, r3, r3, r2
 8002f3c:	08d9      	lsrs	r1, r3, #3
 8002f3e:	460b      	mov	r3, r1
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	b29b      	uxth	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	3330      	adds	r3, #48	; 0x30
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	747b      	strb	r3, [r7, #17]
			break;
 8002f52:	e052      	b.n	8002ffa <UART_Request_Measurement+0x266>
		case 'f':
			// Frequency
			msg[4] = 'f';
 8002f54:	2366      	movs	r3, #102	; 0x66
 8002f56:	733b      	strb	r3, [r7, #12]
			msg[6] = ((MeasurementState.Frequency/1000) % 10) + 48;
 8002f58:	4b31      	ldr	r3, [pc, #196]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002f5a:	889b      	ldrh	r3, [r3, #4]
 8002f5c:	4a31      	ldr	r2, [pc, #196]	; (8003024 <UART_Request_Measurement+0x290>)
 8002f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f62:	099b      	lsrs	r3, r3, #6
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	4b30      	ldr	r3, [pc, #192]	; (8003028 <UART_Request_Measurement+0x294>)
 8002f68:	fba3 1302 	umull	r1, r3, r3, r2
 8002f6c:	08d9      	lsrs	r1, r3, #3
 8002f6e:	460b      	mov	r3, r1
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	005b      	lsls	r3, r3, #1
 8002f76:	1ad3      	subs	r3, r2, r3
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	3330      	adds	r3, #48	; 0x30
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	73bb      	strb	r3, [r7, #14]
			msg[7] = ((MeasurementState.Frequency/100) % 10) + 48;
 8002f82:	4b27      	ldr	r3, [pc, #156]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	4a29      	ldr	r2, [pc, #164]	; (800302c <UART_Request_Measurement+0x298>)
 8002f88:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8c:	095b      	lsrs	r3, r3, #5
 8002f8e:	b29a      	uxth	r2, r3
 8002f90:	4b25      	ldr	r3, [pc, #148]	; (8003028 <UART_Request_Measurement+0x294>)
 8002f92:	fba3 1302 	umull	r1, r3, r3, r2
 8002f96:	08d9      	lsrs	r1, r3, #3
 8002f98:	460b      	mov	r3, r1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	005b      	lsls	r3, r3, #1
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	3330      	adds	r3, #48	; 0x30
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	73fb      	strb	r3, [r7, #15]
			msg[8] = ((MeasurementState.Frequency/10) % 10) + 48;
 8002fac:	4b1c      	ldr	r3, [pc, #112]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002fae:	889b      	ldrh	r3, [r3, #4]
 8002fb0:	4a1d      	ldr	r2, [pc, #116]	; (8003028 <UART_Request_Measurement+0x294>)
 8002fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb6:	08db      	lsrs	r3, r3, #3
 8002fb8:	b29a      	uxth	r2, r3
 8002fba:	4b1b      	ldr	r3, [pc, #108]	; (8003028 <UART_Request_Measurement+0x294>)
 8002fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fc0:	08d9      	lsrs	r1, r3, #3
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	b29b      	uxth	r3, r3
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3330      	adds	r3, #48	; 0x30
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	743b      	strb	r3, [r7, #16]
			msg[9] = (MeasurementState.Frequency % 10) + 48;
 8002fd6:	4b12      	ldr	r3, [pc, #72]	; (8003020 <UART_Request_Measurement+0x28c>)
 8002fd8:	889a      	ldrh	r2, [r3, #4]
 8002fda:	4b13      	ldr	r3, [pc, #76]	; (8003028 <UART_Request_Measurement+0x294>)
 8002fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe0:	08d9      	lsrs	r1, r3, #3
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	440b      	add	r3, r1
 8002fe8:	005b      	lsls	r3, r3, #1
 8002fea:	1ad3      	subs	r3, r2, r3
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3330      	adds	r3, #48	; 0x30
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	747b      	strb	r3, [r7, #17]
			break;
 8002ff6:	e000      	b.n	8002ffa <UART_Request_Measurement+0x266>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 8002ff8:	bf00      	nop
	}
	HAL_UART_Transmit(&huart2, msg, 13, 10);
 8002ffa:	f107 0108 	add.w	r1, r7, #8
 8002ffe:	230a      	movs	r3, #10
 8003000:	220d      	movs	r2, #13
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <UART_Request_Measurement+0x29c>)
 8003004:	f004 fbca 	bl	800779c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 8003008:	2201      	movs	r2, #1
 800300a:	490a      	ldr	r1, [pc, #40]	; (8003034 <UART_Request_Measurement+0x2a0>)
 800300c:	4808      	ldr	r0, [pc, #32]	; (8003030 <UART_Request_Measurement+0x29c>)
 800300e:	f004 fc59 	bl	80078c4 <HAL_UART_Receive_IT>
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd90      	pop	{r4, r7, pc}
 800301a:	bf00      	nop
 800301c:	08009cd4 	.word	0x08009cd4
 8003020:	20000828 	.word	0x20000828
 8003024:	10624dd3 	.word	0x10624dd3
 8003028:	cccccccd 	.word	0xcccccccd
 800302c:	51eb851f 	.word	0x51eb851f
 8003030:	20000b70 	.word	0x20000b70
 8003034:	20000c44 	.word	0x20000c44

08003038 <UART_Request_Status>:

void UART_Request_Status()
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
	uint8_t msg[11] = "@,xx,x,x,!\n";
 800303e:	4a28      	ldr	r2, [pc, #160]	; (80030e0 <UART_Request_Status+0xa8>)
 8003040:	1d3b      	adds	r3, r7, #4
 8003042:	ca07      	ldmia	r2, {r0, r1, r2}
 8003044:	c303      	stmia	r3!, {r0, r1}
 8003046:	801a      	strh	r2, [r3, #0]
 8003048:	3302      	adds	r3, #2
 800304a:	0c12      	lsrs	r2, r2, #16
 800304c:	701a      	strb	r2, [r3, #0]
	switch(MeasurementState.Mode){
 800304e:	4b25      	ldr	r3, [pc, #148]	; (80030e4 <UART_Request_Status+0xac>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b04      	cmp	r3, #4
 8003054:	d825      	bhi.n	80030a2 <UART_Request_Status+0x6a>
 8003056:	a201      	add	r2, pc, #4	; (adr r2, 800305c <UART_Request_Status+0x24>)
 8003058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305c:	08003071 	.word	0x08003071
 8003060:	08003085 	.word	0x08003085
 8003064:	0800307b 	.word	0x0800307b
 8003068:	0800308f 	.word	0x0800308f
 800306c:	08003099 	.word	0x08003099
		case DV:
			// DV
			msg[2] = 'D';
 8003070:	2344      	movs	r3, #68	; 0x44
 8003072:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 8003074:	2356      	movs	r3, #86	; 0x56
 8003076:	71fb      	strb	r3, [r7, #7]
			break;
 8003078:	e014      	b.n	80030a4 <UART_Request_Status+0x6c>
		case AV:
			// AV
			msg[2] = 'A';
 800307a:	2341      	movs	r3, #65	; 0x41
 800307c:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'V';
 800307e:	2356      	movs	r3, #86	; 0x56
 8003080:	71fb      	strb	r3, [r7, #7]
			break;
 8003082:	e00f      	b.n	80030a4 <UART_Request_Status+0x6c>
		case DI:
			// DI
			msg[2] = 'D';
 8003084:	2344      	movs	r3, #68	; 0x44
 8003086:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8003088:	2349      	movs	r3, #73	; 0x49
 800308a:	71fb      	strb	r3, [r7, #7]
			break;
 800308c:	e00a      	b.n	80030a4 <UART_Request_Status+0x6c>
		case AI:
			// AI
			msg[2] = 'A';
 800308e:	2341      	movs	r3, #65	; 0x41
 8003090:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'I';
 8003092:	2349      	movs	r3, #73	; 0x49
 8003094:	71fb      	strb	r3, [r7, #7]
			break;
 8003096:	e005      	b.n	80030a4 <UART_Request_Status+0x6c>
		case TC:
			// TC
			msg[2] = 'T';
 8003098:	2354      	movs	r3, #84	; 0x54
 800309a:	71bb      	strb	r3, [r7, #6]
			msg[3] = 'C';
 800309c:	2343      	movs	r3, #67	; 0x43
 800309e:	71fb      	strb	r3, [r7, #7]
			break;
 80030a0:	e000      	b.n	80030a4 <UART_Request_Status+0x6c>
		default:
			// Problems
			break;
 80030a2:	bf00      	nop
	}
	msg[5] = OutputState.Mode;
 80030a4:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <UART_Request_Status+0xb0>)
 80030a6:	f893 3195 	ldrb.w	r3, [r3, #405]	; 0x195
 80030aa:	727b      	strb	r3, [r7, #9]
	if(OutputState.On){
 80030ac:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <UART_Request_Status+0xb0>)
 80030ae:	f893 3194 	ldrb.w	r3, [r3, #404]	; 0x194
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d002      	beq.n	80030bc <UART_Request_Status+0x84>
		msg[7] = '1';
 80030b6:	2331      	movs	r3, #49	; 0x31
 80030b8:	72fb      	strb	r3, [r7, #11]
 80030ba:	e001      	b.n	80030c0 <UART_Request_Status+0x88>
	} else {
		msg[7] = '0';
 80030bc:	2330      	movs	r3, #48	; 0x30
 80030be:	72fb      	strb	r3, [r7, #11]
	}
	HAL_UART_Transmit(&huart2, msg, 11, 10);
 80030c0:	1d39      	adds	r1, r7, #4
 80030c2:	230a      	movs	r3, #10
 80030c4:	220b      	movs	r2, #11
 80030c6:	4809      	ldr	r0, [pc, #36]	; (80030ec <UART_Request_Status+0xb4>)
 80030c8:	f004 fb68 	bl	800779c <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, rx_byte, 1);
 80030cc:	2201      	movs	r2, #1
 80030ce:	4908      	ldr	r1, [pc, #32]	; (80030f0 <UART_Request_Status+0xb8>)
 80030d0:	4806      	ldr	r0, [pc, #24]	; (80030ec <UART_Request_Status+0xb4>)
 80030d2:	f004 fbf7 	bl	80078c4 <HAL_UART_Receive_IT>

}
 80030d6:	bf00      	nop
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	08009ce4 	.word	0x08009ce4
 80030e4:	20000828 	.word	0x20000828
 80030e8:	20000834 	.word	0x20000834
 80030ec:	20000b70 	.word	0x20000b70
 80030f0:	20000c44 	.word	0x20000c44

080030f4 <UART_Set_Measurement_Mode>:

void UART_Set_Measurement_Mode(uint8_t key1, uint8_t key2){
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b082      	sub	sp, #8
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	4603      	mov	r3, r0
 80030fc:	460a      	mov	r2, r1
 80030fe:	71fb      	strb	r3, [r7, #7]
 8003100:	4613      	mov	r3, r2
 8003102:	71bb      	strb	r3, [r7, #6]
	if(key1 == 'D' && key2 == 'V'){
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	2b44      	cmp	r3, #68	; 0x44
 8003108:	d106      	bne.n	8003118 <UART_Set_Measurement_Mode+0x24>
 800310a:	79bb      	ldrb	r3, [r7, #6]
 800310c:	2b56      	cmp	r3, #86	; 0x56
 800310e:	d103      	bne.n	8003118 <UART_Set_Measurement_Mode+0x24>
		// DC Voltage
		MeasurementState.Mode = DV;
 8003110:	4b18      	ldr	r3, [pc, #96]	; (8003174 <UART_Set_Measurement_Mode+0x80>)
 8003112:	2200      	movs	r2, #0
 8003114:	701a      	strb	r2, [r3, #0]
 8003116:	e026      	b.n	8003166 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'V'){
 8003118:	79fb      	ldrb	r3, [r7, #7]
 800311a:	2b41      	cmp	r3, #65	; 0x41
 800311c:	d106      	bne.n	800312c <UART_Set_Measurement_Mode+0x38>
 800311e:	79bb      	ldrb	r3, [r7, #6]
 8003120:	2b56      	cmp	r3, #86	; 0x56
 8003122:	d103      	bne.n	800312c <UART_Set_Measurement_Mode+0x38>
		// AC Voltage
		MeasurementState.Mode = AV;
 8003124:	4b13      	ldr	r3, [pc, #76]	; (8003174 <UART_Set_Measurement_Mode+0x80>)
 8003126:	2202      	movs	r2, #2
 8003128:	701a      	strb	r2, [r3, #0]
 800312a:	e01c      	b.n	8003166 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'D' && key2 == 'I'){
 800312c:	79fb      	ldrb	r3, [r7, #7]
 800312e:	2b44      	cmp	r3, #68	; 0x44
 8003130:	d106      	bne.n	8003140 <UART_Set_Measurement_Mode+0x4c>
 8003132:	79bb      	ldrb	r3, [r7, #6]
 8003134:	2b49      	cmp	r3, #73	; 0x49
 8003136:	d103      	bne.n	8003140 <UART_Set_Measurement_Mode+0x4c>
		// DC Current
		MeasurementState.Mode = DI;
 8003138:	4b0e      	ldr	r3, [pc, #56]	; (8003174 <UART_Set_Measurement_Mode+0x80>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
 800313e:	e012      	b.n	8003166 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'A' && key2 == 'I'){
 8003140:	79fb      	ldrb	r3, [r7, #7]
 8003142:	2b41      	cmp	r3, #65	; 0x41
 8003144:	d106      	bne.n	8003154 <UART_Set_Measurement_Mode+0x60>
 8003146:	79bb      	ldrb	r3, [r7, #6]
 8003148:	2b49      	cmp	r3, #73	; 0x49
 800314a:	d103      	bne.n	8003154 <UART_Set_Measurement_Mode+0x60>
		// AC Current
		MeasurementState.Mode = AI;
 800314c:	4b09      	ldr	r3, [pc, #36]	; (8003174 <UART_Set_Measurement_Mode+0x80>)
 800314e:	2203      	movs	r2, #3
 8003150:	701a      	strb	r2, [r3, #0]
 8003152:	e008      	b.n	8003166 <UART_Set_Measurement_Mode+0x72>
	} else if (key1 == 'T' && key2 == 'C'){
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	2b54      	cmp	r3, #84	; 0x54
 8003158:	d105      	bne.n	8003166 <UART_Set_Measurement_Mode+0x72>
 800315a:	79bb      	ldrb	r3, [r7, #6]
 800315c:	2b43      	cmp	r3, #67	; 0x43
 800315e:	d102      	bne.n	8003166 <UART_Set_Measurement_Mode+0x72>
		// Temperature
		MeasurementState.Mode = TC;
 8003160:	4b04      	ldr	r3, [pc, #16]	; (8003174 <UART_Set_Measurement_Mode+0x80>)
 8003162:	2204      	movs	r2, #4
 8003164:	701a      	strb	r2, [r3, #0]
	}
//	DisplayState.DisplayMeasurementsFlag = true;
	LCD_changeDisplayMode(Measurement);
 8003166:	2001      	movs	r0, #1
 8003168:	f7fe f96c 	bl	8001444 <LCD_changeDisplayMode>
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	20000828 	.word	0x20000828

08003178 <UART_Set_Output_Parameter>:

void UART_Set_Output_Parameter(uint8_t *rx_array, uint8_t length)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	70fb      	strb	r3, [r7, #3]
	uint8_t param = rx_array[4];
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	791b      	ldrb	r3, [r3, #4]
 8003188:	72fb      	strb	r3, [r7, #11]
	uint8_t val0 = rx_array[6];
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	799b      	ldrb	r3, [r3, #6]
 800318e:	73fb      	strb	r3, [r7, #15]
	uint16_t received_value = 0;
 8003190:	2300      	movs	r3, #0
 8003192:	81bb      	strh	r3, [r7, #12]
	if(rx_array[7] != ','){
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3307      	adds	r3, #7
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b2c      	cmp	r3, #44	; 0x2c
 800319c:	d03d      	beq.n	800321a <UART_Set_Output_Parameter+0xa2>
		val0 = rx_array[6] - 48;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	3306      	adds	r3, #6
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	3b30      	subs	r3, #48	; 0x30
 80031a6:	73fb      	strb	r3, [r7, #15]
		uint8_t val1 = rx_array[7] - 48;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3307      	adds	r3, #7
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3b30      	subs	r3, #48	; 0x30
 80031b0:	72bb      	strb	r3, [r7, #10]
		uint8_t val2 = rx_array[8] - 48;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	3308      	adds	r3, #8
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	3b30      	subs	r3, #48	; 0x30
 80031ba:	727b      	strb	r3, [r7, #9]
		uint8_t val3 = rx_array[9] - 48;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	3309      	adds	r3, #9
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	3b30      	subs	r3, #48	; 0x30
 80031c4:	723b      	strb	r3, [r7, #8]
		received_value += val0*1000;
 80031c6:	7bfb      	ldrb	r3, [r7, #15]
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	0152      	lsls	r2, r2, #5
 80031ce:	1ad2      	subs	r2, r2, r3
 80031d0:	0092      	lsls	r2, r2, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	b29a      	uxth	r2, r3
 80031d8:	89bb      	ldrh	r3, [r7, #12]
 80031da:	4413      	add	r3, r2
 80031dc:	81bb      	strh	r3, [r7, #12]
		received_value += val1*100;
 80031de:	7abb      	ldrb	r3, [r7, #10]
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	0092      	lsls	r2, r2, #2
 80031e6:	4413      	add	r3, r2
 80031e8:	461a      	mov	r2, r3
 80031ea:	0091      	lsls	r1, r2, #2
 80031ec:	461a      	mov	r2, r3
 80031ee:	460b      	mov	r3, r1
 80031f0:	4413      	add	r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	89bb      	ldrh	r3, [r7, #12]
 80031f8:	4413      	add	r3, r2
 80031fa:	81bb      	strh	r3, [r7, #12]
		received_value += val2*10;
 80031fc:	7a7b      	ldrb	r3, [r7, #9]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	461a      	mov	r2, r3
 8003202:	0092      	lsls	r2, r2, #2
 8003204:	4413      	add	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	b29a      	uxth	r2, r3
 800320a:	89bb      	ldrh	r3, [r7, #12]
 800320c:	4413      	add	r3, r2
 800320e:	81bb      	strh	r3, [r7, #12]
		received_value += val3;
 8003210:	7a3b      	ldrb	r3, [r7, #8]
 8003212:	b29a      	uxth	r2, r3
 8003214:	89bb      	ldrh	r3, [r7, #12]
 8003216:	4413      	add	r3, r2
 8003218:	81bb      	strh	r3, [r7, #12]
	}
	switch(param){
 800321a:	7afb      	ldrb	r3, [r7, #11]
 800321c:	3b61      	subs	r3, #97	; 0x61
 800321e:	2b13      	cmp	r3, #19
 8003220:	d83e      	bhi.n	80032a0 <UART_Set_Output_Parameter+0x128>
 8003222:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <UART_Set_Output_Parameter+0xb0>)
 8003224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003228:	08003283 	.word	0x08003283
 800322c:	080032a1 	.word	0x080032a1
 8003230:	080032a1 	.word	0x080032a1
 8003234:	080032a1 	.word	0x080032a1
 8003238:	080032a1 	.word	0x080032a1
 800323c:	08003297 	.word	0x08003297
 8003240:	080032a1 	.word	0x080032a1
 8003244:	080032a1 	.word	0x080032a1
 8003248:	080032a1 	.word	0x080032a1
 800324c:	080032a1 	.word	0x080032a1
 8003250:	080032a1 	.word	0x080032a1
 8003254:	080032a1 	.word	0x080032a1
 8003258:	080032a1 	.word	0x080032a1
 800325c:	080032a1 	.word	0x080032a1
 8003260:	0800328d 	.word	0x0800328d
 8003264:	080032a1 	.word	0x080032a1
 8003268:	080032a1 	.word	0x080032a1
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080032a1 	.word	0x080032a1
 8003274:	08003279 	.word	0x08003279
		case 't':
			// Type
			OutputState.Mode = val0;
 8003278:	4a0e      	ldr	r2, [pc, #56]	; (80032b4 <UART_Set_Output_Parameter+0x13c>)
 800327a:	7bfb      	ldrb	r3, [r7, #15]
 800327c:	f882 3195 	strb.w	r3, [r2, #405]	; 0x195
			break;
 8003280:	e00f      	b.n	80032a2 <UART_Set_Output_Parameter+0x12a>
		case 'a':
			// Amplitude
			OutputState.Amplitude = received_value;
 8003282:	4a0c      	ldr	r2, [pc, #48]	; (80032b4 <UART_Set_Output_Parameter+0x13c>)
 8003284:	89bb      	ldrh	r3, [r7, #12]
 8003286:	f8a2 3196 	strh.w	r3, [r2, #406]	; 0x196
			break;
 800328a:	e00a      	b.n	80032a2 <UART_Set_Output_Parameter+0x12a>
		case 'o':
			// Offset
			OutputState.Offset = received_value;
 800328c:	4a09      	ldr	r2, [pc, #36]	; (80032b4 <UART_Set_Output_Parameter+0x13c>)
 800328e:	89bb      	ldrh	r3, [r7, #12]
 8003290:	f8a2 319c 	strh.w	r3, [r2, #412]	; 0x19c
			break;
 8003294:	e005      	b.n	80032a2 <UART_Set_Output_Parameter+0x12a>
		case 'f':
			// Frequency
			OutputState.Frequency = received_value;
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <UART_Set_Output_Parameter+0x13c>)
 8003298:	89bb      	ldrh	r3, [r7, #12]
 800329a:	f8a2 3198 	strh.w	r3, [r2, #408]	; 0x198
			break;
 800329e:	e000      	b.n	80032a2 <UART_Set_Output_Parameter+0x12a>
		case 'c':
			// Temperature
			break;
		default:
			// Problems
			break;
 80032a0:	bf00      	nop
	}
	LCD_changeDisplayMode(Measurement);
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fe f8ce 	bl	8001444 <LCD_changeDisplayMode>
	DAC_Update_Output();
 80032a8:	f7fd fe3e 	bl	8000f28 <DAC_Update_Output>
}
 80032ac:	bf00      	nop
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	20000834 	.word	0x20000834

080032b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032f0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032bc:	480d      	ldr	r0, [pc, #52]	; (80032f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80032be:	490e      	ldr	r1, [pc, #56]	; (80032f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80032c0:	4a0e      	ldr	r2, [pc, #56]	; (80032fc <LoopForever+0xe>)
  movs r3, #0
 80032c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032c4:	e002      	b.n	80032cc <LoopCopyDataInit>

080032c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ca:	3304      	adds	r3, #4

080032cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032d0:	d3f9      	bcc.n	80032c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032d2:	4a0b      	ldr	r2, [pc, #44]	; (8003300 <LoopForever+0x12>)
  ldr r4, =_ebss
 80032d4:	4c0b      	ldr	r4, [pc, #44]	; (8003304 <LoopForever+0x16>)
  movs r3, #0
 80032d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032d8:	e001      	b.n	80032de <LoopFillZerobss>

080032da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032dc:	3204      	adds	r2, #4

080032de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032e0:	d3fb      	bcc.n	80032da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80032e2:	f7ff fc61 	bl	8002ba8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032e6:	f005 fc75 	bl	8008bd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80032ea:	f7fe fd0b 	bl	8001d04 <main>

080032ee <LoopForever>:

LoopForever:
    b LoopForever
 80032ee:	e7fe      	b.n	80032ee <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80032f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80032f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032f8:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 80032fc:	08009f08 	.word	0x08009f08
  ldr r2, =_sbss
 8003300:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8003304:	20000c4c 	.word	0x20000c4c

08003308 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003308:	e7fe      	b.n	8003308 <ADC1_2_IRQHandler>
	...

0800330c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003310:	4b08      	ldr	r3, [pc, #32]	; (8003334 <HAL_Init+0x28>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <HAL_Init+0x28>)
 8003316:	f043 0310 	orr.w	r3, r3, #16
 800331a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800331c:	2003      	movs	r0, #3
 800331e:	f001 faff 	bl	8004920 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003322:	2000      	movs	r0, #0
 8003324:	f000 f808 	bl	8003338 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003328:	f7ff fa22 	bl	8002770 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40022000 	.word	0x40022000

08003338 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003340:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_InitTick+0x54>)
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	4619      	mov	r1, r3
 800334a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800334e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003352:	fbb2 f3f3 	udiv	r3, r2, r3
 8003356:	4618      	mov	r0, r3
 8003358:	f001 fb17 	bl	800498a <HAL_SYSTICK_Config>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d001      	beq.n	8003366 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e00e      	b.n	8003384 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d80a      	bhi.n	8003382 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800336c:	2200      	movs	r2, #0
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	f04f 30ff 	mov.w	r0, #4294967295
 8003374:	f001 fadf 	bl	8004936 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003378:	4a06      	ldr	r2, [pc, #24]	; (8003394 <HAL_InitTick+0x5c>)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800337e:	2300      	movs	r3, #0
 8003380:	e000      	b.n	8003384 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
}
 8003384:	4618      	mov	r0, r3
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	20000010 	.word	0x20000010
 8003390:	20000018 	.word	0x20000018
 8003394:	20000014 	.word	0x20000014

08003398 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800339c:	4b06      	ldr	r3, [pc, #24]	; (80033b8 <HAL_IncTick+0x20>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x24>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4413      	add	r3, r2
 80033a8:	4a04      	ldr	r2, [pc, #16]	; (80033bc <HAL_IncTick+0x24>)
 80033aa:	6013      	str	r3, [r2, #0]
}
 80033ac:	bf00      	nop
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	20000018 	.word	0x20000018
 80033bc:	20000c48 	.word	0x20000c48

080033c0 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c0:	b480      	push	{r7}
 80033c2:	af00      	add	r7, sp, #0
  return uwTick;  
 80033c4:	4b03      	ldr	r3, [pc, #12]	; (80033d4 <HAL_GetTick+0x14>)
 80033c6:	681b      	ldr	r3, [r3, #0]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr
 80033d2:	bf00      	nop
 80033d4:	20000c48 	.word	0x20000c48

080033d8 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b084      	sub	sp, #16
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033e0:	f7ff ffee 	bl	80033c0 <HAL_GetTick>
 80033e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d005      	beq.n	80033fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033f2:	4b09      	ldr	r3, [pc, #36]	; (8003418 <HAL_Delay+0x40>)
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4413      	add	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80033fe:	bf00      	nop
 8003400:	f7ff ffde 	bl	80033c0 <HAL_GetTick>
 8003404:	4602      	mov	r2, r0
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	1ad3      	subs	r3, r2, r3
 800340a:	68fa      	ldr	r2, [r7, #12]
 800340c:	429a      	cmp	r2, r3
 800340e:	d8f7      	bhi.n	8003400 <HAL_Delay+0x28>
  {
  }
}
 8003410:	bf00      	nop
 8003412:	3710      	adds	r7, #16
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	20000018 	.word	0x20000018

0800341c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b09a      	sub	sp, #104	; 0x68
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003424:	2300      	movs	r3, #0
 8003426:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800342a:	2300      	movs	r3, #0
 800342c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e1e3      	b.n	8003804 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 0310 	and.w	r3, r3, #16
 800344a:	2b00      	cmp	r3, #0
 800344c:	d176      	bne.n	800353c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	2b00      	cmp	r3, #0
 8003454:	d152      	bne.n	80034fc <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	f7ff f9a1 	bl	80027b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d13b      	bne.n	80034fc <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f001 f861 	bl	800454c <ADC_Disable>
 800348a:	4603      	mov	r3, r0
 800348c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d12f      	bne.n	80034fc <HAL_ADC_Init+0xe0>
 800349c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d12b      	bne.n	80034fc <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80034ac:	f023 0302 	bic.w	r3, r3, #2
 80034b0:	f043 0202 	orr.w	r2, r3, #2
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034c6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	689a      	ldr	r2, [r3, #8]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034d6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80034d8:	4b92      	ldr	r3, [pc, #584]	; (8003724 <HAL_ADC_Init+0x308>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a92      	ldr	r2, [pc, #584]	; (8003728 <HAL_ADC_Init+0x30c>)
 80034de:	fba2 2303 	umull	r2, r3, r2, r3
 80034e2:	0c9a      	lsrs	r2, r3, #18
 80034e4:	4613      	mov	r3, r2
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d007      	beq.n	800351a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	689b      	ldr	r3, [r3, #8]
 8003510:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8003514:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003518:	d110      	bne.n	800353c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f023 0312 	bic.w	r3, r3, #18
 8003522:	f043 0210 	orr.w	r2, r3, #16
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f040 8150 	bne.w	80037ea <HAL_ADC_Init+0x3ce>
 800354a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800354e:	2b00      	cmp	r3, #0
 8003550:	f040 814b 	bne.w	80037ea <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800355e:	2b00      	cmp	r3, #0
 8003560:	f040 8143 	bne.w	80037ea <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003568:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800356c:	f043 0202 	orr.w	r2, r3, #2
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800357c:	d004      	beq.n	8003588 <HAL_ADC_Init+0x16c>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6a      	ldr	r2, [pc, #424]	; (800372c <HAL_ADC_Init+0x310>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d101      	bne.n	800358c <HAL_ADC_Init+0x170>
 8003588:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_ADC_Init+0x314>)
 800358a:	e000      	b.n	800358e <HAL_ADC_Init+0x172>
 800358c:	4b69      	ldr	r3, [pc, #420]	; (8003734 <HAL_ADC_Init+0x318>)
 800358e:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003598:	d102      	bne.n	80035a0 <HAL_ADC_Init+0x184>
 800359a:	4b64      	ldr	r3, [pc, #400]	; (800372c <HAL_ADC_Init+0x310>)
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	e01a      	b.n	80035d6 <HAL_ADC_Init+0x1ba>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a61      	ldr	r2, [pc, #388]	; (800372c <HAL_ADC_Init+0x310>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d103      	bne.n	80035b2 <HAL_ADC_Init+0x196>
 80035aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	e011      	b.n	80035d6 <HAL_ADC_Init+0x1ba>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a60      	ldr	r2, [pc, #384]	; (8003738 <HAL_ADC_Init+0x31c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d102      	bne.n	80035c2 <HAL_ADC_Init+0x1a6>
 80035bc:	4b5f      	ldr	r3, [pc, #380]	; (800373c <HAL_ADC_Init+0x320>)
 80035be:	60fb      	str	r3, [r7, #12]
 80035c0:	e009      	b.n	80035d6 <HAL_ADC_Init+0x1ba>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a5d      	ldr	r2, [pc, #372]	; (800373c <HAL_ADC_Init+0x320>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d102      	bne.n	80035d2 <HAL_ADC_Init+0x1b6>
 80035cc:	4b5a      	ldr	r3, [pc, #360]	; (8003738 <HAL_ADC_Init+0x31c>)
 80035ce:	60fb      	str	r3, [r7, #12]
 80035d0:	e001      	b.n	80035d6 <HAL_ADC_Init+0x1ba>
 80035d2:	2300      	movs	r3, #0
 80035d4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0303 	and.w	r3, r3, #3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d108      	bne.n	80035f6 <HAL_ADC_Init+0x1da>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0301 	and.w	r3, r3, #1
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_ADC_Init+0x1da>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <HAL_ADC_Init+0x1dc>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d11c      	bne.n	8003636 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80035fc:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d010      	beq.n	8003624 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	2b01      	cmp	r3, #1
 800360c:	d107      	bne.n	800361e <HAL_ADC_Init+0x202>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0301 	and.w	r3, r3, #1
 8003616:	2b01      	cmp	r3, #1
 8003618:	d101      	bne.n	800361e <HAL_ADC_Init+0x202>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_ADC_Init+0x204>
 800361e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8003620:	2b00      	cmp	r3, #0
 8003622:	d108      	bne.n	8003636 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8003624:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	431a      	orrs	r2, r3
 8003632:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003634:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	7e5b      	ldrb	r3, [r3, #25]
 800363a:	035b      	lsls	r3, r3, #13
 800363c:	687a      	ldr	r2, [r7, #4]
 800363e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003640:	2a01      	cmp	r2, #1
 8003642:	d002      	beq.n	800364a <HAL_ADC_Init+0x22e>
 8003644:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003648:	e000      	b.n	800364c <HAL_ADC_Init+0x230>
 800364a:	2200      	movs	r2, #0
 800364c:	431a      	orrs	r2, r3
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	4313      	orrs	r3, r2
 800365a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800365c:	4313      	orrs	r3, r2
 800365e:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d11b      	bne.n	80036a2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	7e5b      	ldrb	r3, [r3, #25]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d109      	bne.n	8003686 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003676:	3b01      	subs	r3, #1
 8003678:	045a      	lsls	r2, r3, #17
 800367a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800367c:	4313      	orrs	r3, r2
 800367e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003682:	663b      	str	r3, [r7, #96]	; 0x60
 8003684:	e00d      	b.n	80036a2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0201 	orr.w	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d054      	beq.n	8003754 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a22      	ldr	r2, [pc, #136]	; (8003738 <HAL_ADC_Init+0x31c>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d004      	beq.n	80036be <HAL_ADC_Init+0x2a2>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a20      	ldr	r2, [pc, #128]	; (800373c <HAL_ADC_Init+0x320>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d140      	bne.n	8003740 <HAL_ADC_Init+0x324>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	f5b3 7f30 	cmp.w	r3, #704	; 0x2c0
 80036c6:	d02a      	beq.n	800371e <HAL_ADC_Init+0x302>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036d0:	d022      	beq.n	8003718 <HAL_ADC_Init+0x2fc>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80036da:	d01a      	beq.n	8003712 <HAL_ADC_Init+0x2f6>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e0:	f5b3 5f8a 	cmp.w	r3, #4416	; 0x1140
 80036e4:	d012      	beq.n	800370c <HAL_ADC_Init+0x2f0>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ea:	f5b3 5f84 	cmp.w	r3, #4224	; 0x1080
 80036ee:	d00a      	beq.n	8003706 <HAL_ADC_Init+0x2ea>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f4:	f5b3 5f86 	cmp.w	r3, #4288	; 0x10c0
 80036f8:	d002      	beq.n	8003700 <HAL_ADC_Init+0x2e4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fe:	e023      	b.n	8003748 <HAL_ADC_Init+0x32c>
 8003700:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003704:	e020      	b.n	8003748 <HAL_ADC_Init+0x32c>
 8003706:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800370a:	e01d      	b.n	8003748 <HAL_ADC_Init+0x32c>
 800370c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003710:	e01a      	b.n	8003748 <HAL_ADC_Init+0x32c>
 8003712:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003716:	e017      	b.n	8003748 <HAL_ADC_Init+0x32c>
 8003718:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800371c:	e014      	b.n	8003748 <HAL_ADC_Init+0x32c>
 800371e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003722:	e011      	b.n	8003748 <HAL_ADC_Init+0x32c>
 8003724:	20000010 	.word	0x20000010
 8003728:	431bde83 	.word	0x431bde83
 800372c:	50000100 	.word	0x50000100
 8003730:	50000300 	.word	0x50000300
 8003734:	50000700 	.word	0x50000700
 8003738:	50000400 	.word	0x50000400
 800373c:	50000500 	.word	0x50000500
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800374c:	4313      	orrs	r3, r2
 800374e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003750:	4313      	orrs	r3, r2
 8003752:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
 800375e:	2b00      	cmp	r3, #0
 8003760:	d114      	bne.n	800378c <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003770:	f023 0302 	bic.w	r3, r3, #2
 8003774:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	7e1b      	ldrb	r3, [r3, #24]
 800377a:	039a      	lsls	r2, r3, #14
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4313      	orrs	r3, r2
 8003786:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003788:	4313      	orrs	r3, r2
 800378a:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	4b1e      	ldr	r3, [pc, #120]	; (800380c <HAL_ADC_Init+0x3f0>)
 8003794:	4013      	ands	r3, r2
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	6812      	ldr	r2, [r2, #0]
 800379a:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800379c:	430b      	orrs	r3, r1
 800379e:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d10c      	bne.n	80037c2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f023 010f 	bic.w	r1, r3, #15
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	1e5a      	subs	r2, r3, #1
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	430a      	orrs	r2, r1
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
 80037c0:	e007      	b.n	80037d2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 020f 	bic.w	r2, r2, #15
 80037d0:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f023 0303 	bic.w	r3, r3, #3
 80037e0:	f043 0201 	orr.w	r2, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	641a      	str	r2, [r3, #64]	; 0x40
 80037e8:	e00a      	b.n	8003800 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	f023 0312 	bic.w	r3, r3, #18
 80037f2:	f043 0210 	orr.w	r2, r3, #16
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80037fa:	2301      	movs	r3, #1
 80037fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8003800:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003804:	4618      	mov	r0, r3
 8003806:	3768      	adds	r7, #104	; 0x68
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	fff0c007 	.word	0xfff0c007

08003810 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003818:	2300      	movs	r3, #0
 800381a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	2b00      	cmp	r3, #0
 8003828:	f040 80f9 	bne.w	8003a1e <HAL_ADC_Start+0x20e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_ADC_Start+0x2a>
 8003836:	2302      	movs	r3, #2
 8003838:	e0f4      	b.n	8003a24 <HAL_ADC_Start+0x214>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fe1e 	bl	8004484 <ADC_Enable>
 8003848:	4603      	mov	r3, r0
 800384a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800384c:	7bfb      	ldrb	r3, [r7, #15]
 800384e:	2b00      	cmp	r3, #0
 8003850:	f040 80e0 	bne.w	8003a14 <HAL_ADC_Start+0x204>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003858:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800385c:	f023 0301 	bic.w	r3, r3, #1
 8003860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003870:	d004      	beq.n	800387c <HAL_ADC_Start+0x6c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a6d      	ldr	r2, [pc, #436]	; (8003a2c <HAL_ADC_Start+0x21c>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d106      	bne.n	800388a <HAL_ADC_Start+0x7a>
 800387c:	4b6c      	ldr	r3, [pc, #432]	; (8003a30 <HAL_ADC_Start+0x220>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f003 031f 	and.w	r3, r3, #31
 8003884:	2b00      	cmp	r3, #0
 8003886:	d010      	beq.n	80038aa <HAL_ADC_Start+0x9a>
 8003888:	e005      	b.n	8003896 <HAL_ADC_Start+0x86>
 800388a:	4b6a      	ldr	r3, [pc, #424]	; (8003a34 <HAL_ADC_Start+0x224>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 031f 	and.w	r3, r3, #31
 8003892:	2b00      	cmp	r3, #0
 8003894:	d009      	beq.n	80038aa <HAL_ADC_Start+0x9a>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800389e:	d004      	beq.n	80038aa <HAL_ADC_Start+0x9a>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a64      	ldr	r2, [pc, #400]	; (8003a38 <HAL_ADC_Start+0x228>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d115      	bne.n	80038d6 <HAL_ADC_Start+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d036      	beq.n	8003932 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80038cc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80038d4:	e02d      	b.n	8003932 <HAL_ADC_Start+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ea:	d004      	beq.n	80038f6 <HAL_ADC_Start+0xe6>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a4e      	ldr	r2, [pc, #312]	; (8003a2c <HAL_ADC_Start+0x21c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d10a      	bne.n	800390c <HAL_ADC_Start+0xfc>
 80038f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf14      	ite	ne
 8003904:	2301      	movne	r3, #1
 8003906:	2300      	moveq	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	e008      	b.n	800391e <HAL_ADC_Start+0x10e>
 800390c:	4b4a      	ldr	r3, [pc, #296]	; (8003a38 <HAL_ADC_Start+0x228>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	bf14      	ite	ne
 8003918:	2301      	movne	r3, #1
 800391a:	2300      	moveq	r3, #0
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b00      	cmp	r3, #0
 8003920:	d007      	beq.n	8003932 <HAL_ADC_Start+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800392a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d106      	bne.n	800394e <HAL_ADC_Start+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003944:	f023 0206 	bic.w	r2, r3, #6
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	645a      	str	r2, [r3, #68]	; 0x44
 800394c:	e002      	b.n	8003954 <HAL_ADC_Start+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2200      	movs	r2, #0
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	221c      	movs	r2, #28
 8003962:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800396c:	d004      	beq.n	8003978 <HAL_ADC_Start+0x168>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a2e      	ldr	r2, [pc, #184]	; (8003a2c <HAL_ADC_Start+0x21c>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d106      	bne.n	8003986 <HAL_ADC_Start+0x176>
 8003978:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_ADC_Start+0x220>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	2b00      	cmp	r3, #0
 8003982:	d03e      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 8003984:	e005      	b.n	8003992 <HAL_ADC_Start+0x182>
 8003986:	4b2b      	ldr	r3, [pc, #172]	; (8003a34 <HAL_ADC_Start+0x224>)
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f003 031f 	and.w	r3, r3, #31
 800398e:	2b00      	cmp	r3, #0
 8003990:	d037      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800399a:	d004      	beq.n	80039a6 <HAL_ADC_Start+0x196>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a22      	ldr	r2, [pc, #136]	; (8003a2c <HAL_ADC_Start+0x21c>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d106      	bne.n	80039b4 <HAL_ADC_Start+0x1a4>
 80039a6:	4b22      	ldr	r3, [pc, #136]	; (8003a30 <HAL_ADC_Start+0x220>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 031f 	and.w	r3, r3, #31
 80039ae:	2b05      	cmp	r3, #5
 80039b0:	d027      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 80039b2:	e005      	b.n	80039c0 <HAL_ADC_Start+0x1b0>
 80039b4:	4b1f      	ldr	r3, [pc, #124]	; (8003a34 <HAL_ADC_Start+0x224>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 031f 	and.w	r3, r3, #31
 80039bc:	2b05      	cmp	r3, #5
 80039be:	d020      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c8:	d004      	beq.n	80039d4 <HAL_ADC_Start+0x1c4>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <HAL_ADC_Start+0x21c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d106      	bne.n	80039e2 <HAL_ADC_Start+0x1d2>
 80039d4:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <HAL_ADC_Start+0x220>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f003 031f 	and.w	r3, r3, #31
 80039dc:	2b09      	cmp	r3, #9
 80039de:	d010      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 80039e0:	e005      	b.n	80039ee <HAL_ADC_Start+0x1de>
 80039e2:	4b14      	ldr	r3, [pc, #80]	; (8003a34 <HAL_ADC_Start+0x224>)
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	2b09      	cmp	r3, #9
 80039ec:	d009      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f6:	d004      	beq.n	8003a02 <HAL_ADC_Start+0x1f2>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a0e      	ldr	r2, [pc, #56]	; (8003a38 <HAL_ADC_Start+0x228>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d10f      	bne.n	8003a22 <HAL_ADC_Start+0x212>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	689a      	ldr	r2, [r3, #8]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f042 0204 	orr.w	r2, r2, #4
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	e006      	b.n	8003a22 <HAL_ADC_Start+0x212>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003a1c:	e001      	b.n	8003a22 <HAL_ADC_Start+0x212>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3710      	adds	r7, #16
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	50000100 	.word	0x50000100
 8003a30:	50000300 	.word	0x50000300
 8003a34:	50000700 	.word	0x50000700
 8003a38:	50000400 	.word	0x50000400

08003a3c <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d101      	bne.n	8003a56 <HAL_ADC_Stop+0x1a>
 8003a52:	2302      	movs	r3, #2
 8003a54:	e023      	b.n	8003a9e <HAL_ADC_Stop+0x62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2201      	movs	r2, #1
 8003a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003a5e:	216c      	movs	r1, #108	; 0x6c
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 fdd9 	bl	8004618 <ADC_ConversionStop>
 8003a66:	4603      	mov	r3, r0
 8003a68:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003a6a:	7bfb      	ldrb	r3, [r7, #15]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d111      	bne.n	8003a94 <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003a70:	6878      	ldr	r0, [r7, #4]
 8003a72:	f000 fd6b 	bl	800454c <ADC_Disable>
 8003a76:	4603      	mov	r3, r0
 8003a78:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8003a7a:	7bfb      	ldrb	r3, [r7, #15]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d109      	bne.n	8003a94 <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a84:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003a88:	f023 0301 	bic.w	r3, r3, #1
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8003a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
 8003ab0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	695b      	ldr	r3, [r3, #20]
 8003aba:	2b08      	cmp	r3, #8
 8003abc:	d102      	bne.n	8003ac4 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8003abe:	2308      	movs	r3, #8
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e03a      	b.n	8003b3a <HAL_ADC_PollForConversion+0x92>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003acc:	d004      	beq.n	8003ad8 <HAL_ADC_PollForConversion+0x30>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a72      	ldr	r2, [pc, #456]	; (8003c9c <HAL_ADC_PollForConversion+0x1f4>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d101      	bne.n	8003adc <HAL_ADC_PollForConversion+0x34>
 8003ad8:	4b71      	ldr	r3, [pc, #452]	; (8003ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8003ada:	e000      	b.n	8003ade <HAL_ADC_PollForConversion+0x36>
 8003adc:	4b71      	ldr	r3, [pc, #452]	; (8003ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8003ade:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 031f 	and.w	r3, r3, #31
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d112      	bne.n	8003b12 <HAL_ADC_PollForConversion+0x6a>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d11d      	bne.n	8003b36 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f043 0220 	orr.w	r2, r3, #32
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0bf      	b.n	8003c92 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_ADC_PollForConversion+0x8e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	f043 0220 	orr.w	r2, r3, #32
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e0ad      	b.n	8003c92 <HAL_ADC_PollForConversion+0x1ea>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8003b36:	230c      	movs	r3, #12
 8003b38:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b42:	d004      	beq.n	8003b4e <HAL_ADC_PollForConversion+0xa6>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a54      	ldr	r2, [pc, #336]	; (8003c9c <HAL_ADC_PollForConversion+0x1f4>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d106      	bne.n	8003b5c <HAL_ADC_PollForConversion+0xb4>
 8003b4e:	4b54      	ldr	r3, [pc, #336]	; (8003ca0 <HAL_ADC_PollForConversion+0x1f8>)
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f003 031f 	and.w	r3, r3, #31
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d010      	beq.n	8003b7c <HAL_ADC_PollForConversion+0xd4>
 8003b5a:	e005      	b.n	8003b68 <HAL_ADC_PollForConversion+0xc0>
 8003b5c:	4b51      	ldr	r3, [pc, #324]	; (8003ca4 <HAL_ADC_PollForConversion+0x1fc>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 031f 	and.w	r3, r3, #31
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_ADC_PollForConversion+0xd4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b70:	d004      	beq.n	8003b7c <HAL_ADC_PollForConversion+0xd4>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a4c      	ldr	r2, [pc, #304]	; (8003ca8 <HAL_ADC_PollForConversion+0x200>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d104      	bne.n	8003b86 <HAL_ADC_PollForConversion+0xde>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	613b      	str	r3, [r7, #16]
 8003b84:	e00f      	b.n	8003ba6 <HAL_ADC_PollForConversion+0xfe>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8e:	d004      	beq.n	8003b9a <HAL_ADC_PollForConversion+0xf2>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a41      	ldr	r2, [pc, #260]	; (8003c9c <HAL_ADC_PollForConversion+0x1f4>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d102      	bne.n	8003ba0 <HAL_ADC_PollForConversion+0xf8>
 8003b9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b9e:	e000      	b.n	8003ba2 <HAL_ADC_PollForConversion+0xfa>
 8003ba0:	4b41      	ldr	r3, [pc, #260]	; (8003ca8 <HAL_ADC_PollForConversion+0x200>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8003ba6:	f7ff fc0b 	bl	80033c0 <HAL_GetTick>
 8003baa:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bac:	e021      	b.n	8003bf2 <HAL_ADC_PollForConversion+0x14a>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bb4:	d01d      	beq.n	8003bf2 <HAL_ADC_PollForConversion+0x14a>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d007      	beq.n	8003bcc <HAL_ADC_PollForConversion+0x124>
 8003bbc:	f7ff fc00 	bl	80033c0 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	683a      	ldr	r2, [r7, #0]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d212      	bcs.n	8003bf2 <HAL_ADC_PollForConversion+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10b      	bne.n	8003bf2 <HAL_ADC_PollForConversion+0x14a>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f043 0204 	orr.w	r2, r3, #4
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2200      	movs	r2, #0
 8003bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e04f      	b.n	8003c92 <HAL_ADC_PollForConversion+0x1ea>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d0d6      	beq.n	8003bae <HAL_ADC_PollForConversion+0x106>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d131      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x1d6>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d12c      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x1d6>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b08      	cmp	r3, #8
 8003c30:	d125      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x1d6>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 0304 	and.w	r3, r3, #4
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d112      	bne.n	8003c66 <HAL_ADC_PollForConversion+0x1be>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d112      	bne.n	8003c7e <HAL_ADC_PollForConversion+0x1d6>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5c:	f043 0201 	orr.w	r2, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	641a      	str	r2, [r3, #64]	; 0x40
 8003c64:	e00b      	b.n	8003c7e <HAL_ADC_PollForConversion+0x1d6>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f043 0220 	orr.w	r2, r3, #32
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c76:	f043 0201 	orr.w	r2, r3, #1
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d103      	bne.n	8003c90 <HAL_ADC_PollForConversion+0x1e8>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	50000100 	.word	0x50000100
 8003ca0:	50000300 	.word	0x50000300
 8003ca4:	50000700 	.word	0x50000700
 8003ca8:	50000400 	.word	0x50000400

08003cac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr
	...

08003cc8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b09b      	sub	sp, #108	; 0x6c
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce2:	2b01      	cmp	r3, #1
 8003ce4:	d101      	bne.n	8003cea <HAL_ADC_ConfigChannel+0x22>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e2cb      	b.n	8004282 <HAL_ADC_ConfigChannel+0x5ba>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f040 82af 	bne.w	8004260 <HAL_ADC_ConfigChannel+0x598>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b04      	cmp	r3, #4
 8003d08:	d81c      	bhi.n	8003d44 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	685a      	ldr	r2, [r3, #4]
 8003d14:	4613      	mov	r3, r2
 8003d16:	005b      	lsls	r3, r3, #1
 8003d18:	4413      	add	r3, r2
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	231f      	movs	r3, #31
 8003d20:	4093      	lsls	r3, r2
 8003d22:	43db      	mvns	r3, r3
 8003d24:	4019      	ands	r1, r3
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6818      	ldr	r0, [r3, #0]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	005b      	lsls	r3, r3, #1
 8003d32:	4413      	add	r3, r2
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fa00 f203 	lsl.w	r2, r0, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	631a      	str	r2, [r3, #48]	; 0x30
 8003d42:	e063      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	2b09      	cmp	r3, #9
 8003d4a:	d81e      	bhi.n	8003d8a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685a      	ldr	r2, [r3, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	4413      	add	r3, r2
 8003d5c:	005b      	lsls	r3, r3, #1
 8003d5e:	3b1e      	subs	r3, #30
 8003d60:	221f      	movs	r2, #31
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	4019      	ands	r1, r3
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685a      	ldr	r2, [r3, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4413      	add	r3, r2
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	3b1e      	subs	r3, #30
 8003d7c:	fa00 f203 	lsl.w	r2, r0, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	635a      	str	r2, [r3, #52]	; 0x34
 8003d88:	e040      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b0e      	cmp	r3, #14
 8003d90:	d81e      	bhi.n	8003dd0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	005b      	lsls	r3, r3, #1
 8003da4:	3b3c      	subs	r3, #60	; 0x3c
 8003da6:	221f      	movs	r2, #31
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	43db      	mvns	r3, r3
 8003dae:	4019      	ands	r1, r3
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	005b      	lsls	r3, r3, #1
 8003dbc:	4413      	add	r3, r2
 8003dbe:	005b      	lsls	r3, r3, #1
 8003dc0:	3b3c      	subs	r3, #60	; 0x3c
 8003dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	430a      	orrs	r2, r1
 8003dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8003dce:	e01d      	b.n	8003e0c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	005b      	lsls	r3, r3, #1
 8003dde:	4413      	add	r3, r2
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	3b5a      	subs	r3, #90	; 0x5a
 8003de4:	221f      	movs	r2, #31
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	43db      	mvns	r3, r3
 8003dec:	4019      	ands	r1, r3
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	6818      	ldr	r0, [r3, #0]
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	685a      	ldr	r2, [r3, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	005b      	lsls	r3, r3, #1
 8003dfa:	4413      	add	r3, r2
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	3b5a      	subs	r3, #90	; 0x5a
 8003e00:	fa00 f203 	lsl.w	r2, r0, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f003 030c 	and.w	r3, r3, #12
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f040 80e5 	bne.w	8003fe6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b09      	cmp	r3, #9
 8003e22:	d91c      	bls.n	8003e5e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	6999      	ldr	r1, [r3, #24]
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	005b      	lsls	r3, r3, #1
 8003e32:	4413      	add	r3, r2
 8003e34:	3b1e      	subs	r3, #30
 8003e36:	2207      	movs	r2, #7
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	4019      	ands	r1, r3
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6898      	ldr	r0, [r3, #8]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	005b      	lsls	r3, r3, #1
 8003e4c:	4413      	add	r3, r2
 8003e4e:	3b1e      	subs	r3, #30
 8003e50:	fa00 f203 	lsl.w	r2, r0, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	430a      	orrs	r2, r1
 8003e5a:	619a      	str	r2, [r3, #24]
 8003e5c:	e019      	b.n	8003e92 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	6959      	ldr	r1, [r3, #20]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	4413      	add	r3, r2
 8003e6e:	2207      	movs	r2, #7
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	43db      	mvns	r3, r3
 8003e76:	4019      	ands	r1, r3
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6898      	ldr	r0, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	4613      	mov	r3, r2
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	4413      	add	r3, r2
 8003e86:	fa00 f203 	lsl.w	r2, r0, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	695a      	ldr	r2, [r3, #20]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	08db      	lsrs	r3, r3, #3
 8003e9e:	f003 0303 	and.w	r3, r3, #3
 8003ea2:	005b      	lsls	r3, r3, #1
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	691b      	ldr	r3, [r3, #16]
 8003eae:	3b01      	subs	r3, #1
 8003eb0:	2b03      	cmp	r3, #3
 8003eb2:	d84f      	bhi.n	8003f54 <HAL_ADC_ConfigChannel+0x28c>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <HAL_ADC_ConfigChannel+0x1f4>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ecd 	.word	0x08003ecd
 8003ec0:	08003eef 	.word	0x08003eef
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003f33 	.word	0x08003f33
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ed2:	4b9f      	ldr	r3, [pc, #636]	; (8004150 <HAL_ADC_ConfigChannel+0x488>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	0691      	lsls	r1, r2, #26
 8003edc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003eec:	e07e      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003ef4:	4b96      	ldr	r3, [pc, #600]	; (8004150 <HAL_ADC_ConfigChannel+0x488>)
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	0691      	lsls	r1, r2, #26
 8003efe:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f00:	430a      	orrs	r2, r1
 8003f02:	431a      	orrs	r2, r3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f0c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f0e:	e06d      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f16:	4b8e      	ldr	r3, [pc, #568]	; (8004150 <HAL_ADC_ConfigChannel+0x488>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	6812      	ldr	r2, [r2, #0]
 8003f1e:	0691      	lsls	r1, r2, #26
 8003f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f22:	430a      	orrs	r2, r1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f2e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f30:	e05c      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f38:	4b85      	ldr	r3, [pc, #532]	; (8004150 <HAL_ADC_ConfigChannel+0x488>)
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	683a      	ldr	r2, [r7, #0]
 8003f3e:	6812      	ldr	r2, [r2, #0]
 8003f40:	0691      	lsls	r1, r2, #26
 8003f42:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f44:	430a      	orrs	r2, r1
 8003f46:	431a      	orrs	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003f50:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8003f52:	e04b      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f5a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	069b      	lsls	r3, r3, #26
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d107      	bne.n	8003f78 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f76:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	069b      	lsls	r3, r3, #26
 8003f88:	429a      	cmp	r2, r3
 8003f8a:	d107      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f9a:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fa2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	069b      	lsls	r3, r3, #26
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d107      	bne.n	8003fc0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fbe:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	069b      	lsls	r3, r3, #26
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d10a      	bne.n	8003fea <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003fe2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8003fe4:	e001      	b.n	8003fea <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8003fe6:	bf00      	nop
 8003fe8:	e000      	b.n	8003fec <HAL_ADC_ConfigChannel+0x324>
      break;
 8003fea:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 0303 	and.w	r3, r3, #3
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d108      	bne.n	800400c <HAL_ADC_ConfigChannel+0x344>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b01      	cmp	r3, #1
 8004006:	d101      	bne.n	800400c <HAL_ADC_ConfigChannel+0x344>
 8004008:	2301      	movs	r3, #1
 800400a:	e000      	b.n	800400e <HAL_ADC_ConfigChannel+0x346>
 800400c:	2300      	movs	r3, #0
 800400e:	2b00      	cmp	r3, #0
 8004010:	f040 8131 	bne.w	8004276 <HAL_ADC_ConfigChannel+0x5ae>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d00f      	beq.n	800403c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2201      	movs	r2, #1
 800402a:	fa02 f303 	lsl.w	r3, r2, r3
 800402e:	43da      	mvns	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	400a      	ands	r2, r1
 8004036:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800403a:	e049      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2201      	movs	r2, #1
 800404a:	409a      	lsls	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b09      	cmp	r3, #9
 800405c:	d91c      	bls.n	8004098 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6999      	ldr	r1, [r3, #24]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	4413      	add	r3, r2
 800406e:	3b1b      	subs	r3, #27
 8004070:	2207      	movs	r2, #7
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43db      	mvns	r3, r3
 8004078:	4019      	ands	r1, r3
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6898      	ldr	r0, [r3, #8]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	4613      	mov	r3, r2
 8004084:	005b      	lsls	r3, r3, #1
 8004086:	4413      	add	r3, r2
 8004088:	3b1b      	subs	r3, #27
 800408a:	fa00 f203 	lsl.w	r2, r0, r3
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	619a      	str	r2, [r3, #24]
 8004096:	e01b      	b.n	80040d0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6959      	ldr	r1, [r3, #20]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	1c5a      	adds	r2, r3, #1
 80040a4:	4613      	mov	r3, r2
 80040a6:	005b      	lsls	r3, r3, #1
 80040a8:	4413      	add	r3, r2
 80040aa:	2207      	movs	r2, #7
 80040ac:	fa02 f303 	lsl.w	r3, r2, r3
 80040b0:	43db      	mvns	r3, r3
 80040b2:	4019      	ands	r1, r3
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	6898      	ldr	r0, [r3, #8]
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	1c5a      	adds	r2, r3, #1
 80040be:	4613      	mov	r3, r2
 80040c0:	005b      	lsls	r3, r3, #1
 80040c2:	4413      	add	r3, r2
 80040c4:	fa00 f203 	lsl.w	r2, r0, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040d8:	d004      	beq.n	80040e4 <HAL_ADC_ConfigChannel+0x41c>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a1d      	ldr	r2, [pc, #116]	; (8004154 <HAL_ADC_ConfigChannel+0x48c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d101      	bne.n	80040e8 <HAL_ADC_ConfigChannel+0x420>
 80040e4:	4b1c      	ldr	r3, [pc, #112]	; (8004158 <HAL_ADC_ConfigChannel+0x490>)
 80040e6:	e000      	b.n	80040ea <HAL_ADC_ConfigChannel+0x422>
 80040e8:	4b1c      	ldr	r3, [pc, #112]	; (800415c <HAL_ADC_ConfigChannel+0x494>)
 80040ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	2b10      	cmp	r3, #16
 80040f2:	d105      	bne.n	8004100 <HAL_ADC_ConfigChannel+0x438>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80040f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d015      	beq.n	800412c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8004104:	2b11      	cmp	r3, #17
 8004106:	d105      	bne.n	8004114 <HAL_ADC_ConfigChannel+0x44c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00b      	beq.n	800412c <HAL_ADC_ConfigChannel+0x464>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8004118:	2b12      	cmp	r3, #18
 800411a:	f040 80ac 	bne.w	8004276 <HAL_ADC_ConfigChannel+0x5ae>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800411e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8004126:	2b00      	cmp	r3, #0
 8004128:	f040 80a5 	bne.w	8004276 <HAL_ADC_ConfigChannel+0x5ae>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004134:	d102      	bne.n	800413c <HAL_ADC_ConfigChannel+0x474>
 8004136:	4b07      	ldr	r3, [pc, #28]	; (8004154 <HAL_ADC_ConfigChannel+0x48c>)
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e023      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4bc>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a04      	ldr	r2, [pc, #16]	; (8004154 <HAL_ADC_ConfigChannel+0x48c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d10c      	bne.n	8004160 <HAL_ADC_ConfigChannel+0x498>
 8004146:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800414a:	60fb      	str	r3, [r7, #12]
 800414c:	e01a      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4bc>
 800414e:	bf00      	nop
 8004150:	83fff000 	.word	0x83fff000
 8004154:	50000100 	.word	0x50000100
 8004158:	50000300 	.word	0x50000300
 800415c:	50000700 	.word	0x50000700
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a4a      	ldr	r2, [pc, #296]	; (8004290 <HAL_ADC_ConfigChannel+0x5c8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d102      	bne.n	8004170 <HAL_ADC_ConfigChannel+0x4a8>
 800416a:	4b4a      	ldr	r3, [pc, #296]	; (8004294 <HAL_ADC_ConfigChannel+0x5cc>)
 800416c:	60fb      	str	r3, [r7, #12]
 800416e:	e009      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4bc>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a47      	ldr	r2, [pc, #284]	; (8004294 <HAL_ADC_ConfigChannel+0x5cc>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d102      	bne.n	8004180 <HAL_ADC_ConfigChannel+0x4b8>
 800417a:	4b45      	ldr	r3, [pc, #276]	; (8004290 <HAL_ADC_ConfigChannel+0x5c8>)
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e001      	b.n	8004184 <HAL_ADC_ConfigChannel+0x4bc>
 8004180:	2300      	movs	r3, #0
 8004182:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0303 	and.w	r3, r3, #3
 800418e:	2b01      	cmp	r3, #1
 8004190:	d108      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x4dc>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 0301 	and.w	r3, r3, #1
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_ADC_ConfigChannel+0x4dc>
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_ADC_ConfigChannel+0x4de>
 80041a4:	2300      	movs	r3, #0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d150      	bne.n	800424c <HAL_ADC_ConfigChannel+0x584>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041aa:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d010      	beq.n	80041d2 <HAL_ADC_ConfigChannel+0x50a>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	689b      	ldr	r3, [r3, #8]
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x504>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d101      	bne.n	80041cc <HAL_ADC_ConfigChannel+0x504>
 80041c8:	2301      	movs	r3, #1
 80041ca:	e000      	b.n	80041ce <HAL_ADC_ConfigChannel+0x506>
 80041cc:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d13c      	bne.n	800424c <HAL_ADC_ConfigChannel+0x584>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b10      	cmp	r3, #16
 80041d8:	d11d      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x54e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80041e2:	d118      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x54e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80041e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80041ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80041ee:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80041f0:	4b29      	ldr	r3, [pc, #164]	; (8004298 <HAL_ADC_ConfigChannel+0x5d0>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a29      	ldr	r2, [pc, #164]	; (800429c <HAL_ADC_ConfigChannel+0x5d4>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	0c9a      	lsrs	r2, r3, #18
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004206:	e002      	b.n	800420e <HAL_ADC_ConfigChannel+0x546>
          {
            wait_loop_index--;
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1f9      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x540>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004214:	e02e      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5ac>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b11      	cmp	r3, #17
 800421c:	d10b      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x56e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004226:	d106      	bne.n	8004236 <HAL_ADC_ConfigChannel+0x56e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8004228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8004230:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004232:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004234:	e01e      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5ac>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b12      	cmp	r3, #18
 800423c:	d11a      	bne.n	8004274 <HAL_ADC_ConfigChannel+0x5ac>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800423e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004246:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004248:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800424a:	e013      	b.n	8004274 <HAL_ADC_ConfigChannel+0x5ac>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800425e:	e00a      	b.n	8004276 <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004264:	f043 0220 	orr.w	r2, r3, #32
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800426c:	2301      	movs	r3, #1
 800426e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004272:	e000      	b.n	8004276 <HAL_ADC_ConfigChannel+0x5ae>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8004274:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800427e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004282:	4618      	mov	r0, r3
 8004284:	376c      	adds	r7, #108	; 0x6c
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	50000400 	.word	0x50000400
 8004294:	50000500 	.word	0x50000500
 8004298:	20000010 	.word	0x20000010
 800429c:	431bde83 	.word	0x431bde83

080042a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b099      	sub	sp, #100	; 0x64
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042aa:	2300      	movs	r3, #0
 80042ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042b8:	d102      	bne.n	80042c0 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80042ba:	4b6d      	ldr	r3, [pc, #436]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042bc:	60bb      	str	r3, [r7, #8]
 80042be:	e01a      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a6a      	ldr	r2, [pc, #424]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d103      	bne.n	80042d2 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80042ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80042ce:	60bb      	str	r3, [r7, #8]
 80042d0:	e011      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a67      	ldr	r2, [pc, #412]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d102      	bne.n	80042e2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80042dc:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042de:	60bb      	str	r3, [r7, #8]
 80042e0:	e009      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a64      	ldr	r2, [pc, #400]	; (8004478 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d102      	bne.n	80042f2 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80042ec:	4b61      	ldr	r3, [pc, #388]	; (8004474 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80042ee:	60bb      	str	r3, [r7, #8]
 80042f0:	e001      	b.n	80042f6 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80042f2:	2300      	movs	r3, #0
 80042f4:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d101      	bne.n	8004300 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e0b0      	b.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004306:	2b01      	cmp	r3, #1
 8004308:	d101      	bne.n	800430e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800430a:	2302      	movs	r3, #2
 800430c:	e0a9      	b.n	8004462 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2201      	movs	r2, #1
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	f003 0304 	and.w	r3, r3, #4
 8004320:	2b00      	cmp	r3, #0
 8004322:	f040 808d 	bne.w	8004440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f003 0304 	and.w	r3, r3, #4
 800432e:	2b00      	cmp	r3, #0
 8004330:	f040 8086 	bne.w	8004440 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800433c:	d004      	beq.n	8004348 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a4b      	ldr	r2, [pc, #300]	; (8004470 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d101      	bne.n	800434c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004348:	4b4c      	ldr	r3, [pc, #304]	; (800447c <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 800434a:	e000      	b.n	800434e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 800434c:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800434e:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d040      	beq.n	80043da <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8004358:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800436a:	035b      	lsls	r3, r3, #13
 800436c:	430b      	orrs	r3, r1
 800436e:	431a      	orrs	r2, r3
 8004370:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004372:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	689b      	ldr	r3, [r3, #8]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b01      	cmp	r3, #1
 8004380:	d108      	bne.n	8004394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 8004390:	2301      	movs	r3, #1
 8004392:	e000      	b.n	8004396 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 8004394:	2300      	movs	r3, #0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d15c      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	689b      	ldr	r3, [r3, #8]
 800439e:	f003 0303 	and.w	r3, r3, #3
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d101      	bne.n	80043b6 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80043b2:	2301      	movs	r3, #1
 80043b4:	e000      	b.n	80043b8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80043b6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d14b      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80043bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80043c4:	f023 030f 	bic.w	r3, r3, #15
 80043c8:	683a      	ldr	r2, [r7, #0]
 80043ca:	6811      	ldr	r1, [r2, #0]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	6892      	ldr	r2, [r2, #8]
 80043d0:	430a      	orrs	r2, r1
 80043d2:	431a      	orrs	r2, r3
 80043d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043d6:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80043d8:	e03c      	b.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80043da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80043e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80043e4:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	689b      	ldr	r3, [r3, #8]
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	2b01      	cmp	r3, #1
 80043f2:	d108      	bne.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b01      	cmp	r3, #1
 8004400:	d101      	bne.n	8004406 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d123      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	689b      	ldr	r3, [r3, #8]
 8004410:	f003 0303 	and.w	r3, r3, #3
 8004414:	2b01      	cmp	r3, #1
 8004416:	d107      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0301 	and.w	r3, r3, #1
 8004420:	2b01      	cmp	r3, #1
 8004422:	d101      	bne.n	8004428 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8004428:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800442a:	2b00      	cmp	r3, #0
 800442c:	d112      	bne.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800442e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004436:	f023 030f 	bic.w	r3, r3, #15
 800443a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800443c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800443e:	e009      	b.n	8004454 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004444:	f043 0220 	orr.w	r2, r3, #32
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004452:	e000      	b.n	8004456 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8004454:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800445e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8004462:	4618      	mov	r0, r3
 8004464:	3764      	adds	r7, #100	; 0x64
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	50000100 	.word	0x50000100
 8004474:	50000400 	.word	0x50000400
 8004478:	50000500 	.word	0x50000500
 800447c:	50000300 	.word	0x50000300
 8004480:	50000700 	.word	0x50000700

08004484 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	2b01      	cmp	r3, #1
 800449c:	d108      	bne.n	80044b0 <ADC_Enable+0x2c>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <ADC_Enable+0x2c>
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <ADC_Enable+0x2e>
 80044b0:	2300      	movs	r3, #0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d143      	bne.n	800453e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	4b22      	ldr	r3, [pc, #136]	; (8004548 <ADC_Enable+0xc4>)
 80044be:	4013      	ands	r3, r2
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00d      	beq.n	80044e0 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c8:	f043 0210 	orr.w	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d4:	f043 0201 	orr.w	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e02f      	b.n	8004540 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689a      	ldr	r2, [r3, #8]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80044f0:	f7fe ff66 	bl	80033c0 <HAL_GetTick>
 80044f4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80044f6:	e01b      	b.n	8004530 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80044f8:	f7fe ff62 	bl	80033c0 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d914      	bls.n	8004530 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0301 	and.w	r3, r3, #1
 8004510:	2b01      	cmp	r3, #1
 8004512:	d00d      	beq.n	8004530 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	f043 0210 	orr.w	r2, r3, #16
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004524:	f043 0201 	orr.w	r2, r3, #1
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e007      	b.n	8004540 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d1dc      	bne.n	80044f8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}
 8004548:	8000003f 	.word	0x8000003f

0800454c <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 0303 	and.w	r3, r3, #3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d108      	bne.n	8004578 <ADC_Disable+0x2c>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <ADC_Disable+0x2c>
 8004574:	2301      	movs	r3, #1
 8004576:	e000      	b.n	800457a <ADC_Disable+0x2e>
 8004578:	2300      	movs	r3, #0
 800457a:	2b00      	cmp	r3, #0
 800457c:	d047      	beq.n	800460e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 030d 	and.w	r3, r3, #13
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10f      	bne.n	80045ac <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689a      	ldr	r2, [r3, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f042 0202 	orr.w	r2, r2, #2
 800459a:	609a      	str	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	2203      	movs	r2, #3
 80045a2:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80045a4:	f7fe ff0c 	bl	80033c0 <HAL_GetTick>
 80045a8:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045aa:	e029      	b.n	8004600 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b0:	f043 0210 	orr.w	r2, r3, #16
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	f043 0201 	orr.w	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e023      	b.n	8004610 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80045c8:	f7fe fefa 	bl	80033c0 <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d914      	bls.n	8004600 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d10d      	bne.n	8004600 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e8:	f043 0210 	orr.w	r2, r3, #16
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f043 0201 	orr.w	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	e007      	b.n	8004610 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d0dc      	beq.n	80045c8 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800460e:	2300      	movs	r3, #0
}
 8004610:	4618      	mov	r0, r3
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b086      	sub	sp, #24
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
 8004620:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8004622:	2300      	movs	r3, #0
 8004624:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8004626:	2300      	movs	r3, #0
 8004628:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	f003 030c 	and.w	r3, r3, #12
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 809a 	beq.w	8004772 <ADC_ConversionStop+0x15a>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004648:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800464c:	d12a      	bne.n	80046a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	7e5b      	ldrb	r3, [r3, #25]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8004652:	2b01      	cmp	r3, #1
 8004654:	d126      	bne.n	80046a4 <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	7e1b      	ldrb	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 800465a:	2b01      	cmp	r3, #1
 800465c:	d122      	bne.n	80046a4 <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 800465e:	230c      	movs	r3, #12
 8004660:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8004662:	e014      	b.n	800468e <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	4a45      	ldr	r2, [pc, #276]	; (800477c <ADC_ConversionStop+0x164>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d90d      	bls.n	8004688 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	f043 0210 	orr.w	r2, r3, #16
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467c:	f043 0201 	orr.w	r2, r3, #1
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	645a      	str	r2, [r3, #68]	; 0x44
          
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e075      	b.n	8004774 <ADC_ConversionStop+0x15c>
        }
        Conversion_Timeout_CPU_cycles ++;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	3301      	adds	r3, #1
 800468c:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004698:	2b40      	cmp	r3, #64	; 0x40
 800469a:	d1e3      	bne.n	8004664 <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2240      	movs	r2, #64	; 0x40
 80046a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b60      	cmp	r3, #96	; 0x60
 80046a8:	d015      	beq.n	80046d6 <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	f003 0304 	and.w	r3, r3, #4
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d10e      	bne.n	80046d6 <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	689b      	ldr	r3, [r3, #8]
 80046be:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d107      	bne.n	80046d6 <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	689a      	ldr	r2, [r3, #8]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0210 	orr.w	r2, r2, #16
 80046d4:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	2b0c      	cmp	r3, #12
 80046da:	d015      	beq.n	8004708 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b08      	cmp	r3, #8
 80046e8:	d10e      	bne.n	8004708 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	689a      	ldr	r2, [r3, #8]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0220 	orr.w	r2, r2, #32
 8004706:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	2b60      	cmp	r3, #96	; 0x60
 800470c:	d004      	beq.n	8004718 <ADC_ConversionStop+0x100>
 800470e:	2b6c      	cmp	r3, #108	; 0x6c
 8004710:	d105      	bne.n	800471e <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8004712:	230c      	movs	r3, #12
 8004714:	617b      	str	r3, [r7, #20]
        break;
 8004716:	e005      	b.n	8004724 <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004718:	2308      	movs	r3, #8
 800471a:	617b      	str	r3, [r7, #20]
        break;
 800471c:	e002      	b.n	8004724 <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800471e:	2304      	movs	r3, #4
 8004720:	617b      	str	r3, [r7, #20]
        break;
 8004722:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8004724:	f7fe fe4c 	bl	80033c0 <HAL_GetTick>
 8004728:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800472a:	e01b      	b.n	8004764 <ADC_ConversionStop+0x14c>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800472c:	f7fe fe48 	bl	80033c0 <HAL_GetTick>
 8004730:	4602      	mov	r2, r0
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1ad3      	subs	r3, r2, r3
 8004736:	2b0b      	cmp	r3, #11
 8004738:	d914      	bls.n	8004764 <ADC_ConversionStop+0x14c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4013      	ands	r3, r2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00d      	beq.n	8004764 <ADC_ConversionStop+0x14c>
        {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474c:	f043 0210 	orr.w	r2, r3, #16
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	f043 0201 	orr.w	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e007      	b.n	8004774 <ADC_ConversionStop+0x15c>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	689a      	ldr	r2, [r3, #8]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	4013      	ands	r3, r2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1dc      	bne.n	800472c <ADC_ConversionStop+0x114>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3718      	adds	r7, #24
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}
 800477c:	000993ff 	.word	0x000993ff

08004780 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004790:	4b0c      	ldr	r3, [pc, #48]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800479c:	4013      	ands	r3, r2
 800479e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80047a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80047b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80047b2:	4a04      	ldr	r2, [pc, #16]	; (80047c4 <__NVIC_SetPriorityGrouping+0x44>)
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	60d3      	str	r3, [r2, #12]
}
 80047b8:	bf00      	nop
 80047ba:	3714      	adds	r7, #20
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	e000ed00 	.word	0xe000ed00

080047c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80047c8:	b480      	push	{r7}
 80047ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <__NVIC_GetPriorityGrouping+0x18>)
 80047ce:	68db      	ldr	r3, [r3, #12]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	f003 0307 	and.w	r3, r3, #7
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000ed00 	.word	0xe000ed00

080047e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b083      	sub	sp, #12
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	4603      	mov	r3, r0
 80047ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80047ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	db0b      	blt.n	800480e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	f003 021f 	and.w	r2, r3, #31
 80047fc:	4907      	ldr	r1, [pc, #28]	; (800481c <__NVIC_EnableIRQ+0x38>)
 80047fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004802:	095b      	lsrs	r3, r3, #5
 8004804:	2001      	movs	r0, #1
 8004806:	fa00 f202 	lsl.w	r2, r0, r2
 800480a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800480e:	bf00      	nop
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	e000e100 	.word	0xe000e100

08004820 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b083      	sub	sp, #12
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	6039      	str	r1, [r7, #0]
 800482a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800482c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004830:	2b00      	cmp	r3, #0
 8004832:	db0a      	blt.n	800484a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	b2da      	uxtb	r2, r3
 8004838:	490c      	ldr	r1, [pc, #48]	; (800486c <__NVIC_SetPriority+0x4c>)
 800483a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800483e:	0112      	lsls	r2, r2, #4
 8004840:	b2d2      	uxtb	r2, r2
 8004842:	440b      	add	r3, r1
 8004844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004848:	e00a      	b.n	8004860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	b2da      	uxtb	r2, r3
 800484e:	4908      	ldr	r1, [pc, #32]	; (8004870 <__NVIC_SetPriority+0x50>)
 8004850:	79fb      	ldrb	r3, [r7, #7]
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	3b04      	subs	r3, #4
 8004858:	0112      	lsls	r2, r2, #4
 800485a:	b2d2      	uxtb	r2, r2
 800485c:	440b      	add	r3, r1
 800485e:	761a      	strb	r2, [r3, #24]
}
 8004860:	bf00      	nop
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr
 800486c:	e000e100 	.word	0xe000e100
 8004870:	e000ed00 	.word	0xe000ed00

08004874 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
 800487a:	60f8      	str	r0, [r7, #12]
 800487c:	60b9      	str	r1, [r7, #8]
 800487e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	f1c3 0307 	rsb	r3, r3, #7
 800488e:	2b04      	cmp	r3, #4
 8004890:	bf28      	it	cs
 8004892:	2304      	movcs	r3, #4
 8004894:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3304      	adds	r3, #4
 800489a:	2b06      	cmp	r3, #6
 800489c:	d902      	bls.n	80048a4 <NVIC_EncodePriority+0x30>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	3b03      	subs	r3, #3
 80048a2:	e000      	b.n	80048a6 <NVIC_EncodePriority+0x32>
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048a8:	f04f 32ff 	mov.w	r2, #4294967295
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43da      	mvns	r2, r3
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	401a      	ands	r2, r3
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80048bc:	f04f 31ff 	mov.w	r1, #4294967295
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	fa01 f303 	lsl.w	r3, r1, r3
 80048c6:	43d9      	mvns	r1, r3
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80048cc:	4313      	orrs	r3, r2
         );
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3724      	adds	r7, #36	; 0x24
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
	...

080048dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	3b01      	subs	r3, #1
 80048e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80048ec:	d301      	bcc.n	80048f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80048ee:	2301      	movs	r3, #1
 80048f0:	e00f      	b.n	8004912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80048f2:	4a0a      	ldr	r2, [pc, #40]	; (800491c <SysTick_Config+0x40>)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80048fa:	210f      	movs	r1, #15
 80048fc:	f04f 30ff 	mov.w	r0, #4294967295
 8004900:	f7ff ff8e 	bl	8004820 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004904:	4b05      	ldr	r3, [pc, #20]	; (800491c <SysTick_Config+0x40>)
 8004906:	2200      	movs	r2, #0
 8004908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800490a:	4b04      	ldr	r3, [pc, #16]	; (800491c <SysTick_Config+0x40>)
 800490c:	2207      	movs	r2, #7
 800490e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	3708      	adds	r7, #8
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	e000e010 	.word	0xe000e010

08004920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f7ff ff29 	bl	8004780 <__NVIC_SetPriorityGrouping>
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}

08004936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004936:	b580      	push	{r7, lr}
 8004938:	b086      	sub	sp, #24
 800493a:	af00      	add	r7, sp, #0
 800493c:	4603      	mov	r3, r0
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
 8004942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004948:	f7ff ff3e 	bl	80047c8 <__NVIC_GetPriorityGrouping>
 800494c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7ff ff8e 	bl	8004874 <NVIC_EncodePriority>
 8004958:	4602      	mov	r2, r0
 800495a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800495e:	4611      	mov	r1, r2
 8004960:	4618      	mov	r0, r3
 8004962:	f7ff ff5d 	bl	8004820 <__NVIC_SetPriority>
}
 8004966:	bf00      	nop
 8004968:	3718      	adds	r7, #24
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b082      	sub	sp, #8
 8004972:	af00      	add	r7, sp, #0
 8004974:	4603      	mov	r3, r0
 8004976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff ff31 	bl	80047e4 <__NVIC_EnableIRQ>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b082      	sub	sp, #8
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ffa2 	bl	80048dc <SysTick_Config>
 8004998:	4603      	mov	r3, r0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b082      	sub	sp, #8
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d101      	bne.n	80049b4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e014      	b.n	80049de <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	791b      	ldrb	r3, [r3, #4]
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d105      	bne.n	80049ca <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f7fd ff33 	bl	8002830 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}

080049e6 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80049e6:	b580      	push	{r7, lr}
 80049e8:	b084      	sub	sp, #16
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
 80049ee:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049f0:	2300      	movs	r3, #0
 80049f2:	73fb      	strb	r3, [r7, #15]
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6819      	ldr	r1, [r3, #0]
 80049fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	43da      	mvns	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	400a      	ands	r2, r1
 8004a0c:	601a      	str	r2, [r3, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	2201      	movs	r2, #1
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	fa02 f303 	lsl.w	r3, r2, r3
 8004a1c:	43da      	mvns	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	400a      	ands	r2, r1
 8004a24:	601a      	str	r2, [r3, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10f      	bne.n	8004a4c <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f000 fa72 	bl	8004f1a <HAL_DMA_Abort>
 8004a36:	4603      	mov	r3, r0
 8004a38:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a48:	601a      	str	r2, [r3, #0]
 8004a4a:	e00e      	b.n	8004a6a <HAL_DAC_Stop_DMA+0x84>
  /* For all products including channel 2U */
  /* DAC channel 2 is available on top of DAC channel 1U */
  else /* Channel2 is used */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa62 	bl	8004f1a <HAL_DMA_Abort>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004a68:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8004a6a:	7bfb      	ldrb	r3, [r7, #15]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d003      	beq.n	8004a78 <HAL_DAC_Stop_DMA+0x92>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;      
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2204      	movs	r2, #4
 8004a74:	711a      	strb	r2, [r3, #4]
 8004a76:	e002      	b.n	8004a7e <HAL_DAC_Stop_DMA+0x98>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	711a      	strb	r2, [r3, #4]
  }
  
  /* Return function status */
  return status;
 8004a7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3710      	adds	r7, #16
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b086      	sub	sp, #24
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	607a      	str	r2, [r7, #4]
 8004ad0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	795b      	ldrb	r3, [r3, #5]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d101      	bne.n	8004ae2 <HAL_DAC_Start_DMA+0x1e>
 8004ade:	2302      	movs	r3, #2
 8004ae0:	e08e      	b.n	8004c00 <HAL_DAC_Start_DMA+0x13c>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	2202      	movs	r2, #2
 8004aec:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d12a      	bne.n	8004b4a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4a43      	ldr	r2, [pc, #268]	; (8004c08 <HAL_DAC_Start_DMA+0x144>)
 8004afa:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	4a42      	ldr	r2, [pc, #264]	; (8004c0c <HAL_DAC_Start_DMA+0x148>)
 8004b02:	62da      	str	r2, [r3, #44]	; 0x2c
      
    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	4a41      	ldr	r2, [pc, #260]	; (8004c10 <HAL_DAC_Start_DMA+0x14c>)
 8004b0a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004b1a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1U */
    switch(Alignment)
 8004b1c:	6a3b      	ldr	r3, [r7, #32]
 8004b1e:	2b04      	cmp	r3, #4
 8004b20:	d009      	beq.n	8004b36 <HAL_DAC_Start_DMA+0x72>
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d00c      	beq.n	8004b40 <HAL_DAC_Start_DMA+0x7c>
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d000      	beq.n	8004b2c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8004b2a:	e039      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	3308      	adds	r3, #8
 8004b32:	617b      	str	r3, [r7, #20]
        break;
 8004b34:	e034      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	330c      	adds	r3, #12
 8004b3c:	617b      	str	r3, [r7, #20]
        break;
 8004b3e:	e02f      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	3310      	adds	r3, #16
 8004b46:	617b      	str	r3, [r7, #20]
        break;
 8004b48:	e02a      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <HAL_DAC_Start_DMA+0x150>)
 8004b50:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	4a30      	ldr	r2, [pc, #192]	; (8004c18 <HAL_DAC_Start_DMA+0x154>)
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
       
    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	4a2f      	ldr	r2, [pc, #188]	; (8004c1c <HAL_DAC_Start_DMA+0x158>)
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
 
    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004b70:	601a      	str	r2, [r3, #0]
   
    /* Case of use of channel 2U */
    switch(Alignment)
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2b04      	cmp	r3, #4
 8004b76:	d009      	beq.n	8004b8c <HAL_DAC_Start_DMA+0xc8>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d00c      	beq.n	8004b96 <HAL_DAC_Start_DMA+0xd2>
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d000      	beq.n	8004b82 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8004b80:	e00e      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	617b      	str	r3, [r7, #20]
        break;
 8004b8a:	e009      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	3318      	adds	r3, #24
 8004b92:	617b      	str	r3, [r7, #20]
        break;
 8004b94:	e004      	b.n	8004ba0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	331c      	adds	r3, #28
 8004b9c:	617b      	str	r3, [r7, #20]
        break;
 8004b9e:	bf00      	nop
    }
  }
 
  /* Enable the DMA Channel */
  if(Channel == DAC_CHANNEL_1)
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004bb4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6898      	ldr	r0, [r3, #8]
 8004bba:	6879      	ldr	r1, [r7, #4]
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	697a      	ldr	r2, [r7, #20]
 8004bc0:	f000 f94c 	bl	8004e5c <HAL_DMA_Start_IT>
 8004bc4:	e00e      	b.n	8004be4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004bd4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	68d8      	ldr	r0, [r3, #12]
 8004bda:	6879      	ldr	r1, [r7, #4]
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	697a      	ldr	r2, [r7, #20]
 8004be0:	f000 f93c 	bl	8004e5c <HAL_DMA_Start_IT>
  }
 
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	715a      	strb	r2, [r3, #5]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	6819      	ldr	r1, [r3, #0]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	409a      	lsls	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	430a      	orrs	r2, r1
 8004bfc:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
 8004bfe:	2300      	movs	r3, #0
}
 8004c00:	4618      	mov	r0, r3
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	08004cf7 	.word	0x08004cf7
 8004c0c:	08004d19 	.word	0x08004d19
 8004c10:	08004d35 	.word	0x08004d35
 8004c14:	08004d63 	.word	0x08004d63
 8004c18:	08004d85 	.word	0x08004d85
 8004c1c:	08004da1 	.word	0x08004da1

08004c20 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	2300      	movs	r3, #0
 8004c32:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	795b      	ldrb	r3, [r3, #5]
 8004c38:	2b01      	cmp	r3, #1
 8004c3a:	d101      	bne.n	8004c40 <HAL_DAC_ConfigChannel+0x20>
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	e036      	b.n	8004cae <HAL_DAC_ConfigChannel+0x8e>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2201      	movs	r2, #1
 8004c44:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8004c54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4013      	ands	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6819      	ldr	r1, [r3, #0]
 8004c8e:	22c0      	movs	r2, #192	; 0xc0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43da      	mvns	r2, r3
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	400a      	ands	r2, r1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	371c      	adds	r7, #28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b083      	sub	sp, #12
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	b083      	sub	sp, #12
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b083      	sub	sp, #12
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004cea:	bf00      	nop
 8004cec:	370c      	adds	r7, #12
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr

08004cf6 <DAC_DMAConvCpltCh1>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b084      	sub	sp, #16
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff febf 	bl	8004a88 <HAL_DAC_ConvCpltCallbackCh1>
#endif 
  
  hdac->State= HAL_DAC_STATE_READY;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	711a      	strb	r2, [r3, #4]
}
 8004d10:	bf00      	nop
 8004d12:	3710      	adds	r7, #16
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <DAC_DMAHalfConvCpltCh1>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d24:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff feb8 	bl	8004a9c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif
}
 8004d2c:	bf00      	nop
 8004d2e:	3710      	adds	r7, #16
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d40:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	f043 0204 	orr.w	r2, r3, #4
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8004d4e:	68f8      	ldr	r0, [r7, #12]
 8004d50:	f7ff feae 	bl	8004ab0 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2201      	movs	r2, #1
 8004d58:	711a      	strb	r2, [r3, #4]
}
 8004d5a:	bf00      	nop
 8004d5c:	3710      	adds	r7, #16
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}

08004d62 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004d62:	b580      	push	{r7, lr}
 8004d64:	b084      	sub	sp, #16
 8004d66:	af00      	add	r7, sp, #0
 8004d68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f7ff ffa2 	bl	8004cba <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	711a      	strb	r2, [r3, #4]
}
 8004d7c:	bf00      	nop
 8004d7e:	3710      	adds	r7, #16
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	60fb      	str	r3, [r7, #12]

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f7ff ff9b 	bl	8004cce <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8004d98:	bf00      	nop
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	f043 0204 	orr.w	r2, r3, #4
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f7ff ff91 	bl	8004ce2 <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	711a      	strb	r2, [r3, #4]
}
 8004dc6:	bf00      	nop
 8004dc8:	3710      	adds	r7, #16
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bd80      	pop	{r7, pc}

08004dce <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8004dce:	b580      	push	{r7, lr}
 8004dd0:	b084      	sub	sp, #16
 8004dd2:	af00      	add	r7, sp, #0
 8004dd4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d101      	bne.n	8004de4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e037      	b.n	8004e54 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2202      	movs	r2, #2
 8004de8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004dfa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8004dfe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8004e08:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004e14:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004e20:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8004e36:	6878      	ldr	r0, [r7, #4]
 8004e38:	f000 f9b8 	bl	80051ac <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}  
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	607a      	str	r2, [r7, #4]
 8004e68:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e74:	2b01      	cmp	r3, #1
 8004e76:	d101      	bne.n	8004e7c <HAL_DMA_Start_IT+0x20>
 8004e78:	2302      	movs	r3, #2
 8004e7a:	e04a      	b.n	8004f12 <HAL_DMA_Start_IT+0xb6>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d13a      	bne.n	8004f04 <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2202      	movs	r2, #2
 8004e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f022 0201 	bic.w	r2, r2, #1
 8004eaa:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	687a      	ldr	r2, [r7, #4]
 8004eb0:	68b9      	ldr	r1, [r7, #8]
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 f94b 	bl	800514e <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d008      	beq.n	8004ed2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 020e 	orr.w	r2, r2, #14
 8004ece:	601a      	str	r2, [r3, #0]
 8004ed0:	e00f      	b.n	8004ef2 <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 020a 	orr.w	r2, r2, #10
 8004ee0:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0204 	bic.w	r2, r2, #4
 8004ef0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f042 0201 	orr.w	r2, r2, #1
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	e005      	b.n	8004f10 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	2200      	movs	r2, #0
 8004f08:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8004f0c:	2302      	movs	r3, #2
 8004f0e:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8004f10:	7dfb      	ldrb	r3, [r7, #23]
} 
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d008      	beq.n	8004f3e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2204      	movs	r2, #4
 8004f30:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2200      	movs	r2, #0
 8004f36:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e020      	b.n	8004f80 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f022 020e 	bic.w	r2, r2, #14
 8004f4c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0201 	bic.w	r2, r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f66:	2101      	movs	r1, #1
 8004f68:	fa01 f202 	lsl.w	r2, r1, r2
 8004f6c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2200      	movs	r2, #0
 8004f7a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f94:	2300      	movs	r3, #0
 8004f96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d005      	beq.n	8004fae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2204      	movs	r2, #4
 8004fa6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	73fb      	strb	r3, [r7, #15]
 8004fac:	e027      	b.n	8004ffe <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 020e 	bic.w	r2, r2, #14
 8004fbc:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f022 0201 	bic.w	r2, r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd6:	2101      	movs	r1, #1
 8004fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8004fdc:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d003      	beq.n	8004ffe <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	4798      	blx	r3
    } 
  }
  return status;
 8004ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}

08005008 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005024:	2204      	movs	r2, #4
 8005026:	409a      	lsls	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4013      	ands	r3, r2
 800502c:	2b00      	cmp	r3, #0
 800502e:	d024      	beq.n	800507a <HAL_DMA_IRQHandler+0x72>
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0304 	and.w	r3, r3, #4
 8005036:	2b00      	cmp	r3, #0
 8005038:	d01f      	beq.n	800507a <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0320 	and.w	r3, r3, #32
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f022 0204 	bic.w	r2, r2, #4
 8005056:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005060:	2104      	movs	r1, #4
 8005062:	fa01 f202 	lsl.w	r2, r1, r2
 8005066:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	2b00      	cmp	r3, #0
 800506e:	d06a      	beq.n	8005146 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8005078:	e065      	b.n	8005146 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507e:	2202      	movs	r2, #2
 8005080:	409a      	lsls	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	4013      	ands	r3, r2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d02c      	beq.n	80050e4 <HAL_DMA_IRQHandler+0xdc>
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d027      	beq.n	80050e4 <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10b      	bne.n	80050ba <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f022 020a 	bic.w	r2, r2, #10
 80050b0:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c2:	2102      	movs	r1, #2
 80050c4:	fa01 f202 	lsl.w	r2, r1, r2
 80050c8:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2200      	movs	r2, #0
 80050ce:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d035      	beq.n	8005146 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 80050e2:	e030      	b.n	8005146 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050e8:	2208      	movs	r2, #8
 80050ea:	409a      	lsls	r2, r3
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d028      	beq.n	8005146 <HAL_DMA_IRQHandler+0x13e>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d023      	beq.n	8005146 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f022 020e 	bic.w	r2, r2, #14
 800510c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005116:	2101      	movs	r1, #1
 8005118:	fa01 f202 	lsl.w	r2, r1, r2
 800511c:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2201      	movs	r2, #1
 8005122:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	2b00      	cmp	r3, #0
 800513a:	d004      	beq.n	8005146 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	4798      	blx	r3
    }
  }
}  
 8005144:	e7ff      	b.n	8005146 <HAL_DMA_IRQHandler+0x13e>
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}

0800514e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800514e:	b480      	push	{r7}
 8005150:	b085      	sub	sp, #20
 8005152:	af00      	add	r7, sp, #0
 8005154:	60f8      	str	r0, [r7, #12]
 8005156:	60b9      	str	r1, [r7, #8]
 8005158:	607a      	str	r2, [r7, #4]
 800515a:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005164:	2101      	movs	r1, #1
 8005166:	fa01 f202 	lsl.w	r2, r1, r2
 800516a:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	2b10      	cmp	r3, #16
 800517a:	d108      	bne.n	800518e <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800518c:	e007      	b.n	800519e <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68ba      	ldr	r2, [r7, #8]
 8005194:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	60da      	str	r2, [r3, #12]
}
 800519e:	bf00      	nop
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	461a      	mov	r2, r3
 80051ba:	4b14      	ldr	r3, [pc, #80]	; (800520c <DMA_CalcBaseAndBitshift+0x60>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d80f      	bhi.n	80051e0 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	461a      	mov	r2, r3
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <DMA_CalcBaseAndBitshift+0x64>)
 80051c8:	4413      	add	r3, r2
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <DMA_CalcBaseAndBitshift+0x68>)
 80051cc:	fba2 2303 	umull	r2, r3, r2, r3
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	009a      	lsls	r2, r3, #2
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	4a0f      	ldr	r2, [pc, #60]	; (8005218 <DMA_CalcBaseAndBitshift+0x6c>)
 80051dc:	63da      	str	r2, [r3, #60]	; 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 80051de:	e00e      	b.n	80051fe <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	461a      	mov	r2, r3
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <DMA_CalcBaseAndBitshift+0x70>)
 80051e8:	4413      	add	r3, r2
 80051ea:	4a0a      	ldr	r2, [pc, #40]	; (8005214 <DMA_CalcBaseAndBitshift+0x68>)
 80051ec:	fba2 2303 	umull	r2, r3, r2, r3
 80051f0:	091b      	lsrs	r3, r3, #4
 80051f2:	009a      	lsls	r2, r3, #2
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a09      	ldr	r2, [pc, #36]	; (8005220 <DMA_CalcBaseAndBitshift+0x74>)
 80051fc:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80051fe:	bf00      	nop
 8005200:	370c      	adds	r7, #12
 8005202:	46bd      	mov	sp, r7
 8005204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005208:	4770      	bx	lr
 800520a:	bf00      	nop
 800520c:	40020407 	.word	0x40020407
 8005210:	bffdfff8 	.word	0xbffdfff8
 8005214:	cccccccd 	.word	0xcccccccd
 8005218:	40020000 	.word	0x40020000
 800521c:	bffdfbf8 	.word	0xbffdfbf8
 8005220:	40020400 	.word	0x40020400

08005224 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005232:	e160      	b.n	80054f6 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	2101      	movs	r1, #1
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	fa01 f303 	lsl.w	r3, r1, r3
 8005240:	4013      	ands	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 8152 	beq.w	80054f0 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 0303 	and.w	r3, r3, #3
 8005254:	2b01      	cmp	r3, #1
 8005256:	d005      	beq.n	8005264 <HAL_GPIO_Init+0x40>
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f003 0303 	and.w	r3, r3, #3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d130      	bne.n	80052c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	2203      	movs	r2, #3
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	4013      	ands	r3, r2
 800527a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	68da      	ldr	r2, [r3, #12]
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	fa02 f303 	lsl.w	r3, r2, r3
 8005288:	693a      	ldr	r2, [r7, #16]
 800528a:	4313      	orrs	r3, r2
 800528c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800529a:	2201      	movs	r2, #1
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	4013      	ands	r3, r2
 80052a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	091b      	lsrs	r3, r3, #4
 80052b0:	f003 0201 	and.w	r2, r3, #1
 80052b4:	697b      	ldr	r3, [r7, #20]
 80052b6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	4313      	orrs	r3, r2
 80052be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d017      	beq.n	8005302 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	2203      	movs	r2, #3
 80052de:	fa02 f303 	lsl.w	r3, r2, r3
 80052e2:	43db      	mvns	r3, r3
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4013      	ands	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	689a      	ldr	r2, [r3, #8]
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	005b      	lsls	r3, r3, #1
 80052f2:	fa02 f303 	lsl.w	r3, r2, r3
 80052f6:	693a      	ldr	r2, [r7, #16]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d123      	bne.n	8005356 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	08da      	lsrs	r2, r3, #3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	3208      	adds	r2, #8
 8005316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 0307 	and.w	r3, r3, #7
 8005322:	009b      	lsls	r3, r3, #2
 8005324:	220f      	movs	r2, #15
 8005326:	fa02 f303 	lsl.w	r3, r2, r3
 800532a:	43db      	mvns	r3, r3
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4013      	ands	r3, r2
 8005330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	691a      	ldr	r2, [r3, #16]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	4313      	orrs	r3, r2
 8005346:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	08da      	lsrs	r2, r3, #3
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3208      	adds	r2, #8
 8005350:	6939      	ldr	r1, [r7, #16]
 8005352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	2203      	movs	r2, #3
 8005362:	fa02 f303 	lsl.w	r3, r2, r3
 8005366:	43db      	mvns	r3, r3
 8005368:	693a      	ldr	r2, [r7, #16]
 800536a:	4013      	ands	r3, r2
 800536c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0203 	and.w	r2, r3, #3
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	005b      	lsls	r3, r3, #1
 800537a:	fa02 f303 	lsl.w	r3, r2, r3
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	4313      	orrs	r3, r2
 8005382:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005392:	2b00      	cmp	r3, #0
 8005394:	f000 80ac 	beq.w	80054f0 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005398:	4b5e      	ldr	r3, [pc, #376]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	4a5d      	ldr	r2, [pc, #372]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 800539e:	f043 0301 	orr.w	r3, r3, #1
 80053a2:	6193      	str	r3, [r2, #24]
 80053a4:	4b5b      	ldr	r3, [pc, #364]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	60bb      	str	r3, [r7, #8]
 80053ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80053b0:	4a59      	ldr	r2, [pc, #356]	; (8005518 <HAL_GPIO_Init+0x2f4>)
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	089b      	lsrs	r3, r3, #2
 80053b6:	3302      	adds	r3, #2
 80053b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	009b      	lsls	r3, r3, #2
 80053c6:	220f      	movs	r2, #15
 80053c8:	fa02 f303 	lsl.w	r3, r2, r3
 80053cc:	43db      	mvns	r3, r3
 80053ce:	693a      	ldr	r2, [r7, #16]
 80053d0:	4013      	ands	r3, r2
 80053d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80053da:	d025      	beq.n	8005428 <HAL_GPIO_Init+0x204>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a4f      	ldr	r2, [pc, #316]	; (800551c <HAL_GPIO_Init+0x2f8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d01f      	beq.n	8005424 <HAL_GPIO_Init+0x200>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a4e      	ldr	r2, [pc, #312]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d019      	beq.n	8005420 <HAL_GPIO_Init+0x1fc>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a4d      	ldr	r2, [pc, #308]	; (8005524 <HAL_GPIO_Init+0x300>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d013      	beq.n	800541c <HAL_GPIO_Init+0x1f8>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a4c      	ldr	r2, [pc, #304]	; (8005528 <HAL_GPIO_Init+0x304>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d00d      	beq.n	8005418 <HAL_GPIO_Init+0x1f4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a4b      	ldr	r2, [pc, #300]	; (800552c <HAL_GPIO_Init+0x308>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d007      	beq.n	8005414 <HAL_GPIO_Init+0x1f0>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a4a      	ldr	r2, [pc, #296]	; (8005530 <HAL_GPIO_Init+0x30c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d101      	bne.n	8005410 <HAL_GPIO_Init+0x1ec>
 800540c:	2306      	movs	r3, #6
 800540e:	e00c      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005410:	2307      	movs	r3, #7
 8005412:	e00a      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005414:	2305      	movs	r3, #5
 8005416:	e008      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005418:	2304      	movs	r3, #4
 800541a:	e006      	b.n	800542a <HAL_GPIO_Init+0x206>
 800541c:	2303      	movs	r3, #3
 800541e:	e004      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005420:	2302      	movs	r3, #2
 8005422:	e002      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005424:	2301      	movs	r3, #1
 8005426:	e000      	b.n	800542a <HAL_GPIO_Init+0x206>
 8005428:	2300      	movs	r3, #0
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	f002 0203 	and.w	r2, r2, #3
 8005430:	0092      	lsls	r2, r2, #2
 8005432:	4093      	lsls	r3, r2
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	4313      	orrs	r3, r2
 8005438:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800543a:	4937      	ldr	r1, [pc, #220]	; (8005518 <HAL_GPIO_Init+0x2f4>)
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	089b      	lsrs	r3, r3, #2
 8005440:	3302      	adds	r3, #2
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005448:	4b3a      	ldr	r3, [pc, #232]	; (8005534 <HAL_GPIO_Init+0x310>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	43db      	mvns	r3, r3
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005460:	2b00      	cmp	r3, #0
 8005462:	d003      	beq.n	800546c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	4313      	orrs	r3, r2
 800546a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800546c:	4a31      	ldr	r2, [pc, #196]	; (8005534 <HAL_GPIO_Init+0x310>)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005472:	4b30      	ldr	r3, [pc, #192]	; (8005534 <HAL_GPIO_Init+0x310>)
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	43db      	mvns	r3, r3
 800547c:	693a      	ldr	r2, [r7, #16]
 800547e:	4013      	ands	r3, r2
 8005480:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 800548e:	693a      	ldr	r2, [r7, #16]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005496:	4a27      	ldr	r2, [pc, #156]	; (8005534 <HAL_GPIO_Init+0x310>)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <HAL_GPIO_Init+0x310>)
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	43db      	mvns	r3, r3
 80054a6:	693a      	ldr	r2, [r7, #16]
 80054a8:	4013      	ands	r3, r2
 80054aa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	685b      	ldr	r3, [r3, #4]
 80054b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d003      	beq.n	80054c0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4313      	orrs	r3, r2
 80054be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80054c0:	4a1c      	ldr	r2, [pc, #112]	; (8005534 <HAL_GPIO_Init+0x310>)
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054c6:	4b1b      	ldr	r3, [pc, #108]	; (8005534 <HAL_GPIO_Init+0x310>)
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	43db      	mvns	r3, r3
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	4013      	ands	r3, r2
 80054d4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d003      	beq.n	80054ea <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 80054e2:	693a      	ldr	r2, [r7, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80054ea:	4a12      	ldr	r2, [pc, #72]	; (8005534 <HAL_GPIO_Init+0x310>)
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	3301      	adds	r3, #1
 80054f4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	681a      	ldr	r2, [r3, #0]
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	f47f ae97 	bne.w	8005234 <HAL_GPIO_Init+0x10>
  }
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr
 8005512:	bf00      	nop
 8005514:	40021000 	.word	0x40021000
 8005518:	40010000 	.word	0x40010000
 800551c:	48000400 	.word	0x48000400
 8005520:	48000800 	.word	0x48000800
 8005524:	48000c00 	.word	0x48000c00
 8005528:	48001000 	.word	0x48001000
 800552c:	48001400 	.word	0x48001400
 8005530:	48001800 	.word	0x48001800
 8005534:	40010400 	.word	0x40010400

08005538 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	691a      	ldr	r2, [r3, #16]
 8005548:	887b      	ldrh	r3, [r7, #2]
 800554a:	4013      	ands	r3, r2
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
 8005554:	e001      	b.n	800555a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3714      	adds	r7, #20
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005568:	b480      	push	{r7}
 800556a:	b083      	sub	sp, #12
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	460b      	mov	r3, r1
 8005572:	807b      	strh	r3, [r7, #2]
 8005574:	4613      	mov	r3, r2
 8005576:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005578:	787b      	ldrb	r3, [r7, #1]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800557e:	887a      	ldrh	r2, [r7, #2]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005584:	e002      	b.n	800558c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005586:	887a      	ldrh	r2, [r7, #2]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005598:	b480      	push	{r7}
 800559a:	b085      	sub	sp, #20
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	460b      	mov	r3, r1
 80055a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80055aa:	887a      	ldrh	r2, [r7, #2]
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4013      	ands	r3, r2
 80055b0:	041a      	lsls	r2, r3, #16
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	43d9      	mvns	r1, r3
 80055b6:	887b      	ldrh	r3, [r7, #2]
 80055b8:	400b      	ands	r3, r1
 80055ba:	431a      	orrs	r2, r3
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	619a      	str	r2, [r3, #24]
}
 80055c0:	bf00      	nop
 80055c2:	3714      	adds	r7, #20
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	4603      	mov	r3, r0
 80055d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80055d6:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055d8:	695a      	ldr	r2, [r3, #20]
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	4013      	ands	r3, r2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d006      	beq.n	80055f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055e2:	4a05      	ldr	r2, [pc, #20]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055e4:	88fb      	ldrh	r3, [r7, #6]
 80055e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055e8:	88fb      	ldrh	r3, [r7, #6]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7fc fb4a 	bl	8001c84 <HAL_GPIO_EXTI_Callback>
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40010400 	.word	0x40010400

080055fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8005602:	af00      	add	r7, sp, #0
 8005604:	1d3b      	adds	r3, r7, #4
 8005606:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d102      	bne.n	8005616 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	f000 bf01 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005616:	1d3b      	adds	r3, r7, #4
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	f000 8160 	beq.w	80058e6 <HAL_RCC_OscConfig+0x2ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8005626:	4bae      	ldr	r3, [pc, #696]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	2b04      	cmp	r3, #4
 8005630:	d00c      	beq.n	800564c <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005632:	4bab      	ldr	r3, [pc, #684]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b08      	cmp	r3, #8
 800563c:	d159      	bne.n	80056f2 <HAL_RCC_OscConfig+0xf6>
 800563e:	4ba8      	ldr	r3, [pc, #672]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005646:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800564a:	d152      	bne.n	80056f2 <HAL_RCC_OscConfig+0xf6>
 800564c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005650:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005654:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8005658:	fa93 f3a3 	rbit	r3, r3
 800565c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005660:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005664:	fab3 f383 	clz	r3, r3
 8005668:	b2db      	uxtb	r3, r3
 800566a:	095b      	lsrs	r3, r3, #5
 800566c:	b2db      	uxtb	r3, r3
 800566e:	f043 0301 	orr.w	r3, r3, #1
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b01      	cmp	r3, #1
 8005676:	d102      	bne.n	800567e <HAL_RCC_OscConfig+0x82>
 8005678:	4b99      	ldr	r3, [pc, #612]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	e015      	b.n	80056aa <HAL_RCC_OscConfig+0xae>
 800567e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005682:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005686:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 800568a:	fa93 f3a3 	rbit	r3, r3
 800568e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8005692:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005696:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800569a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800569e:	fa93 f3a3 	rbit	r3, r3
 80056a2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80056a6:	4b8e      	ldr	r3, [pc, #568]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 80056a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80056ae:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80056b2:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80056b6:	fa92 f2a2 	rbit	r2, r2
 80056ba:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 80056be:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80056c2:	fab2 f282 	clz	r2, r2
 80056c6:	b2d2      	uxtb	r2, r2
 80056c8:	f042 0220 	orr.w	r2, r2, #32
 80056cc:	b2d2      	uxtb	r2, r2
 80056ce:	f002 021f 	and.w	r2, r2, #31
 80056d2:	2101      	movs	r1, #1
 80056d4:	fa01 f202 	lsl.w	r2, r1, r2
 80056d8:	4013      	ands	r3, r2
 80056da:	2b00      	cmp	r3, #0
 80056dc:	f000 8102 	beq.w	80058e4 <HAL_RCC_OscConfig+0x2e8>
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f040 80fc 	bne.w	80058e4 <HAL_RCC_OscConfig+0x2e8>
      {
        return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f000 be93 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056f2:	1d3b      	adds	r3, r7, #4
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d106      	bne.n	800570c <HAL_RCC_OscConfig+0x110>
 80056fe:	4b78      	ldr	r3, [pc, #480]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a77      	ldr	r2, [pc, #476]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005708:	6013      	str	r3, [r2, #0]
 800570a:	e030      	b.n	800576e <HAL_RCC_OscConfig+0x172>
 800570c:	1d3b      	adds	r3, r7, #4
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d10c      	bne.n	8005730 <HAL_RCC_OscConfig+0x134>
 8005716:	4b72      	ldr	r3, [pc, #456]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a71      	ldr	r2, [pc, #452]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800571c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005720:	6013      	str	r3, [r2, #0]
 8005722:	4b6f      	ldr	r3, [pc, #444]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a6e      	ldr	r2, [pc, #440]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005728:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800572c:	6013      	str	r3, [r2, #0]
 800572e:	e01e      	b.n	800576e <HAL_RCC_OscConfig+0x172>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800573a:	d10c      	bne.n	8005756 <HAL_RCC_OscConfig+0x15a>
 800573c:	4b68      	ldr	r3, [pc, #416]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a67      	ldr	r2, [pc, #412]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005742:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005746:	6013      	str	r3, [r2, #0]
 8005748:	4b65      	ldr	r3, [pc, #404]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800574e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005752:	6013      	str	r3, [r2, #0]
 8005754:	e00b      	b.n	800576e <HAL_RCC_OscConfig+0x172>
 8005756:	4b62      	ldr	r3, [pc, #392]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a61      	ldr	r2, [pc, #388]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800575c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005760:	6013      	str	r3, [r2, #0]
 8005762:	4b5f      	ldr	r3, [pc, #380]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a5e      	ldr	r2, [pc, #376]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 8005768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576c:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800576e:	1d3b      	adds	r3, r7, #4
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d059      	beq.n	800582c <HAL_RCC_OscConfig+0x230>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005778:	f7fd fe22 	bl	80033c0 <HAL_GetTick>
 800577c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005780:	e00a      	b.n	8005798 <HAL_RCC_OscConfig+0x19c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005782:	f7fd fe1d 	bl	80033c0 <HAL_GetTick>
 8005786:	4602      	mov	r2, r0
 8005788:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b64      	cmp	r3, #100	; 0x64
 8005790:	d902      	bls.n	8005798 <HAL_RCC_OscConfig+0x19c>
          {
            return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	f000 be40 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005798:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800579c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057a0:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80057a4:	fa93 f3a3 	rbit	r3, r3
 80057a8:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 80057ac:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b0:	fab3 f383 	clz	r3, r3
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	095b      	lsrs	r3, r3, #5
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d102      	bne.n	80057ca <HAL_RCC_OscConfig+0x1ce>
 80057c4:	4b46      	ldr	r3, [pc, #280]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	e015      	b.n	80057f6 <HAL_RCC_OscConfig+0x1fa>
 80057ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057ce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80057d2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80057d6:	fa93 f3a3 	rbit	r3, r3
 80057da:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80057de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80057e2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80057e6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80057ea:	fa93 f3a3 	rbit	r3, r3
 80057ee:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80057f2:	4b3b      	ldr	r3, [pc, #236]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80057fa:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80057fe:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8005802:	fa92 f2a2 	rbit	r2, r2
 8005806:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 800580a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 800580e:	fab2 f282 	clz	r2, r2
 8005812:	b2d2      	uxtb	r2, r2
 8005814:	f042 0220 	orr.w	r2, r2, #32
 8005818:	b2d2      	uxtb	r2, r2
 800581a:	f002 021f 	and.w	r2, r2, #31
 800581e:	2101      	movs	r1, #1
 8005820:	fa01 f202 	lsl.w	r2, r1, r2
 8005824:	4013      	ands	r3, r2
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0ab      	beq.n	8005782 <HAL_RCC_OscConfig+0x186>
 800582a:	e05c      	b.n	80058e6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fd fdc8 	bl	80033c0 <HAL_GetTick>
 8005830:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005834:	e00a      	b.n	800584c <HAL_RCC_OscConfig+0x250>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005836:	f7fd fdc3 	bl	80033c0 <HAL_GetTick>
 800583a:	4602      	mov	r2, r0
 800583c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	2b64      	cmp	r3, #100	; 0x64
 8005844:	d902      	bls.n	800584c <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005846:	2303      	movs	r3, #3
 8005848:	f000 bde6 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
 800584c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005850:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005854:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8005858:	fa93 f3a3 	rbit	r3, r3
 800585c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8005860:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005864:	fab3 f383 	clz	r3, r3
 8005868:	b2db      	uxtb	r3, r3
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	b2db      	uxtb	r3, r3
 800586e:	f043 0301 	orr.w	r3, r3, #1
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2b01      	cmp	r3, #1
 8005876:	d102      	bne.n	800587e <HAL_RCC_OscConfig+0x282>
 8005878:	4b19      	ldr	r3, [pc, #100]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	e015      	b.n	80058aa <HAL_RCC_OscConfig+0x2ae>
 800587e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005882:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005886:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800588a:	fa93 f3a3 	rbit	r3, r3
 800588e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8005892:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005896:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800589a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800589e:	fa93 f3a3 	rbit	r3, r3
 80058a2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80058a6:	4b0e      	ldr	r3, [pc, #56]	; (80058e0 <HAL_RCC_OscConfig+0x2e4>)
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80058ae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80058b2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80058b6:	fa92 f2a2 	rbit	r2, r2
 80058ba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 80058be:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80058c2:	fab2 f282 	clz	r2, r2
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	f042 0220 	orr.w	r2, r2, #32
 80058cc:	b2d2      	uxtb	r2, r2
 80058ce:	f002 021f 	and.w	r2, r2, #31
 80058d2:	2101      	movs	r1, #1
 80058d4:	fa01 f202 	lsl.w	r2, r1, r2
 80058d8:	4013      	ands	r3, r2
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1ab      	bne.n	8005836 <HAL_RCC_OscConfig+0x23a>
 80058de:	e002      	b.n	80058e6 <HAL_RCC_OscConfig+0x2ea>
 80058e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058e6:	1d3b      	adds	r3, r7, #4
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0302 	and.w	r3, r3, #2
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	f000 8170 	beq.w	8005bd6 <HAL_RCC_OscConfig+0x5da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80058f6:	4bd0      	ldr	r3, [pc, #832]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f003 030c 	and.w	r3, r3, #12
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00c      	beq.n	800591c <HAL_RCC_OscConfig+0x320>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8005902:	4bcd      	ldr	r3, [pc, #820]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b08      	cmp	r3, #8
 800590c:	d16d      	bne.n	80059ea <HAL_RCC_OscConfig+0x3ee>
 800590e:	4bca      	ldr	r3, [pc, #808]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8005916:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800591a:	d166      	bne.n	80059ea <HAL_RCC_OscConfig+0x3ee>
 800591c:	2302      	movs	r3, #2
 800591e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005922:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8005926:	fa93 f3a3 	rbit	r3, r3
 800592a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800592e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005932:	fab3 f383 	clz	r3, r3
 8005936:	b2db      	uxtb	r3, r3
 8005938:	095b      	lsrs	r3, r3, #5
 800593a:	b2db      	uxtb	r3, r3
 800593c:	f043 0301 	orr.w	r3, r3, #1
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b01      	cmp	r3, #1
 8005944:	d102      	bne.n	800594c <HAL_RCC_OscConfig+0x350>
 8005946:	4bbc      	ldr	r3, [pc, #752]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	e013      	b.n	8005974 <HAL_RCC_OscConfig+0x378>
 800594c:	2302      	movs	r3, #2
 800594e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005952:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8005956:	fa93 f3a3 	rbit	r3, r3
 800595a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800595e:	2302      	movs	r3, #2
 8005960:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8005964:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8005968:	fa93 f3a3 	rbit	r3, r3
 800596c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8005970:	4bb1      	ldr	r3, [pc, #708]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	2202      	movs	r2, #2
 8005976:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800597a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800597e:	fa92 f2a2 	rbit	r2, r2
 8005982:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8005986:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800598a:	fab2 f282 	clz	r2, r2
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	f042 0220 	orr.w	r2, r2, #32
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	f002 021f 	and.w	r2, r2, #31
 800599a:	2101      	movs	r1, #1
 800599c:	fa01 f202 	lsl.w	r2, r1, r2
 80059a0:	4013      	ands	r3, r2
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d007      	beq.n	80059b6 <HAL_RCC_OscConfig+0x3ba>
 80059a6:	1d3b      	adds	r3, r7, #4
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d002      	beq.n	80059b6 <HAL_RCC_OscConfig+0x3ba>
      {
        return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	f000 bd31 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059b6:	4ba0      	ldr	r3, [pc, #640]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	21f8      	movs	r1, #248	; 0xf8
 80059c6:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059ca:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80059ce:	fa91 f1a1 	rbit	r1, r1
 80059d2:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80059d6:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80059da:	fab1 f181 	clz	r1, r1
 80059de:	b2c9      	uxtb	r1, r1
 80059e0:	408b      	lsls	r3, r1
 80059e2:	4995      	ldr	r1, [pc, #596]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80059e8:	e0f5      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80059ea:	1d3b      	adds	r3, r7, #4
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	68db      	ldr	r3, [r3, #12]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	f000 8085 	beq.w	8005b00 <HAL_RCC_OscConfig+0x504>
 80059f6:	2301      	movs	r3, #1
 80059f8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80059fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8005a00:	fa93 f3a3 	rbit	r3, r3
 8005a04:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8005a08:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005a0c:	fab3 f383 	clz	r3, r3
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005a16:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	461a      	mov	r2, r3
 8005a1e:	2301      	movs	r3, #1
 8005a20:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a22:	f7fd fccd 	bl	80033c0 <HAL_GetTick>
 8005a26:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a2a:	e00a      	b.n	8005a42 <HAL_RCC_OscConfig+0x446>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005a2c:	f7fd fcc8 	bl	80033c0 <HAL_GetTick>
 8005a30:	4602      	mov	r2, r0
 8005a32:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d902      	bls.n	8005a42 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	f000 bceb 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005a42:	2302      	movs	r3, #2
 8005a44:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a48:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8005a4c:	fa93 f3a3 	rbit	r3, r3
 8005a50:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8005a54:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a58:	fab3 f383 	clz	r3, r3
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	095b      	lsrs	r3, r3, #5
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f043 0301 	orr.w	r3, r3, #1
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d102      	bne.n	8005a72 <HAL_RCC_OscConfig+0x476>
 8005a6c:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	e013      	b.n	8005a9a <HAL_RCC_OscConfig+0x49e>
 8005a72:	2302      	movs	r3, #2
 8005a74:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005a78:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8005a7c:	fa93 f3a3 	rbit	r3, r3
 8005a80:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8005a84:	2302      	movs	r3, #2
 8005a86:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8005a8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8005a8e:	fa93 f3a3 	rbit	r3, r3
 8005a92:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005a96:	4b68      	ldr	r3, [pc, #416]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005aa0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8005aa4:	fa92 f2a2 	rbit	r2, r2
 8005aa8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8005aac:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8005ab0:	fab2 f282 	clz	r2, r2
 8005ab4:	b2d2      	uxtb	r2, r2
 8005ab6:	f042 0220 	orr.w	r2, r2, #32
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	f002 021f 	and.w	r2, r2, #31
 8005ac0:	2101      	movs	r1, #1
 8005ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8005ac6:	4013      	ands	r3, r2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0af      	beq.n	8005a2c <HAL_RCC_OscConfig+0x430>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b5a      	ldr	r3, [pc, #360]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	21f8      	movs	r1, #248	; 0xf8
 8005adc:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ae0:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 8005ae4:	fa91 f1a1 	rbit	r1, r1
 8005ae8:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8005aec:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005af0:	fab1 f181 	clz	r1, r1
 8005af4:	b2c9      	uxtb	r1, r1
 8005af6:	408b      	lsls	r3, r1
 8005af8:	494f      	ldr	r1, [pc, #316]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	600b      	str	r3, [r1, #0]
 8005afe:	e06a      	b.n	8005bd6 <HAL_RCC_OscConfig+0x5da>
 8005b00:	2301      	movs	r3, #1
 8005b02:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b06:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8005b0a:	fa93 f3a3 	rbit	r3, r3
 8005b0e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8005b12:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005b16:	fab3 f383 	clz	r3, r3
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8005b20:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	461a      	mov	r2, r3
 8005b28:	2300      	movs	r3, #0
 8005b2a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2c:	f7fd fc48 	bl	80033c0 <HAL_GetTick>
 8005b30:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b34:	e00a      	b.n	8005b4c <HAL_RCC_OscConfig+0x550>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b36:	f7fd fc43 	bl	80033c0 <HAL_GetTick>
 8005b3a:	4602      	mov	r2, r0
 8005b3c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d902      	bls.n	8005b4c <HAL_RCC_OscConfig+0x550>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	f000 bc66 	b.w	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b52:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8005b56:	fa93 f3a3 	rbit	r3, r3
 8005b5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8005b5e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b62:	fab3 f383 	clz	r3, r3
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	f043 0301 	orr.w	r3, r3, #1
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d102      	bne.n	8005b7c <HAL_RCC_OscConfig+0x580>
 8005b76:	4b30      	ldr	r3, [pc, #192]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	e013      	b.n	8005ba4 <HAL_RCC_OscConfig+0x5a8>
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b86:	fa93 f3a3 	rbit	r3, r3
 8005b8a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005b8e:	2302      	movs	r3, #2
 8005b90:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005b94:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005b98:	fa93 f3a3 	rbit	r3, r3
 8005b9c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005ba0:	4b25      	ldr	r3, [pc, #148]	; (8005c38 <HAL_RCC_OscConfig+0x63c>)
 8005ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba4:	2202      	movs	r2, #2
 8005ba6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8005baa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005bae:	fa92 f2a2 	rbit	r2, r2
 8005bb2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8005bb6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8005bba:	fab2 f282 	clz	r2, r2
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	f042 0220 	orr.w	r2, r2, #32
 8005bc4:	b2d2      	uxtb	r2, r2
 8005bc6:	f002 021f 	and.w	r2, r2, #31
 8005bca:	2101      	movs	r1, #1
 8005bcc:	fa01 f202 	lsl.w	r2, r1, r2
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1af      	bne.n	8005b36 <HAL_RCC_OscConfig+0x53a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bd6:	1d3b      	adds	r3, r7, #4
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0308 	and.w	r3, r3, #8
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f000 80da 	beq.w	8005d9a <HAL_RCC_OscConfig+0x79e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005be6:	1d3b      	adds	r3, r7, #4
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d069      	beq.n	8005cc4 <HAL_RCC_OscConfig+0x6c8>
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bfa:	fa93 f3a3 	rbit	r3, r3
 8005bfe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 8005c02:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c06:	fab3 f383 	clz	r3, r3
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_OscConfig+0x640>)
 8005c10:	4413      	add	r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	461a      	mov	r2, r3
 8005c16:	2301      	movs	r3, #1
 8005c18:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c1a:	f7fd fbd1 	bl	80033c0 <HAL_GetTick>
 8005c1e:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c22:	e00d      	b.n	8005c40 <HAL_RCC_OscConfig+0x644>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c24:	f7fd fbcc 	bl	80033c0 <HAL_GetTick>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	2b02      	cmp	r3, #2
 8005c32:	d905      	bls.n	8005c40 <HAL_RCC_OscConfig+0x644>
        {
          return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e3ef      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	10908120 	.word	0x10908120
 8005c40:	2302      	movs	r3, #2
 8005c42:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005c4a:	fa93 f2a3 	rbit	r2, r3
 8005c4e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8005c52:	601a      	str	r2, [r3, #0]
 8005c54:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005c58:	2202      	movs	r2, #2
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	fa93 f2a3 	rbit	r2, r3
 8005c66:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8005c6a:	601a      	str	r2, [r3, #0]
 8005c6c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c70:	2202      	movs	r2, #2
 8005c72:	601a      	str	r2, [r3, #0]
 8005c74:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	fa93 f2a3 	rbit	r2, r3
 8005c7e:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8005c82:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c84:	4ba4      	ldr	r3, [pc, #656]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005c86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c88:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	6019      	str	r1, [r3, #0]
 8005c90:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	fa93 f1a3 	rbit	r1, r3
 8005c9a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005c9e:	6019      	str	r1, [r3, #0]
  return result;
 8005ca0:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	fab3 f383 	clz	r3, r3
 8005caa:	b2db      	uxtb	r3, r3
 8005cac:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	f003 031f 	and.w	r3, r3, #31
 8005cb6:	2101      	movs	r1, #1
 8005cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d0b0      	beq.n	8005c24 <HAL_RCC_OscConfig+0x628>
 8005cc2:	e06a      	b.n	8005d9a <HAL_RCC_OscConfig+0x79e>
 8005cc4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005cc8:	2201      	movs	r2, #1
 8005cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ccc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	fa93 f2a3 	rbit	r2, r3
 8005cd6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005cda:	601a      	str	r2, [r3, #0]
  return result;
 8005cdc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8005ce0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ce2:	fab3 f383 	clz	r3, r3
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	461a      	mov	r2, r3
 8005cea:	4b8c      	ldr	r3, [pc, #560]	; (8005f1c <HAL_RCC_OscConfig+0x920>)
 8005cec:	4413      	add	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005cf6:	f7fd fb63 	bl	80033c0 <HAL_GetTick>
 8005cfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005cfe:	e009      	b.n	8005d14 <HAL_RCC_OscConfig+0x718>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d00:	f7fd fb5e 	bl	80033c0 <HAL_GetTick>
 8005d04:	4602      	mov	r2, r0
 8005d06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005d0a:	1ad3      	subs	r3, r2, r3
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d901      	bls.n	8005d14 <HAL_RCC_OscConfig+0x718>
        {
          return HAL_TIMEOUT;
 8005d10:	2303      	movs	r3, #3
 8005d12:	e381      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005d14:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d18:	2202      	movs	r2, #2
 8005d1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d1c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	fa93 f2a3 	rbit	r2, r3
 8005d26:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d30:	2202      	movs	r2, #2
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	fa93 f2a3 	rbit	r2, r3
 8005d3e:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d48:	2202      	movs	r2, #2
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	fa93 f2a3 	rbit	r2, r3
 8005d56:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8005d5a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d5c:	4b6e      	ldr	r3, [pc, #440]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d60:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d64:	2102      	movs	r1, #2
 8005d66:	6019      	str	r1, [r3, #0]
 8005d68:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	fa93 f1a3 	rbit	r1, r3
 8005d72:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d76:	6019      	str	r1, [r3, #0]
  return result;
 8005d78:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	fab3 f383 	clz	r3, r3
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2101      	movs	r1, #1
 8005d90:	fa01 f303 	lsl.w	r3, r1, r3
 8005d94:	4013      	ands	r3, r2
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1b2      	bne.n	8005d00 <HAL_RCC_OscConfig+0x704>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005d9a:	1d3b      	adds	r3, r7, #4
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0304 	and.w	r3, r3, #4
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	f000 8157 	beq.w	8006058 <HAL_RCC_OscConfig+0xa5c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005db0:	4b59      	ldr	r3, [pc, #356]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005db2:	69db      	ldr	r3, [r3, #28]
 8005db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d112      	bne.n	8005de2 <HAL_RCC_OscConfig+0x7e6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b56      	ldr	r3, [pc, #344]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	4a55      	ldr	r2, [pc, #340]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	61d3      	str	r3, [r2, #28]
 8005dc8:	4b53      	ldr	r3, [pc, #332]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	f107 030c 	add.w	r3, r7, #12
 8005dda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de2:	4b4f      	ldr	r3, [pc, #316]	; (8005f20 <HAL_RCC_OscConfig+0x924>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d11a      	bne.n	8005e24 <HAL_RCC_OscConfig+0x828>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005dee:	4b4c      	ldr	r3, [pc, #304]	; (8005f20 <HAL_RCC_OscConfig+0x924>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a4b      	ldr	r2, [pc, #300]	; (8005f20 <HAL_RCC_OscConfig+0x924>)
 8005df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfa:	f7fd fae1 	bl	80033c0 <HAL_GetTick>
 8005dfe:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e02:	e009      	b.n	8005e18 <HAL_RCC_OscConfig+0x81c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e04:	f7fd fadc 	bl	80033c0 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b64      	cmp	r3, #100	; 0x64
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x81c>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e2ff      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b41      	ldr	r3, [pc, #260]	; (8005f20 <HAL_RCC_OscConfig+0x924>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0ef      	beq.n	8005e04 <HAL_RCC_OscConfig+0x808>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e24:	1d3b      	adds	r3, r7, #4
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d106      	bne.n	8005e3c <HAL_RCC_OscConfig+0x840>
 8005e2e:	4b3a      	ldr	r3, [pc, #232]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	4a39      	ldr	r2, [pc, #228]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e34:	f043 0301 	orr.w	r3, r3, #1
 8005e38:	6213      	str	r3, [r2, #32]
 8005e3a:	e02f      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a0>
 8005e3c:	1d3b      	adds	r3, r7, #4
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d10c      	bne.n	8005e60 <HAL_RCC_OscConfig+0x864>
 8005e46:	4b34      	ldr	r3, [pc, #208]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e48:	6a1b      	ldr	r3, [r3, #32]
 8005e4a:	4a33      	ldr	r2, [pc, #204]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e4c:	f023 0301 	bic.w	r3, r3, #1
 8005e50:	6213      	str	r3, [r2, #32]
 8005e52:	4b31      	ldr	r3, [pc, #196]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e54:	6a1b      	ldr	r3, [r3, #32]
 8005e56:	4a30      	ldr	r2, [pc, #192]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e58:	f023 0304 	bic.w	r3, r3, #4
 8005e5c:	6213      	str	r3, [r2, #32]
 8005e5e:	e01d      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a0>
 8005e60:	1d3b      	adds	r3, r7, #4
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	2b05      	cmp	r3, #5
 8005e68:	d10c      	bne.n	8005e84 <HAL_RCC_OscConfig+0x888>
 8005e6a:	4b2b      	ldr	r3, [pc, #172]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	4a2a      	ldr	r2, [pc, #168]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e70:	f043 0304 	orr.w	r3, r3, #4
 8005e74:	6213      	str	r3, [r2, #32]
 8005e76:	4b28      	ldr	r3, [pc, #160]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e78:	6a1b      	ldr	r3, [r3, #32]
 8005e7a:	4a27      	ldr	r2, [pc, #156]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e7c:	f043 0301 	orr.w	r3, r3, #1
 8005e80:	6213      	str	r3, [r2, #32]
 8005e82:	e00b      	b.n	8005e9c <HAL_RCC_OscConfig+0x8a0>
 8005e84:	4b24      	ldr	r3, [pc, #144]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	4a23      	ldr	r2, [pc, #140]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e8a:	f023 0301 	bic.w	r3, r3, #1
 8005e8e:	6213      	str	r3, [r2, #32]
 8005e90:	4b21      	ldr	r3, [pc, #132]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e92:	6a1b      	ldr	r3, [r3, #32]
 8005e94:	4a20      	ldr	r2, [pc, #128]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005e96:	f023 0304 	bic.w	r3, r3, #4
 8005e9a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005e9c:	1d3b      	adds	r3, r7, #4
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d06a      	beq.n	8005f7c <HAL_RCC_OscConfig+0x980>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea6:	f7fd fa8b 	bl	80033c0 <HAL_GetTick>
 8005eaa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x8cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f7fd fa86 	bl	80033c0 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005eba:	1ad3      	subs	r3, r2, r3
 8005ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d901      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x8cc>
        {
          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e2a7      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005ec8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ecc:	2202      	movs	r2, #2
 8005ece:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	fa93 f2a3 	rbit	r2, r3
 8005eda:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8005ede:	601a      	str	r2, [r3, #0]
 8005ee0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005ee4:	2202      	movs	r2, #2
 8005ee6:	601a      	str	r2, [r3, #0]
 8005ee8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	fa93 f2a3 	rbit	r2, r3
 8005ef2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005ef6:	601a      	str	r2, [r3, #0]
  return result;
 8005ef8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8005efc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005efe:	fab3 f383 	clz	r3, r3
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f043 0302 	orr.w	r3, r3, #2
 8005f0c:	b2db      	uxtb	r3, r3
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d108      	bne.n	8005f24 <HAL_RCC_OscConfig+0x928>
 8005f12:	4b01      	ldr	r3, [pc, #4]	; (8005f18 <HAL_RCC_OscConfig+0x91c>)
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	e013      	b.n	8005f40 <HAL_RCC_OscConfig+0x944>
 8005f18:	40021000 	.word	0x40021000
 8005f1c:	10908120 	.word	0x10908120
 8005f20:	40007000 	.word	0x40007000
 8005f24:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f28:	2202      	movs	r2, #2
 8005f2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f2c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	fa93 f2a3 	rbit	r2, r3
 8005f36:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	4bc0      	ldr	r3, [pc, #768]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8005f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f40:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f44:	2102      	movs	r1, #2
 8005f46:	6011      	str	r1, [r2, #0]
 8005f48:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8005f4c:	6812      	ldr	r2, [r2, #0]
 8005f4e:	fa92 f1a2 	rbit	r1, r2
 8005f52:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f56:	6011      	str	r1, [r2, #0]
  return result;
 8005f58:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8005f5c:	6812      	ldr	r2, [r2, #0]
 8005f5e:	fab2 f282 	clz	r2, r2
 8005f62:	b2d2      	uxtb	r2, r2
 8005f64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f68:	b2d2      	uxtb	r2, r2
 8005f6a:	f002 021f 	and.w	r2, r2, #31
 8005f6e:	2101      	movs	r1, #1
 8005f70:	fa01 f202 	lsl.w	r2, r1, r2
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d09a      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x8b4>
 8005f7a:	e063      	b.n	8006044 <HAL_RCC_OscConfig+0xa48>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f7c:	f7fd fa20 	bl	80033c0 <HAL_GetTick>
 8005f80:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005f84:	e00b      	b.n	8005f9e <HAL_RCC_OscConfig+0x9a2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f86:	f7fd fa1b 	bl	80033c0 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d901      	bls.n	8005f9e <HAL_RCC_OscConfig+0x9a2>
        {
          return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e23c      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 8005f9e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa6:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	fa93 f2a3 	rbit	r2, r3
 8005fb0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fba:	2202      	movs	r2, #2
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	fa93 f2a3 	rbit	r2, r3
 8005fc8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fcc:	601a      	str	r2, [r3, #0]
  return result;
 8005fce:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8005fd2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fd4:	fab3 f383 	clz	r3, r3
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	095b      	lsrs	r3, r3, #5
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	f043 0302 	orr.w	r3, r3, #2
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d102      	bne.n	8005fee <HAL_RCC_OscConfig+0x9f2>
 8005fe8:	4b95      	ldr	r3, [pc, #596]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	e00d      	b.n	800600a <HAL_RCC_OscConfig+0xa0e>
 8005fee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ff2:	2202      	movs	r2, #2
 8005ff4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ff6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	fa93 f2a3 	rbit	r2, r3
 8006000:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	4b8e      	ldr	r3, [pc, #568]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800600e:	2102      	movs	r1, #2
 8006010:	6011      	str	r1, [r2, #0]
 8006012:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8006016:	6812      	ldr	r2, [r2, #0]
 8006018:	fa92 f1a2 	rbit	r1, r2
 800601c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006020:	6011      	str	r1, [r2, #0]
  return result;
 8006022:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8006026:	6812      	ldr	r2, [r2, #0]
 8006028:	fab2 f282 	clz	r2, r2
 800602c:	b2d2      	uxtb	r2, r2
 800602e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	f002 021f 	and.w	r2, r2, #31
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f202 	lsl.w	r2, r1, r2
 800603e:	4013      	ands	r3, r2
 8006040:	2b00      	cmp	r3, #0
 8006042:	d1a0      	bne.n	8005f86 <HAL_RCC_OscConfig+0x98a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006044:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8006048:	2b01      	cmp	r3, #1
 800604a:	d105      	bne.n	8006058 <HAL_RCC_OscConfig+0xa5c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800604c:	4b7c      	ldr	r3, [pc, #496]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	4a7b      	ldr	r2, [pc, #492]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006056:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006058:	1d3b      	adds	r3, r7, #4
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699b      	ldr	r3, [r3, #24]
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 81d9 	beq.w	8006416 <HAL_RCC_OscConfig+0xe1a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006064:	4b76      	ldr	r3, [pc, #472]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f003 030c 	and.w	r3, r3, #12
 800606c:	2b08      	cmp	r3, #8
 800606e:	f000 81a6 	beq.w	80063be <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006072:	1d3b      	adds	r3, r7, #4
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	2b02      	cmp	r3, #2
 800607a:	f040 811e 	bne.w	80062ba <HAL_RCC_OscConfig+0xcbe>
 800607e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8006082:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006086:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006088:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	fa93 f2a3 	rbit	r2, r3
 8006092:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006096:	601a      	str	r2, [r3, #0]
  return result;
 8006098:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800609c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609e:	fab3 f383 	clz	r3, r3
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80060a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	461a      	mov	r2, r3
 80060b0:	2300      	movs	r3, #0
 80060b2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060b4:	f7fd f984 	bl	80033c0 <HAL_GetTick>
 80060b8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060bc:	e009      	b.n	80060d2 <HAL_RCC_OscConfig+0xad6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060be:	f7fd f97f 	bl	80033c0 <HAL_GetTick>
 80060c2:	4602      	mov	r2, r0
 80060c4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0xad6>
          {
            return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e1a2      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 80060d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80060d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80060da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	fa93 f2a3 	rbit	r2, r3
 80060e6:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060ea:	601a      	str	r2, [r3, #0]
  return result;
 80060ec:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80060f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80060f2:	fab3 f383 	clz	r3, r3
 80060f6:	b2db      	uxtb	r3, r3
 80060f8:	095b      	lsrs	r3, r3, #5
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f043 0301 	orr.w	r3, r3, #1
 8006100:	b2db      	uxtb	r3, r3
 8006102:	2b01      	cmp	r3, #1
 8006104:	d102      	bne.n	800610c <HAL_RCC_OscConfig+0xb10>
 8006106:	4b4e      	ldr	r3, [pc, #312]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	e01b      	b.n	8006144 <HAL_RCC_OscConfig+0xb48>
 800610c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8006110:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006114:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006116:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	fa93 f2a3 	rbit	r2, r3
 8006120:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800612a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	fa93 f2a3 	rbit	r2, r3
 800613a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800613e:	601a      	str	r2, [r3, #0]
 8006140:	4b3f      	ldr	r3, [pc, #252]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006144:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006148:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800614c:	6011      	str	r1, [r2, #0]
 800614e:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8006152:	6812      	ldr	r2, [r2, #0]
 8006154:	fa92 f1a2 	rbit	r1, r2
 8006158:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800615c:	6011      	str	r1, [r2, #0]
  return result;
 800615e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006162:	6812      	ldr	r2, [r2, #0]
 8006164:	fab2 f282 	clz	r2, r2
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	f042 0220 	orr.w	r2, r2, #32
 800616e:	b2d2      	uxtb	r2, r2
 8006170:	f002 021f 	and.w	r2, r2, #31
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f202 	lsl.w	r2, r1, r2
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d19e      	bne.n	80060be <HAL_RCC_OscConfig+0xac2>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006180:	4b2f      	ldr	r3, [pc, #188]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006184:	f023 020f 	bic.w	r2, r3, #15
 8006188:	1d3b      	adds	r3, r7, #4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618e:	492c      	ldr	r1, [pc, #176]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006190:	4313      	orrs	r3, r2
 8006192:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006194:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 800619c:	1d3b      	adds	r3, r7, #4
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6a19      	ldr	r1, [r3, #32]
 80061a2:	1d3b      	adds	r3, r7, #4
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	430b      	orrs	r3, r1
 80061aa:	4925      	ldr	r1, [pc, #148]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	604b      	str	r3, [r1, #4]
 80061b0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80061b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80061b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ba:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	fa93 f2a3 	rbit	r2, r3
 80061c4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061c8:	601a      	str	r2, [r3, #0]
  return result;
 80061ca:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80061ce:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061d0:	fab3 f383 	clz	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80061da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	461a      	mov	r2, r3
 80061e2:	2301      	movs	r3, #1
 80061e4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061e6:	f7fd f8eb 	bl	80033c0 <HAL_GetTick>
 80061ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80061ee:	e009      	b.n	8006204 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80061f0:	f7fd f8e6 	bl	80033c0 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80061fa:	1ad3      	subs	r3, r2, r3
 80061fc:	2b02      	cmp	r3, #2
 80061fe:	d901      	bls.n	8006204 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8006200:	2303      	movs	r3, #3
 8006202:	e109      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 8006204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006208:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800620c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800620e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	fa93 f2a3 	rbit	r2, r3
 8006218:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800621c:	601a      	str	r2, [r3, #0]
  return result;
 800621e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8006222:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8006224:	fab3 f383 	clz	r3, r3
 8006228:	b2db      	uxtb	r3, r3
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	b2db      	uxtb	r3, r3
 800622e:	f043 0301 	orr.w	r3, r3, #1
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	d105      	bne.n	8006244 <HAL_RCC_OscConfig+0xc48>
 8006238:	4b01      	ldr	r3, [pc, #4]	; (8006240 <HAL_RCC_OscConfig+0xc44>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	e01e      	b.n	800627c <HAL_RCC_OscConfig+0xc80>
 800623e:	bf00      	nop
 8006240:	40021000 	.word	0x40021000
 8006244:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006248:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800624c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800624e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	fa93 f2a3 	rbit	r2, r3
 8006258:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006262:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006266:	601a      	str	r2, [r3, #0]
 8006268:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	fa93 f2a3 	rbit	r2, r3
 8006272:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006276:	601a      	str	r2, [r3, #0]
 8006278:	4b6a      	ldr	r3, [pc, #424]	; (8006424 <HAL_RCC_OscConfig+0xe28>)
 800627a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8006280:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006284:	6011      	str	r1, [r2, #0]
 8006286:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800628a:	6812      	ldr	r2, [r2, #0]
 800628c:	fa92 f1a2 	rbit	r1, r2
 8006290:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8006294:	6011      	str	r1, [r2, #0]
  return result;
 8006296:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800629a:	6812      	ldr	r2, [r2, #0]
 800629c:	fab2 f282 	clz	r2, r2
 80062a0:	b2d2      	uxtb	r2, r2
 80062a2:	f042 0220 	orr.w	r2, r2, #32
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	f002 021f 	and.w	r2, r2, #31
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f202 	lsl.w	r2, r1, r2
 80062b2:	4013      	ands	r3, r2
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d09b      	beq.n	80061f0 <HAL_RCC_OscConfig+0xbf4>
 80062b8:	e0ad      	b.n	8006416 <HAL_RCC_OscConfig+0xe1a>
 80062ba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062be:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80062c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	fa93 f2a3 	rbit	r2, r3
 80062ce:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d2:	601a      	str	r2, [r3, #0]
  return result;
 80062d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80062d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062da:	fab3 f383 	clz	r3, r3
 80062de:	b2db      	uxtb	r3, r3
 80062e0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80062e4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	461a      	mov	r2, r3
 80062ec:	2300      	movs	r3, #0
 80062ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062f0:	f7fd f866 	bl	80033c0 <HAL_GetTick>
 80062f4:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80062f8:	e009      	b.n	800630e <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062fa:	f7fd f861 	bl	80033c0 <HAL_GetTick>
 80062fe:	4602      	mov	r2, r0
 8006300:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8006304:	1ad3      	subs	r3, r2, r3
 8006306:	2b02      	cmp	r3, #2
 8006308:	d901      	bls.n	800630e <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 800630a:	2303      	movs	r3, #3
 800630c:	e084      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
 800630e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006318:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	fa93 f2a3 	rbit	r2, r3
 8006322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006326:	601a      	str	r2, [r3, #0]
  return result;
 8006328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800632c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800632e:	fab3 f383 	clz	r3, r3
 8006332:	b2db      	uxtb	r3, r3
 8006334:	095b      	lsrs	r3, r3, #5
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f043 0301 	orr.w	r3, r3, #1
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b01      	cmp	r3, #1
 8006340:	d102      	bne.n	8006348 <HAL_RCC_OscConfig+0xd4c>
 8006342:	4b38      	ldr	r3, [pc, #224]	; (8006424 <HAL_RCC_OscConfig+0xe28>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	e01b      	b.n	8006380 <HAL_RCC_OscConfig+0xd84>
 8006348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800634c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006350:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	fa93 f2a3 	rbit	r2, r3
 800635c:	f107 0320 	add.w	r3, r7, #32
 8006360:	601a      	str	r2, [r3, #0]
 8006362:	f107 031c 	add.w	r3, r7, #28
 8006366:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800636a:	601a      	str	r2, [r3, #0]
 800636c:	f107 031c 	add.w	r3, r7, #28
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	fa93 f2a3 	rbit	r2, r3
 8006376:	f107 0318 	add.w	r3, r7, #24
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	4b29      	ldr	r3, [pc, #164]	; (8006424 <HAL_RCC_OscConfig+0xe28>)
 800637e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006380:	f107 0214 	add.w	r2, r7, #20
 8006384:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	f107 0214 	add.w	r2, r7, #20
 800638e:	6812      	ldr	r2, [r2, #0]
 8006390:	fa92 f1a2 	rbit	r1, r2
 8006394:	f107 0210 	add.w	r2, r7, #16
 8006398:	6011      	str	r1, [r2, #0]
  return result;
 800639a:	f107 0210 	add.w	r2, r7, #16
 800639e:	6812      	ldr	r2, [r2, #0]
 80063a0:	fab2 f282 	clz	r2, r2
 80063a4:	b2d2      	uxtb	r2, r2
 80063a6:	f042 0220 	orr.w	r2, r2, #32
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	f002 021f 	and.w	r2, r2, #31
 80063b0:	2101      	movs	r1, #1
 80063b2:	fa01 f202 	lsl.w	r2, r1, r2
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d19e      	bne.n	80062fa <HAL_RCC_OscConfig+0xcfe>
 80063bc:	e02b      	b.n	8006416 <HAL_RCC_OscConfig+0xe1a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80063be:	1d3b      	adds	r3, r7, #4
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d101      	bne.n	80063cc <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e025      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80063cc:	4b15      	ldr	r3, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0xe28>)
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80063d4:	4b13      	ldr	r3, [pc, #76]	; (8006424 <HAL_RCC_OscConfig+0xe28>)
 80063d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d8:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063dc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80063e0:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 80063e4:	1d3b      	adds	r3, r7, #4
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	d111      	bne.n	8006412 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80063ee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80063f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80063f6:	1d3b      	adds	r3, r7, #4
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d108      	bne.n	8006412 <HAL_RCC_OscConfig+0xe16>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8006400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8006404:	f003 020f 	and.w	r2, r3, #15
 8006408:	1d3b      	adds	r3, r7, #4
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 800640e:	429a      	cmp	r2, r3
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0xe1a>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e000      	b.n	8006418 <HAL_RCC_OscConfig+0xe1c>
        }
      }
    }
  }

  return HAL_OK;
 8006416:	2300      	movs	r3, #0
}
 8006418:	4618      	mov	r0, r3
 800641a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	40021000 	.word	0x40021000

08006428 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b09e      	sub	sp, #120	; 0x78
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e162      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006440:	4b90      	ldr	r3, [pc, #576]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f003 0307 	and.w	r3, r3, #7
 8006448:	683a      	ldr	r2, [r7, #0]
 800644a:	429a      	cmp	r2, r3
 800644c:	d910      	bls.n	8006470 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800644e:	4b8d      	ldr	r3, [pc, #564]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f023 0207 	bic.w	r2, r3, #7
 8006456:	498b      	ldr	r1, [pc, #556]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800645e:	4b89      	ldr	r3, [pc, #548]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d001      	beq.n	8006470 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e14a      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 0302 	and.w	r3, r3, #2
 8006478:	2b00      	cmp	r3, #0
 800647a:	d008      	beq.n	800648e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800647c:	4b82      	ldr	r3, [pc, #520]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	497f      	ldr	r1, [pc, #508]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 800648a:	4313      	orrs	r3, r2
 800648c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0301 	and.w	r3, r3, #1
 8006496:	2b00      	cmp	r3, #0
 8006498:	f000 80dc 	beq.w	8006654 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d13c      	bne.n	800651e <HAL_RCC_ClockConfig+0xf6>
 80064a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064ac:	fa93 f3a3 	rbit	r3, r3
 80064b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80064b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80064b4:	fab3 f383 	clz	r3, r3
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	f043 0301 	orr.w	r3, r3, #1
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d102      	bne.n	80064ce <HAL_RCC_ClockConfig+0xa6>
 80064c8:	4b6f      	ldr	r3, [pc, #444]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	e00f      	b.n	80064ee <HAL_RCC_ClockConfig+0xc6>
 80064ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064d2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	667b      	str	r3, [r7, #100]	; 0x64
 80064dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80064e0:	663b      	str	r3, [r7, #96]	; 0x60
 80064e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064e4:	fa93 f3a3 	rbit	r3, r3
 80064e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064ea:	4b67      	ldr	r3, [pc, #412]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80064f2:	65ba      	str	r2, [r7, #88]	; 0x58
 80064f4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064f6:	fa92 f2a2 	rbit	r2, r2
 80064fa:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 80064fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80064fe:	fab2 f282 	clz	r2, r2
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	f042 0220 	orr.w	r2, r2, #32
 8006508:	b2d2      	uxtb	r2, r2
 800650a:	f002 021f 	and.w	r2, r2, #31
 800650e:	2101      	movs	r1, #1
 8006510:	fa01 f202 	lsl.w	r2, r1, r2
 8006514:	4013      	ands	r3, r2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d17b      	bne.n	8006612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e0f3      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	2b02      	cmp	r3, #2
 8006524:	d13c      	bne.n	80065a0 <HAL_RCC_ClockConfig+0x178>
 8006526:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800652a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800652c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800652e:	fa93 f3a3 	rbit	r3, r3
 8006532:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006536:	fab3 f383 	clz	r3, r3
 800653a:	b2db      	uxtb	r3, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f043 0301 	orr.w	r3, r3, #1
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b01      	cmp	r3, #1
 8006548:	d102      	bne.n	8006550 <HAL_RCC_ClockConfig+0x128>
 800654a:	4b4f      	ldr	r3, [pc, #316]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	e00f      	b.n	8006570 <HAL_RCC_ClockConfig+0x148>
 8006550:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006554:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006556:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006558:	fa93 f3a3 	rbit	r3, r3
 800655c:	647b      	str	r3, [r7, #68]	; 0x44
 800655e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
 8006564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006566:	fa93 f3a3 	rbit	r3, r3
 800656a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800656c:	4b46      	ldr	r3, [pc, #280]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006574:	63ba      	str	r2, [r7, #56]	; 0x38
 8006576:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006578:	fa92 f2a2 	rbit	r2, r2
 800657c:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 800657e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006580:	fab2 f282 	clz	r2, r2
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	f042 0220 	orr.w	r2, r2, #32
 800658a:	b2d2      	uxtb	r2, r2
 800658c:	f002 021f 	and.w	r2, r2, #31
 8006590:	2101      	movs	r1, #1
 8006592:	fa01 f202 	lsl.w	r2, r1, r2
 8006596:	4013      	ands	r3, r2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d13a      	bne.n	8006612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e0b2      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
 80065a0:	2302      	movs	r3, #2
 80065a2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	fa93 f3a3 	rbit	r3, r3
 80065aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80065ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065ae:	fab3 f383 	clz	r3, r3
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	095b      	lsrs	r3, r3, #5
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d102      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x1a0>
 80065c2:	4b31      	ldr	r3, [pc, #196]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	e00d      	b.n	80065e4 <HAL_RCC_ClockConfig+0x1bc>
 80065c8:	2302      	movs	r3, #2
 80065ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ce:	fa93 f3a3 	rbit	r3, r3
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24
 80065d4:	2302      	movs	r3, #2
 80065d6:	623b      	str	r3, [r7, #32]
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	fa93 f3a3 	rbit	r3, r3
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	4b29      	ldr	r3, [pc, #164]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 80065e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e4:	2202      	movs	r2, #2
 80065e6:	61ba      	str	r2, [r7, #24]
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	fa92 f2a2 	rbit	r2, r2
 80065ee:	617a      	str	r2, [r7, #20]
  return result;
 80065f0:	697a      	ldr	r2, [r7, #20]
 80065f2:	fab2 f282 	clz	r2, r2
 80065f6:	b2d2      	uxtb	r2, r2
 80065f8:	f042 0220 	orr.w	r2, r2, #32
 80065fc:	b2d2      	uxtb	r2, r2
 80065fe:	f002 021f 	and.w	r2, r2, #31
 8006602:	2101      	movs	r1, #1
 8006604:	fa01 f202 	lsl.w	r2, r1, r2
 8006608:	4013      	ands	r3, r2
 800660a:	2b00      	cmp	r3, #0
 800660c:	d101      	bne.n	8006612 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e079      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006612:	4b1d      	ldr	r3, [pc, #116]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f023 0203 	bic.w	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	491a      	ldr	r1, [pc, #104]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006620:	4313      	orrs	r3, r2
 8006622:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006624:	f7fc fecc 	bl	80033c0 <HAL_GetTick>
 8006628:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662a:	e00a      	b.n	8006642 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800662c:	f7fc fec8 	bl	80033c0 <HAL_GetTick>
 8006630:	4602      	mov	r2, r0
 8006632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006634:	1ad3      	subs	r3, r2, r3
 8006636:	f241 3288 	movw	r2, #5000	; 0x1388
 800663a:	4293      	cmp	r3, r2
 800663c:	d901      	bls.n	8006642 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e061      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006642:	4b11      	ldr	r3, [pc, #68]	; (8006688 <HAL_RCC_ClockConfig+0x260>)
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	f003 020c 	and.w	r2, r3, #12
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	685b      	ldr	r3, [r3, #4]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	429a      	cmp	r2, r3
 8006652:	d1eb      	bne.n	800662c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006654:	4b0b      	ldr	r3, [pc, #44]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f003 0307 	and.w	r3, r3, #7
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	429a      	cmp	r2, r3
 8006660:	d214      	bcs.n	800668c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006662:	4b08      	ldr	r3, [pc, #32]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f023 0207 	bic.w	r2, r3, #7
 800666a:	4906      	ldr	r1, [pc, #24]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	4313      	orrs	r3, r2
 8006670:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006672:	4b04      	ldr	r3, [pc, #16]	; (8006684 <HAL_RCC_ClockConfig+0x25c>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f003 0307 	and.w	r3, r3, #7
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	429a      	cmp	r2, r3
 800667e:	d005      	beq.n	800668c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e040      	b.n	8006706 <HAL_RCC_ClockConfig+0x2de>
 8006684:	40022000 	.word	0x40022000
 8006688:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006698:	4b1d      	ldr	r3, [pc, #116]	; (8006710 <HAL_RCC_ClockConfig+0x2e8>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	68db      	ldr	r3, [r3, #12]
 80066a4:	491a      	ldr	r1, [pc, #104]	; (8006710 <HAL_RCC_ClockConfig+0x2e8>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f003 0308 	and.w	r3, r3, #8
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d009      	beq.n	80066ca <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066b6:	4b16      	ldr	r3, [pc, #88]	; (8006710 <HAL_RCC_ClockConfig+0x2e8>)
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	00db      	lsls	r3, r3, #3
 80066c4:	4912      	ldr	r1, [pc, #72]	; (8006710 <HAL_RCC_ClockConfig+0x2e8>)
 80066c6:	4313      	orrs	r3, r2
 80066c8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80066ca:	f000 f829 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 80066ce:	4601      	mov	r1, r0
 80066d0:	4b0f      	ldr	r3, [pc, #60]	; (8006710 <HAL_RCC_ClockConfig+0x2e8>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066d8:	22f0      	movs	r2, #240	; 0xf0
 80066da:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	fa92 f2a2 	rbit	r2, r2
 80066e2:	60fa      	str	r2, [r7, #12]
  return result;
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	fab2 f282 	clz	r2, r2
 80066ea:	b2d2      	uxtb	r2, r2
 80066ec:	40d3      	lsrs	r3, r2
 80066ee:	4a09      	ldr	r2, [pc, #36]	; (8006714 <HAL_RCC_ClockConfig+0x2ec>)
 80066f0:	5cd3      	ldrb	r3, [r2, r3]
 80066f2:	fa21 f303 	lsr.w	r3, r1, r3
 80066f6:	4a08      	ldr	r2, [pc, #32]	; (8006718 <HAL_RCC_ClockConfig+0x2f0>)
 80066f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80066fa:	4b08      	ldr	r3, [pc, #32]	; (800671c <HAL_RCC_ClockConfig+0x2f4>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f7fc fe1a 	bl	8003338 <HAL_InitTick>
  
  return HAL_OK;
 8006704:	2300      	movs	r3, #0
}
 8006706:	4618      	mov	r0, r3
 8006708:	3778      	adds	r7, #120	; 0x78
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	40021000 	.word	0x40021000
 8006714:	08009cf0 	.word	0x08009cf0
 8006718:	20000010 	.word	0x20000010
 800671c:	20000014 	.word	0x20000014

08006720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006720:	b480      	push	{r7}
 8006722:	b08b      	sub	sp, #44	; 0x2c
 8006724:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	61fb      	str	r3, [r7, #28]
 800672a:	2300      	movs	r3, #0
 800672c:	61bb      	str	r3, [r7, #24]
 800672e:	2300      	movs	r3, #0
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800673a:	4b2a      	ldr	r3, [pc, #168]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	f003 030c 	and.w	r3, r3, #12
 8006746:	2b04      	cmp	r3, #4
 8006748:	d002      	beq.n	8006750 <HAL_RCC_GetSysClockFreq+0x30>
 800674a:	2b08      	cmp	r3, #8
 800674c:	d003      	beq.n	8006756 <HAL_RCC_GetSysClockFreq+0x36>
 800674e:	e03f      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8006750:	4b25      	ldr	r3, [pc, #148]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8006752:	623b      	str	r3, [r7, #32]
      break;
 8006754:	e03f      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 800675c:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8006760:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	fa92 f2a2 	rbit	r2, r2
 8006768:	607a      	str	r2, [r7, #4]
  return result;
 800676a:	687a      	ldr	r2, [r7, #4]
 800676c:	fab2 f282 	clz	r2, r2
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	40d3      	lsrs	r3, r2
 8006774:	4a1d      	ldr	r2, [pc, #116]	; (80067ec <HAL_RCC_GetSysClockFreq+0xcc>)
 8006776:	5cd3      	ldrb	r3, [r2, r3]
 8006778:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800677a:	4b1a      	ldr	r3, [pc, #104]	; (80067e4 <HAL_RCC_GetSysClockFreq+0xc4>)
 800677c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	220f      	movs	r2, #15
 8006784:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006786:	693a      	ldr	r2, [r7, #16]
 8006788:	fa92 f2a2 	rbit	r2, r2
 800678c:	60fa      	str	r2, [r7, #12]
  return result;
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	fab2 f282 	clz	r2, r2
 8006794:	b2d2      	uxtb	r2, r2
 8006796:	40d3      	lsrs	r3, r2
 8006798:	4a15      	ldr	r2, [pc, #84]	; (80067f0 <HAL_RCC_GetSysClockFreq+0xd0>)
 800679a:	5cd3      	ldrb	r3, [r2, r3]
 800679c:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800679e:	69fb      	ldr	r3, [r7, #28]
 80067a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d008      	beq.n	80067ba <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067a8:	4a0f      	ldr	r2, [pc, #60]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	fb02 f303 	mul.w	r3, r2, r3
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
 80067b8:	e007      	b.n	80067ca <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80067ba:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	fbb2 f2f3 	udiv	r2, r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	fb02 f303 	mul.w	r3, r2, r3
 80067c8:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80067ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067cc:	623b      	str	r3, [r7, #32]
      break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_RCC_GetSysClockFreq+0xc8>)
 80067d2:	623b      	str	r3, [r7, #32]
      break;
 80067d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d6:	6a3b      	ldr	r3, [r7, #32]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	372c      	adds	r7, #44	; 0x2c
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	40021000 	.word	0x40021000
 80067e8:	007a1200 	.word	0x007a1200
 80067ec:	08009d08 	.word	0x08009d08
 80067f0:	08009d18 	.word	0x08009d18

080067f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f4:	b480      	push	{r7}
 80067f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f8:	4b03      	ldr	r3, [pc, #12]	; (8006808 <HAL_RCC_GetHCLKFreq+0x14>)
 80067fa:	681b      	ldr	r3, [r3, #0]
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	46bd      	mov	sp, r7
 8006800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006804:	4770      	bx	lr
 8006806:	bf00      	nop
 8006808:	20000010 	.word	0x20000010

0800680c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8006812:	f7ff ffef 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 8006816:	4601      	mov	r1, r0
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <HAL_RCC_GetPCLK1Freq+0x3c>)
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006820:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006824:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	fa92 f2a2 	rbit	r2, r2
 800682c:	603a      	str	r2, [r7, #0]
  return result;
 800682e:	683a      	ldr	r2, [r7, #0]
 8006830:	fab2 f282 	clz	r2, r2
 8006834:	b2d2      	uxtb	r2, r2
 8006836:	40d3      	lsrs	r3, r2
 8006838:	4a04      	ldr	r2, [pc, #16]	; (800684c <HAL_RCC_GetPCLK1Freq+0x40>)
 800683a:	5cd3      	ldrb	r3, [r2, r3]
 800683c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8006840:	4618      	mov	r0, r3
 8006842:	3708      	adds	r7, #8
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}
 8006848:	40021000 	.word	0x40021000
 800684c:	08009d00 	.word	0x08009d00

08006850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8006856:	f7ff ffcd 	bl	80067f4 <HAL_RCC_GetHCLKFreq>
 800685a:	4601      	mov	r1, r0
 800685c:	4b0b      	ldr	r3, [pc, #44]	; (800688c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8006864:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8006868:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800686a:	687a      	ldr	r2, [r7, #4]
 800686c:	fa92 f2a2 	rbit	r2, r2
 8006870:	603a      	str	r2, [r7, #0]
  return result;
 8006872:	683a      	ldr	r2, [r7, #0]
 8006874:	fab2 f282 	clz	r2, r2
 8006878:	b2d2      	uxtb	r2, r2
 800687a:	40d3      	lsrs	r3, r2
 800687c:	4a04      	ldr	r2, [pc, #16]	; (8006890 <HAL_RCC_GetPCLK2Freq+0x40>)
 800687e:	5cd3      	ldrb	r3, [r2, r3]
 8006880:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8006884:	4618      	mov	r0, r3
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40021000 	.word	0x40021000
 8006890:	08009d00 	.word	0x08009d00

08006894 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b092      	sub	sp, #72	; 0x48
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800689c:	2300      	movs	r3, #0
 800689e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80068a0:	2300      	movs	r3, #0
 80068a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80068a4:	2300      	movs	r3, #0
 80068a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 80d4 	beq.w	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068b8:	4b4e      	ldr	r3, [pc, #312]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ba:	69db      	ldr	r3, [r3, #28]
 80068bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10e      	bne.n	80068e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068c4:	4b4b      	ldr	r3, [pc, #300]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	4a4a      	ldr	r2, [pc, #296]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068ce:	61d3      	str	r3, [r2, #28]
 80068d0:	4b48      	ldr	r3, [pc, #288]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80068d2:	69db      	ldr	r3, [r3, #28]
 80068d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d8:	60bb      	str	r3, [r7, #8]
 80068da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068dc:	2301      	movs	r3, #1
 80068de:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e2:	4b45      	ldr	r3, [pc, #276]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d118      	bne.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ee:	4b42      	ldr	r3, [pc, #264]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a41      	ldr	r2, [pc, #260]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80068f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068f8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068fa:	f7fc fd61 	bl	80033c0 <HAL_GetTick>
 80068fe:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006900:	e008      	b.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006902:	f7fc fd5d 	bl	80033c0 <HAL_GetTick>
 8006906:	4602      	mov	r2, r0
 8006908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800690a:	1ad3      	subs	r3, r2, r3
 800690c:	2b64      	cmp	r3, #100	; 0x64
 800690e:	d901      	bls.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8006910:	2303      	movs	r3, #3
 8006912:	e1d6      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006914:	4b38      	ldr	r3, [pc, #224]	; (80069f8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800691c:	2b00      	cmp	r3, #0
 800691e:	d0f0      	beq.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006920:	4b34      	ldr	r3, [pc, #208]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006928:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800692a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692c:	2b00      	cmp	r3, #0
 800692e:	f000 8084 	beq.w	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800693a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800693c:	429a      	cmp	r2, r3
 800693e:	d07c      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006940:	4b2c      	ldr	r3, [pc, #176]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800694a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800694e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006952:	fa93 f3a3 	rbit	r3, r3
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800695a:	fab3 f383 	clz	r3, r3
 800695e:	b2db      	uxtb	r3, r3
 8006960:	461a      	mov	r2, r3
 8006962:	4b26      	ldr	r3, [pc, #152]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006964:	4413      	add	r3, r2
 8006966:	009b      	lsls	r3, r3, #2
 8006968:	461a      	mov	r2, r3
 800696a:	2301      	movs	r3, #1
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006972:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	fa93 f3a3 	rbit	r3, r3
 800697a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800697c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800697e:	fab3 f383 	clz	r3, r3
 8006982:	b2db      	uxtb	r3, r3
 8006984:	461a      	mov	r2, r3
 8006986:	4b1d      	ldr	r3, [pc, #116]	; (80069fc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8006988:	4413      	add	r3, r2
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	461a      	mov	r2, r3
 800698e:	2300      	movs	r3, #0
 8006990:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8006992:	4a18      	ldr	r2, [pc, #96]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8006998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800699a:	f003 0301 	and.w	r3, r3, #1
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04b      	beq.n	8006a3a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a2:	f7fc fd0d 	bl	80033c0 <HAL_GetTick>
 80069a6:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a8:	e00a      	b.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069aa:	f7fc fd09 	bl	80033c0 <HAL_GetTick>
 80069ae:	4602      	mov	r2, r0
 80069b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d901      	bls.n	80069c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e180      	b.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80069c0:	2302      	movs	r3, #2
 80069c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069c6:	fa93 f3a3 	rbit	r3, r3
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
 80069cc:	2302      	movs	r3, #2
 80069ce:	623b      	str	r3, [r7, #32]
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	fa93 f3a3 	rbit	r3, r3
 80069d6:	61fb      	str	r3, [r7, #28]
  return result;
 80069d8:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069da:	fab3 f383 	clz	r3, r3
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	095b      	lsrs	r3, r3, #5
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	f043 0302 	orr.w	r3, r3, #2
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b02      	cmp	r3, #2
 80069ec:	d108      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80069ee:	4b01      	ldr	r3, [pc, #4]	; (80069f4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	e00d      	b.n	8006a10 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80069f4:	40021000 	.word	0x40021000
 80069f8:	40007000 	.word	0x40007000
 80069fc:	10908100 	.word	0x10908100
 8006a00:	2302      	movs	r3, #2
 8006a02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a04:	69bb      	ldr	r3, [r7, #24]
 8006a06:	fa93 f3a3 	rbit	r3, r3
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	4ba0      	ldr	r3, [pc, #640]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a10:	2202      	movs	r2, #2
 8006a12:	613a      	str	r2, [r7, #16]
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	fa92 f2a2 	rbit	r2, r2
 8006a1a:	60fa      	str	r2, [r7, #12]
  return result;
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	fab2 f282 	clz	r2, r2
 8006a22:	b2d2      	uxtb	r2, r2
 8006a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a28:	b2d2      	uxtb	r2, r2
 8006a2a:	f002 021f 	and.w	r2, r2, #31
 8006a2e:	2101      	movs	r1, #1
 8006a30:	fa01 f202 	lsl.w	r2, r1, r2
 8006a34:	4013      	ands	r3, r2
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d0b7      	beq.n	80069aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8006a3a:	4b95      	ldr	r3, [pc, #596]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	685b      	ldr	r3, [r3, #4]
 8006a46:	4992      	ldr	r1, [pc, #584]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006a4c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006a50:	2b01      	cmp	r3, #1
 8006a52:	d105      	bne.n	8006a60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a54:	4b8e      	ldr	r3, [pc, #568]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a56:	69db      	ldr	r3, [r3, #28]
 8006a58:	4a8d      	ldr	r2, [pc, #564]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a5e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0301 	and.w	r3, r3, #1
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006a6c:	4b88      	ldr	r3, [pc, #544]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a70:	f023 0203 	bic.w	r2, r3, #3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	4985      	ldr	r1, [pc, #532]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 0302 	and.w	r3, r3, #2
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d008      	beq.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006a8a:	4b81      	ldr	r3, [pc, #516]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	497e      	ldr	r1, [pc, #504]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0304 	and.w	r3, r3, #4
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d008      	beq.n	8006aba <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006aa8:	4b79      	ldr	r3, [pc, #484]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	4976      	ldr	r1, [pc, #472]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ac6:	4b72      	ldr	r3, [pc, #456]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aca:	f023 0210 	bic.w	r2, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69db      	ldr	r3, [r3, #28]
 8006ad2:	496f      	ldr	r1, [pc, #444]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d008      	beq.n	8006af6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8006ae4:	4b6a      	ldr	r3, [pc, #424]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006af0:	4967      	ldr	r1, [pc, #412]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006af2:	4313      	orrs	r3, r2
 8006af4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006b02:	4b63      	ldr	r3, [pc, #396]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	f023 0220 	bic.w	r2, r3, #32
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	4960      	ldr	r1, [pc, #384]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b10:	4313      	orrs	r3, r2
 8006b12:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d008      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006b20:	4b5b      	ldr	r3, [pc, #364]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b24:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2c:	4958      	ldr	r1, [pc, #352]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0308 	and.w	r3, r3, #8
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d008      	beq.n	8006b50 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006b3e:	4b54      	ldr	r3, [pc, #336]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	4951      	ldr	r1, [pc, #324]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d008      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006b5c:	4b4c      	ldr	r3, [pc, #304]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	4949      	ldr	r1, [pc, #292]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d008      	beq.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b7a:	4b45      	ldr	r3, [pc, #276]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b7c:	685b      	ldr	r3, [r3, #4]
 8006b7e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b86:	4942      	ldr	r1, [pc, #264]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b88:	4313      	orrs	r3, r2
 8006b8a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d008      	beq.n	8006baa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006b98:	4b3d      	ldr	r3, [pc, #244]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba4:	493a      	ldr	r1, [pc, #232]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d008      	beq.n	8006bc8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8006bb6:	4b36      	ldr	r3, [pc, #216]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bba:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc2:	4933      	ldr	r1, [pc, #204]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006bd4:	4b2e      	ldr	r3, [pc, #184]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006be0:	492b      	ldr	r1, [pc, #172]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d008      	beq.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8006bf2:	4b27      	ldr	r3, [pc, #156]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bfe:	4924      	ldr	r1, [pc, #144]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c00:	4313      	orrs	r3, r2
 8006c02:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d008      	beq.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8006c10:	4b1f      	ldr	r3, [pc, #124]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c14:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	491c      	ldr	r1, [pc, #112]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d008      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8006c2e:	4b18      	ldr	r3, [pc, #96]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c32:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c3a:	4915      	ldr	r1, [pc, #84]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d008      	beq.n	8006c5e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8006c4c:	4b10      	ldr	r3, [pc, #64]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c58:	490d      	ldr	r1, [pc, #52]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d008      	beq.n	8006c7c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8006c6a:	4b09      	ldr	r3, [pc, #36]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c76:	4906      	ldr	r1, [pc, #24]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00c      	beq.n	8006ca2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8006c88:	4b01      	ldr	r3, [pc, #4]	; (8006c90 <HAL_RCCEx_PeriphCLKConfig+0x3fc>)
 8006c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c8c:	e002      	b.n	8006c94 <HAL_RCCEx_PeriphCLKConfig+0x400>
 8006c8e:	bf00      	nop
 8006c90:	40021000 	.word	0x40021000
 8006c94:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c9c:	490b      	ldr	r1, [pc, #44]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d008      	beq.n	8006cc0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8006cae:	4b07      	ldr	r3, [pc, #28]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb2:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	4904      	ldr	r1, [pc, #16]	; (8006ccc <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3748      	adds	r7, #72	; 0x48
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	40021000 	.word	0x40021000

08006cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b082      	sub	sp, #8
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d101      	bne.n	8006ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	e049      	b.n	8006d76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ce8:	b2db      	uxtb	r3, r3
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d106      	bne.n	8006cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7fb fe0c 	bl	8002914 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2202      	movs	r2, #2
 8006d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	3304      	adds	r3, #4
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4610      	mov	r0, r2
 8006d10:	f000 fb14 	bl	800733c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2201      	movs	r2, #1
 8006d28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2201      	movs	r2, #1
 8006d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3708      	adds	r7, #8
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
	...

08006d80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d8e:	b2db      	uxtb	r3, r3
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d001      	beq.n	8006d98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e047      	b.n	8006e28 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2202      	movs	r2, #2
 8006d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a23      	ldr	r2, [pc, #140]	; (8006e34 <HAL_TIM_Base_Start+0xb4>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d01d      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006db2:	d018      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a1f      	ldr	r2, [pc, #124]	; (8006e38 <HAL_TIM_Base_Start+0xb8>)
 8006dba:	4293      	cmp	r3, r2
 8006dbc:	d013      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a1e      	ldr	r2, [pc, #120]	; (8006e3c <HAL_TIM_Base_Start+0xbc>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d00e      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a1c      	ldr	r2, [pc, #112]	; (8006e40 <HAL_TIM_Base_Start+0xc0>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d009      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a1b      	ldr	r2, [pc, #108]	; (8006e44 <HAL_TIM_Base_Start+0xc4>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d004      	beq.n	8006de6 <HAL_TIM_Base_Start+0x66>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a19      	ldr	r2, [pc, #100]	; (8006e48 <HAL_TIM_Base_Start+0xc8>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d115      	bne.n	8006e12 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	4b17      	ldr	r3, [pc, #92]	; (8006e4c <HAL_TIM_Base_Start+0xcc>)
 8006dee:	4013      	ands	r3, r2
 8006df0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2b06      	cmp	r3, #6
 8006df6:	d015      	beq.n	8006e24 <HAL_TIM_Base_Start+0xa4>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dfe:	d011      	beq.n	8006e24 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f042 0201 	orr.w	r2, r2, #1
 8006e0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e10:	e008      	b.n	8006e24 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f042 0201 	orr.w	r2, r2, #1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	e000      	b.n	8006e26 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3714      	adds	r7, #20
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr
 8006e34:	40012c00 	.word	0x40012c00
 8006e38:	40000400 	.word	0x40000400
 8006e3c:	40000800 	.word	0x40000800
 8006e40:	40013400 	.word	0x40013400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40015000 	.word	0x40015000
 8006e4c:	00010007 	.word	0x00010007

08006e50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006e50:	b480      	push	{r7}
 8006e52:	b085      	sub	sp, #20
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d001      	beq.n	8006e68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	e04f      	b.n	8006f08 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68da      	ldr	r2, [r3, #12]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f042 0201 	orr.w	r2, r2, #1
 8006e7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <HAL_TIM_Base_Start_IT+0xc4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d01d      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e92:	d018      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a1f      	ldr	r2, [pc, #124]	; (8006f18 <HAL_TIM_Base_Start_IT+0xc8>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d013      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a1e      	ldr	r2, [pc, #120]	; (8006f1c <HAL_TIM_Base_Start_IT+0xcc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d00e      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a1c      	ldr	r2, [pc, #112]	; (8006f20 <HAL_TIM_Base_Start_IT+0xd0>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d009      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a1b      	ldr	r2, [pc, #108]	; (8006f24 <HAL_TIM_Base_Start_IT+0xd4>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d004      	beq.n	8006ec6 <HAL_TIM_Base_Start_IT+0x76>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a19      	ldr	r2, [pc, #100]	; (8006f28 <HAL_TIM_Base_Start_IT+0xd8>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d115      	bne.n	8006ef2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	689a      	ldr	r2, [r3, #8]
 8006ecc:	4b17      	ldr	r3, [pc, #92]	; (8006f2c <HAL_TIM_Base_Start_IT+0xdc>)
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2b06      	cmp	r3, #6
 8006ed6:	d015      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0xb4>
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ede:	d011      	beq.n	8006f04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f042 0201 	orr.w	r2, r2, #1
 8006eee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ef0:	e008      	b.n	8006f04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f042 0201 	orr.w	r2, r2, #1
 8006f00:	601a      	str	r2, [r3, #0]
 8006f02:	e000      	b.n	8006f06 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f04:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f06:	2300      	movs	r3, #0
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3714      	adds	r7, #20
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr
 8006f14:	40012c00 	.word	0x40012c00
 8006f18:	40000400 	.word	0x40000400
 8006f1c:	40000800 	.word	0x40000800
 8006f20:	40013400 	.word	0x40013400
 8006f24:	40014000 	.word	0x40014000
 8006f28:	40015000 	.word	0x40015000
 8006f2c:	00010007 	.word	0x00010007

08006f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	d122      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0302 	and.w	r3, r3, #2
 8006f50:	2b02      	cmp	r3, #2
 8006f52:	d11b      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0202 	mvn.w	r2, #2
 8006f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	699b      	ldr	r3, [r3, #24]
 8006f6a:	f003 0303 	and.w	r3, r3, #3
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f9c3 	bl	80072fe <HAL_TIM_IC_CaptureCallback>
 8006f78:	e005      	b.n	8006f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9b5 	bl	80072ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f9c6 	bl	8007312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	f003 0304 	and.w	r3, r3, #4
 8006f96:	2b04      	cmp	r3, #4
 8006f98:	d122      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	f003 0304 	and.w	r3, r3, #4
 8006fa4:	2b04      	cmp	r3, #4
 8006fa6:	d11b      	bne.n	8006fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0204 	mvn.w	r2, #4
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2202      	movs	r2, #2
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	699b      	ldr	r3, [r3, #24]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f999 	bl	80072fe <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f98b 	bl	80072ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f99c 	bl	8007312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	f003 0308 	and.w	r3, r3, #8
 8006fea:	2b08      	cmp	r3, #8
 8006fec:	d122      	bne.n	8007034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f003 0308 	and.w	r3, r3, #8
 8006ff8:	2b08      	cmp	r3, #8
 8006ffa:	d11b      	bne.n	8007034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f06f 0208 	mvn.w	r2, #8
 8007004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	69db      	ldr	r3, [r3, #28]
 8007012:	f003 0303 	and.w	r3, r3, #3
 8007016:	2b00      	cmp	r3, #0
 8007018:	d003      	beq.n	8007022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 f96f 	bl	80072fe <HAL_TIM_IC_CaptureCallback>
 8007020:	e005      	b.n	800702e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f961 	bl	80072ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007028:	6878      	ldr	r0, [r7, #4]
 800702a:	f000 f972 	bl	8007312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	2200      	movs	r2, #0
 8007032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691b      	ldr	r3, [r3, #16]
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b10      	cmp	r3, #16
 8007040:	d122      	bne.n	8007088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	f003 0310 	and.w	r3, r3, #16
 800704c:	2b10      	cmp	r3, #16
 800704e:	d11b      	bne.n	8007088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f06f 0210 	mvn.w	r2, #16
 8007058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2208      	movs	r2, #8
 800705e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800706a:	2b00      	cmp	r3, #0
 800706c:	d003      	beq.n	8007076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f945 	bl	80072fe <HAL_TIM_IC_CaptureCallback>
 8007074:	e005      	b.n	8007082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 f937 	bl	80072ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f948 	bl	8007312 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	691b      	ldr	r3, [r3, #16]
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b01      	cmp	r3, #1
 8007094:	d10e      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	68db      	ldr	r3, [r3, #12]
 800709c:	f003 0301 	and.w	r3, r3, #1
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d107      	bne.n	80070b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f06f 0201 	mvn.w	r2, #1
 80070ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fb fb0a 	bl	80026c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	691b      	ldr	r3, [r3, #16]
 80070ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070be:	2b80      	cmp	r3, #128	; 0x80
 80070c0:	d10e      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070cc:	2b80      	cmp	r3, #128	; 0x80
 80070ce:	d107      	bne.n	80070e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80070d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 fafc 	bl	80076d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80070ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ee:	d10e      	bne.n	800710e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	68db      	ldr	r3, [r3, #12]
 80070f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070fa:	2b80      	cmp	r3, #128	; 0x80
 80070fc:	d107      	bne.n	800710e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 faef 	bl	80076ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007118:	2b40      	cmp	r3, #64	; 0x40
 800711a:	d10e      	bne.n	800713a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68db      	ldr	r3, [r3, #12]
 8007122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007126:	2b40      	cmp	r3, #64	; 0x40
 8007128:	d107      	bne.n	800713a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007132:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f8f6 	bl	8007326 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	f003 0320 	and.w	r3, r3, #32
 8007144:	2b20      	cmp	r3, #32
 8007146:	d10e      	bne.n	8007166 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f003 0320 	and.w	r3, r3, #32
 8007152:	2b20      	cmp	r3, #32
 8007154:	d107      	bne.n	8007166 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f06f 0220 	mvn.w	r2, #32
 800715e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 faaf 	bl	80076c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007166:	bf00      	nop
 8007168:	3708      	adds	r7, #8
 800716a:	46bd      	mov	sp, r7
 800716c:	bd80      	pop	{r7, pc}

0800716e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007182:	2b01      	cmp	r3, #1
 8007184:	d101      	bne.n	800718a <HAL_TIM_ConfigClockSource+0x1c>
 8007186:	2302      	movs	r3, #2
 8007188:	e0ab      	b.n	80072e2 <HAL_TIM_ConfigClockSource+0x174>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2202      	movs	r2, #2
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071a8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80071ac:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071b4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	68ba      	ldr	r2, [r7, #8]
 80071bc:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b40      	cmp	r3, #64	; 0x40
 80071c4:	d067      	beq.n	8007296 <HAL_TIM_ConfigClockSource+0x128>
 80071c6:	2b40      	cmp	r3, #64	; 0x40
 80071c8:	d80b      	bhi.n	80071e2 <HAL_TIM_ConfigClockSource+0x74>
 80071ca:	2b10      	cmp	r3, #16
 80071cc:	d073      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x148>
 80071ce:	2b10      	cmp	r3, #16
 80071d0:	d802      	bhi.n	80071d8 <HAL_TIM_ConfigClockSource+0x6a>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d06f      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x148>
 80071d6:	e077      	b.n	80072c8 <HAL_TIM_ConfigClockSource+0x15a>
 80071d8:	2b20      	cmp	r3, #32
 80071da:	d06c      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x148>
 80071dc:	2b30      	cmp	r3, #48	; 0x30
 80071de:	d06a      	beq.n	80072b6 <HAL_TIM_ConfigClockSource+0x148>
 80071e0:	e072      	b.n	80072c8 <HAL_TIM_ConfigClockSource+0x15a>
 80071e2:	2b70      	cmp	r3, #112	; 0x70
 80071e4:	d00d      	beq.n	8007202 <HAL_TIM_ConfigClockSource+0x94>
 80071e6:	2b70      	cmp	r3, #112	; 0x70
 80071e8:	d804      	bhi.n	80071f4 <HAL_TIM_ConfigClockSource+0x86>
 80071ea:	2b50      	cmp	r3, #80	; 0x50
 80071ec:	d033      	beq.n	8007256 <HAL_TIM_ConfigClockSource+0xe8>
 80071ee:	2b60      	cmp	r3, #96	; 0x60
 80071f0:	d041      	beq.n	8007276 <HAL_TIM_ConfigClockSource+0x108>
 80071f2:	e069      	b.n	80072c8 <HAL_TIM_ConfigClockSource+0x15a>
 80071f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f8:	d069      	beq.n	80072ce <HAL_TIM_ConfigClockSource+0x160>
 80071fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071fe:	d017      	beq.n	8007230 <HAL_TIM_ConfigClockSource+0xc2>
 8007200:	e062      	b.n	80072c8 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6818      	ldr	r0, [r3, #0]
 8007206:	683b      	ldr	r3, [r7, #0]
 8007208:	6899      	ldr	r1, [r3, #8]
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	68db      	ldr	r3, [r3, #12]
 8007212:	f000 f9ab 	bl	800756c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68ba      	ldr	r2, [r7, #8]
 800722c:	609a      	str	r2, [r3, #8]
      break;
 800722e:	e04f      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6818      	ldr	r0, [r3, #0]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	6899      	ldr	r1, [r3, #8]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	685a      	ldr	r2, [r3, #4]
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	f000 f994 	bl	800756c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689a      	ldr	r2, [r3, #8]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007252:	609a      	str	r2, [r3, #8]
      break;
 8007254:	e03c      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6818      	ldr	r0, [r3, #0]
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6859      	ldr	r1, [r3, #4]
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	461a      	mov	r2, r3
 8007264:	f000 f908 	bl	8007478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	2150      	movs	r1, #80	; 0x50
 800726e:	4618      	mov	r0, r3
 8007270:	f000 f961 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8007274:	e02c      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6818      	ldr	r0, [r3, #0]
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	6859      	ldr	r1, [r3, #4]
 800727e:	683b      	ldr	r3, [r7, #0]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	461a      	mov	r2, r3
 8007284:	f000 f927 	bl	80074d6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2160      	movs	r1, #96	; 0x60
 800728e:	4618      	mov	r0, r3
 8007290:	f000 f951 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 8007294:	e01c      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6818      	ldr	r0, [r3, #0]
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	6859      	ldr	r1, [r3, #4]
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	68db      	ldr	r3, [r3, #12]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f000 f8e8 	bl	8007478 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	4618      	mov	r0, r3
 80072b0:	f000 f941 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 80072b4:	e00c      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681a      	ldr	r2, [r3, #0]
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f000 f938 	bl	8007536 <TIM_ITRx_SetConfig>
      break;
 80072c6:	e003      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>
    }

    default:
      status = HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	73fb      	strb	r3, [r7, #15]
      break;
 80072cc:	e000      	b.n	80072d0 <HAL_TIM_ConfigClockSource+0x162>
      break;
 80072ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80072e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072f2:	bf00      	nop
 80072f4:	370c      	adds	r7, #12
 80072f6:	46bd      	mov	sp, r7
 80072f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fc:	4770      	bx	lr

080072fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072fe:	b480      	push	{r7}
 8007300:	b083      	sub	sp, #12
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007306:	bf00      	nop
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr

08007312 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007312:	b480      	push	{r7}
 8007314:	b083      	sub	sp, #12
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800731a:	bf00      	nop
 800731c:	370c      	adds	r7, #12
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr

08007326 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007326:	b480      	push	{r7}
 8007328:	b083      	sub	sp, #12
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr
	...

0800733c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800733c:	b480      	push	{r7}
 800733e:	b085      	sub	sp, #20
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
 8007344:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a42      	ldr	r2, [pc, #264]	; (8007458 <TIM_Base_SetConfig+0x11c>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d013      	beq.n	800737c <TIM_Base_SetConfig+0x40>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735a:	d00f      	beq.n	800737c <TIM_Base_SetConfig+0x40>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a3f      	ldr	r2, [pc, #252]	; (800745c <TIM_Base_SetConfig+0x120>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d00b      	beq.n	800737c <TIM_Base_SetConfig+0x40>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a3e      	ldr	r2, [pc, #248]	; (8007460 <TIM_Base_SetConfig+0x124>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d007      	beq.n	800737c <TIM_Base_SetConfig+0x40>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a3d      	ldr	r2, [pc, #244]	; (8007464 <TIM_Base_SetConfig+0x128>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d003      	beq.n	800737c <TIM_Base_SetConfig+0x40>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a3c      	ldr	r2, [pc, #240]	; (8007468 <TIM_Base_SetConfig+0x12c>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d108      	bne.n	800738e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007382:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	4313      	orrs	r3, r2
 800738c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a31      	ldr	r2, [pc, #196]	; (8007458 <TIM_Base_SetConfig+0x11c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d01f      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800739c:	d01b      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a2e      	ldr	r2, [pc, #184]	; (800745c <TIM_Base_SetConfig+0x120>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d017      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a2d      	ldr	r2, [pc, #180]	; (8007460 <TIM_Base_SetConfig+0x124>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d013      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	4a2c      	ldr	r2, [pc, #176]	; (8007464 <TIM_Base_SetConfig+0x128>)
 80073b2:	4293      	cmp	r3, r2
 80073b4:	d00f      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a2c      	ldr	r2, [pc, #176]	; (800746c <TIM_Base_SetConfig+0x130>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d00b      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2b      	ldr	r2, [pc, #172]	; (8007470 <TIM_Base_SetConfig+0x134>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d007      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2a      	ldr	r2, [pc, #168]	; (8007474 <TIM_Base_SetConfig+0x138>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d003      	beq.n	80073d6 <TIM_Base_SetConfig+0x9a>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a25      	ldr	r2, [pc, #148]	; (8007468 <TIM_Base_SetConfig+0x12c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d108      	bne.n	80073e8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	68db      	ldr	r3, [r3, #12]
 80073e2:	68fa      	ldr	r2, [r7, #12]
 80073e4:	4313      	orrs	r3, r2
 80073e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	695b      	ldr	r3, [r3, #20]
 80073f2:	4313      	orrs	r3, r2
 80073f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	689a      	ldr	r2, [r3, #8]
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a12      	ldr	r2, [pc, #72]	; (8007458 <TIM_Base_SetConfig+0x11c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d013      	beq.n	800743c <TIM_Base_SetConfig+0x100>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a13      	ldr	r2, [pc, #76]	; (8007464 <TIM_Base_SetConfig+0x128>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d00f      	beq.n	800743c <TIM_Base_SetConfig+0x100>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a13      	ldr	r2, [pc, #76]	; (800746c <TIM_Base_SetConfig+0x130>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00b      	beq.n	800743c <TIM_Base_SetConfig+0x100>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a12      	ldr	r2, [pc, #72]	; (8007470 <TIM_Base_SetConfig+0x134>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <TIM_Base_SetConfig+0x100>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a11      	ldr	r2, [pc, #68]	; (8007474 <TIM_Base_SetConfig+0x138>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d003      	beq.n	800743c <TIM_Base_SetConfig+0x100>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <TIM_Base_SetConfig+0x12c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d103      	bne.n	8007444 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	691a      	ldr	r2, [r3, #16]
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	615a      	str	r2, [r3, #20]
}
 800744a:	bf00      	nop
 800744c:	3714      	adds	r7, #20
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr
 8007456:	bf00      	nop
 8007458:	40012c00 	.word	0x40012c00
 800745c:	40000400 	.word	0x40000400
 8007460:	40000800 	.word	0x40000800
 8007464:	40013400 	.word	0x40013400
 8007468:	40015000 	.word	0x40015000
 800746c:	40014000 	.word	0x40014000
 8007470:	40014400 	.word	0x40014400
 8007474:	40014800 	.word	0x40014800

08007478 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6a1b      	ldr	r3, [r3, #32]
 8007488:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	f023 0201 	bic.w	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800749c:	693b      	ldr	r3, [r7, #16]
 800749e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	011b      	lsls	r3, r3, #4
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f023 030a 	bic.w	r3, r3, #10
 80074b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80074b6:	697a      	ldr	r2, [r7, #20]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	4313      	orrs	r3, r2
 80074bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	693a      	ldr	r2, [r7, #16]
 80074c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	697a      	ldr	r2, [r7, #20]
 80074c8:	621a      	str	r2, [r3, #32]
}
 80074ca:	bf00      	nop
 80074cc:	371c      	adds	r7, #28
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr

080074d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074d6:	b480      	push	{r7}
 80074d8:	b087      	sub	sp, #28
 80074da:	af00      	add	r7, sp, #0
 80074dc:	60f8      	str	r0, [r7, #12]
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a1b      	ldr	r3, [r3, #32]
 80074e6:	f023 0210 	bic.w	r2, r3, #16
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	6a1b      	ldr	r3, [r3, #32]
 80074f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007500:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	031b      	lsls	r3, r3, #12
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4313      	orrs	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800750c:	693b      	ldr	r3, [r7, #16]
 800750e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007512:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007514:	68bb      	ldr	r3, [r7, #8]
 8007516:	011b      	lsls	r3, r3, #4
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	4313      	orrs	r3, r2
 800751c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	697a      	ldr	r2, [r7, #20]
 8007522:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	693a      	ldr	r2, [r7, #16]
 8007528:	621a      	str	r2, [r3, #32]
}
 800752a:	bf00      	nop
 800752c:	371c      	adds	r7, #28
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007536:	b480      	push	{r7}
 8007538:	b085      	sub	sp, #20
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
 800753e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800754c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4313      	orrs	r3, r2
 8007554:	f043 0307 	orr.w	r3, r3, #7
 8007558:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	68fa      	ldr	r2, [r7, #12]
 800755e:	609a      	str	r2, [r3, #8]
}
 8007560:	bf00      	nop
 8007562:	3714      	adds	r7, #20
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	607a      	str	r2, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007586:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	021a      	lsls	r2, r3, #8
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	431a      	orrs	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	4313      	orrs	r3, r2
 8007594:	697a      	ldr	r2, [r7, #20]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	697a      	ldr	r2, [r7, #20]
 800759e:	609a      	str	r2, [r3, #8]
}
 80075a0:	bf00      	nop
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b085      	sub	sp, #20
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e06d      	b.n	80076a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2202      	movs	r2, #2
 80075d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a30      	ldr	r2, [pc, #192]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a2f      	ldr	r2, [pc, #188]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a2d      	ldr	r2, [pc, #180]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d108      	bne.n	8007614 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007608:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800761a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	68fa      	ldr	r2, [r7, #12]
 8007622:	4313      	orrs	r3, r2
 8007624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	68fa      	ldr	r2, [r7, #12]
 800762c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a1e      	ldr	r2, [pc, #120]	; (80076ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d01d      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007640:	d018      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a1c      	ldr	r2, [pc, #112]	; (80076b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d013      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a1a      	ldr	r2, [pc, #104]	; (80076bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d00e      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a15      	ldr	r2, [pc, #84]	; (80076b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d009      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a16      	ldr	r2, [pc, #88]	; (80076c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d004      	beq.n	8007674 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a11      	ldr	r2, [pc, #68]	; (80076b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d10c      	bne.n	800768e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800767a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	4313      	orrs	r3, r2
 8007684:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2201      	movs	r2, #1
 8007692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800769e:	2300      	movs	r3, #0
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	40012c00 	.word	0x40012c00
 80076b0:	40013400 	.word	0x40013400
 80076b4:	40015000 	.word	0x40015000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40014000 	.word	0x40014000

080076c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d101      	bne.n	8007712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800770e:	2301      	movs	r3, #1
 8007710:	e040      	b.n	8007794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007716:	2b00      	cmp	r3, #0
 8007718:	d106      	bne.n	8007728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2200      	movs	r2, #0
 800771e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f7fb f96e 	bl	8002a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2224      	movs	r2, #36	; 0x24
 800772c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f022 0201 	bic.w	r2, r2, #1
 800773c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 fc0e 	bl	8007f60 <UART_SetConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	2b01      	cmp	r3, #1
 8007748:	d101      	bne.n	800774e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e022      	b.n	8007794 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007752:	2b00      	cmp	r3, #0
 8007754:	d002      	beq.n	800775c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 fdd6 	bl	8008308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685a      	ldr	r2, [r3, #4]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800776a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	689a      	ldr	r2, [r3, #8]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800777a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f042 0201 	orr.w	r2, r2, #1
 800778a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fe5d 	bl	800844c <UART_CheckIdleState>
 8007792:	4603      	mov	r3, r0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3708      	adds	r7, #8
 8007798:	46bd      	mov	sp, r7
 800779a:	bd80      	pop	{r7, pc}

0800779c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800779c:	b580      	push	{r7, lr}
 800779e:	b08a      	sub	sp, #40	; 0x28
 80077a0:	af02      	add	r7, sp, #8
 80077a2:	60f8      	str	r0, [r7, #12]
 80077a4:	60b9      	str	r1, [r7, #8]
 80077a6:	603b      	str	r3, [r7, #0]
 80077a8:	4613      	mov	r3, r2
 80077aa:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80077b0:	2b20      	cmp	r3, #32
 80077b2:	f040 8082 	bne.w	80078ba <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d002      	beq.n	80077c2 <HAL_UART_Transmit+0x26>
 80077bc:	88fb      	ldrh	r3, [r7, #6]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	e07a      	b.n	80078bc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d101      	bne.n	80077d4 <HAL_UART_Transmit+0x38>
 80077d0:	2302      	movs	r3, #2
 80077d2:	e073      	b.n	80078bc <HAL_UART_Transmit+0x120>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2200      	movs	r2, #0
 80077e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	2221      	movs	r2, #33	; 0x21
 80077e8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80077ea:	f7fb fde9 	bl	80033c0 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	88fa      	ldrh	r2, [r7, #6]
 80077f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	88fa      	ldrh	r2, [r7, #6]
 80077fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007808:	d108      	bne.n	800781c <HAL_UART_Transmit+0x80>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d104      	bne.n	800781c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007812:	2300      	movs	r3, #0
 8007814:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	e003      	b.n	8007824 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800782c:	e02d      	b.n	800788a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	9300      	str	r3, [sp, #0]
 8007832:	697b      	ldr	r3, [r7, #20]
 8007834:	2200      	movs	r2, #0
 8007836:	2180      	movs	r1, #128	; 0x80
 8007838:	68f8      	ldr	r0, [r7, #12]
 800783a:	f000 fe50 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d001      	beq.n	8007848 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007844:	2303      	movs	r3, #3
 8007846:	e039      	b.n	80078bc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d10b      	bne.n	8007866 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	881a      	ldrh	r2, [r3, #0]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800785a:	b292      	uxth	r2, r2
 800785c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	3302      	adds	r3, #2
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	e008      	b.n	8007878 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	781a      	ldrb	r2, [r3, #0]
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	b292      	uxth	r2, r2
 8007870:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	3301      	adds	r3, #1
 8007876:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800787e:	b29b      	uxth	r3, r3
 8007880:	3b01      	subs	r3, #1
 8007882:	b29a      	uxth	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007890:	b29b      	uxth	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1cb      	bne.n	800782e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	2200      	movs	r2, #0
 800789e:	2140      	movs	r1, #64	; 0x40
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	f000 fe1c 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80078ac:	2303      	movs	r3, #3
 80078ae:	e005      	b.n	80078bc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2220      	movs	r2, #32
 80078b4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80078b6:	2300      	movs	r3, #0
 80078b8:	e000      	b.n	80078bc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80078ba:	2302      	movs	r3, #2
  }
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3720      	adds	r7, #32
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08a      	sub	sp, #40	; 0x28
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	4613      	mov	r3, r2
 80078d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078d6:	2b20      	cmp	r3, #32
 80078d8:	d13d      	bne.n	8007956 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d002      	beq.n	80078e6 <HAL_UART_Receive_IT+0x22>
 80078e0:	88fb      	ldrh	r3, [r7, #6]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d101      	bne.n	80078ea <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80078e6:	2301      	movs	r3, #1
 80078e8:	e036      	b.n	8007958 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d101      	bne.n	80078f8 <HAL_UART_Receive_IT+0x34>
 80078f4:	2302      	movs	r3, #2
 80078f6:	e02f      	b.n	8007958 <HAL_UART_Receive_IT+0x94>
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2201      	movs	r2, #1
 80078fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	685b      	ldr	r3, [r3, #4]
 800790c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007910:	2b00      	cmp	r3, #0
 8007912:	d018      	beq.n	8007946 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800791a:	697b      	ldr	r3, [r7, #20]
 800791c:	e853 3f00 	ldrex	r3, [r3]
 8007920:	613b      	str	r3, [r7, #16]
   return(result);
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007928:	627b      	str	r3, [r7, #36]	; 0x24
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	461a      	mov	r2, r3
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	623b      	str	r3, [r7, #32]
 8007934:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007936:	69f9      	ldr	r1, [r7, #28]
 8007938:	6a3a      	ldr	r2, [r7, #32]
 800793a:	e841 2300 	strex	r3, r2, [r1]
 800793e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007940:	69bb      	ldr	r3, [r7, #24]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d1e6      	bne.n	8007914 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007946:	88fb      	ldrh	r3, [r7, #6]
 8007948:	461a      	mov	r2, r3
 800794a:	68b9      	ldr	r1, [r7, #8]
 800794c:	68f8      	ldr	r0, [r7, #12]
 800794e:	f000 fe8b 	bl	8008668 <UART_Start_Receive_IT>
 8007952:	4603      	mov	r3, r0
 8007954:	e000      	b.n	8007958 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007956:	2302      	movs	r3, #2
  }
}
 8007958:	4618      	mov	r0, r3
 800795a:	3728      	adds	r7, #40	; 0x28
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b0ba      	sub	sp, #232	; 0xe8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	69db      	ldr	r3, [r3, #28]
 800796e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	689b      	ldr	r3, [r3, #8]
 8007982:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007986:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800798a:	f640 030f 	movw	r3, #2063	; 0x80f
 800798e:	4013      	ands	r3, r2
 8007990:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007994:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007998:	2b00      	cmp	r3, #0
 800799a:	d115      	bne.n	80079c8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800799c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079a0:	f003 0320 	and.w	r3, r3, #32
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d00f      	beq.n	80079c8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ac:	f003 0320 	and.w	r3, r3, #32
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d009      	beq.n	80079c8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	f000 82a4 	beq.w	8007f06 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	4798      	blx	r3
      }
      return;
 80079c6:	e29e      	b.n	8007f06 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80079c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 8117 	beq.w	8007c00 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079d6:	f003 0301 	and.w	r3, r3, #1
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079de:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079e2:	4b85      	ldr	r3, [pc, #532]	; (8007bf8 <HAL_UART_IRQHandler+0x298>)
 80079e4:	4013      	ands	r3, r2
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	f000 810a 	beq.w	8007c00 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d011      	beq.n	8007a1c <HAL_UART_IRQHandler+0xbc>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00b      	beq.n	8007a1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a12:	f043 0201 	orr.w	r2, r3, #1
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d011      	beq.n	8007a4c <HAL_UART_IRQHandler+0xec>
 8007a28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a2c:	f003 0301 	and.w	r3, r3, #1
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2202      	movs	r2, #2
 8007a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a42:	f043 0204 	orr.w	r2, r3, #4
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0304 	and.w	r3, r3, #4
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <HAL_UART_IRQHandler+0x11c>
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2204      	movs	r2, #4
 8007a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a72:	f043 0202 	orr.w	r2, r3, #2
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0308 	and.w	r3, r3, #8
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d017      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007a94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d00b      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	2208      	movs	r2, #8
 8007aa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aae:	f043 0208 	orr.w	r2, r3, #8
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ab8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007abc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d012      	beq.n	8007aea <HAL_UART_IRQHandler+0x18a>
 8007ac4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ac8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00c      	beq.n	8007aea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ae0:	f043 0220 	orr.w	r2, r3, #32
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	f000 820a 	beq.w	8007f0a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007af6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007afa:	f003 0320 	and.w	r3, r3, #32
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00d      	beq.n	8007b1e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d003      	beq.n	8007b1e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b24:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	689b      	ldr	r3, [r3, #8]
 8007b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b32:	2b40      	cmp	r3, #64	; 0x40
 8007b34:	d005      	beq.n	8007b42 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b3a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d04f      	beq.n	8007be2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f000 fe3c 	bl	80087c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b52:	2b40      	cmp	r3, #64	; 0x40
 8007b54:	d141      	bne.n	8007bda <HAL_UART_IRQHandler+0x27a>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b60:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b64:	e853 3f00 	ldrex	r3, [r3]
 8007b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	3308      	adds	r3, #8
 8007b7e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007b8e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b92:	e841 2300 	strex	r3, r2, [r1]
 8007b96:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007b9a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1d9      	bne.n	8007b56 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d013      	beq.n	8007bd2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bae:	4a13      	ldr	r2, [pc, #76]	; (8007bfc <HAL_UART_IRQHandler+0x29c>)
 8007bb0:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f7fd f9e8 	bl	8004f8c <HAL_DMA_Abort_IT>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d017      	beq.n	8007bf2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bc8:	687a      	ldr	r2, [r7, #4]
 8007bca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007bcc:	4610      	mov	r0, r2
 8007bce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd0:	e00f      	b.n	8007bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 f9ae 	bl	8007f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bd8:	e00b      	b.n	8007bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f000 f9aa 	bl	8007f34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be0:	e007      	b.n	8007bf2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f9a6 	bl	8007f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007bf0:	e18b      	b.n	8007f0a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf2:	bf00      	nop
    return;
 8007bf4:	e189      	b.n	8007f0a <HAL_UART_IRQHandler+0x5aa>
 8007bf6:	bf00      	nop
 8007bf8:	04000120 	.word	0x04000120
 8007bfc:	08008887 	.word	0x08008887

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	f040 8143 	bne.w	8007e90 <HAL_UART_IRQHandler+0x530>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0e:	f003 0310 	and.w	r3, r3, #16
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 813c 	beq.w	8007e90 <HAL_UART_IRQHandler+0x530>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1c:	f003 0310 	and.w	r3, r3, #16
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 8135 	beq.w	8007e90 <HAL_UART_IRQHandler+0x530>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	2210      	movs	r2, #16
 8007c2c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c38:	2b40      	cmp	r3, #64	; 0x40
 8007c3a:	f040 80b1 	bne.w	8007da0 <HAL_UART_IRQHandler+0x440>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c4a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 815d 	beq.w	8007f0e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	f080 8155 	bcs.w	8007f0e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b20      	cmp	r3, #32
 8007c76:	f000 8085 	beq.w	8007d84 <HAL_UART_IRQHandler+0x424>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007c8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007c92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ca4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007ca8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cb4:	e841 2300 	strex	r3, r2, [r1]
 8007cb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1da      	bne.n	8007c7a <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3308      	adds	r3, #8
 8007cca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cd6:	f023 0301 	bic.w	r3, r3, #1
 8007cda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	3308      	adds	r3, #8
 8007ce4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ce8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007cec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007cf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007cf4:	e841 2300 	strex	r3, r2, [r1]
 8007cf8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007cfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d1e1      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	3308      	adds	r3, #8
 8007d06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0a:	e853 3f00 	ldrex	r3, [r3]
 8007d0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	3308      	adds	r3, #8
 8007d20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d2c:	e841 2300 	strex	r3, r2, [r1]
 8007d30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e3      	bne.n	8007d00 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2220      	movs	r2, #32
 8007d3c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d54:	f023 0310 	bic.w	r3, r3, #16
 8007d58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	461a      	mov	r2, r3
 8007d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d66:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d68:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d6e:	e841 2300 	strex	r3, r2, [r1]
 8007d72:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d1e4      	bne.n	8007d44 <HAL_UART_IRQHandler+0x3e4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fd f8cb 	bl	8004f1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d90:	b29b      	uxth	r3, r3
 8007d92:	1ad3      	subs	r3, r2, r3
 8007d94:	b29b      	uxth	r3, r3
 8007d96:	4619      	mov	r1, r3
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f000 f8d5 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d9e:	e0b6      	b.n	8007f0e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dba:	b29b      	uxth	r3, r3
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 80a8 	beq.w	8007f12 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8007dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 80a3 	beq.w	8007f12 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ddc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007de0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	461a      	mov	r2, r3
 8007dea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007dee:	647b      	str	r3, [r7, #68]	; 0x44
 8007df0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007df4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e4      	bne.n	8007dcc <HAL_UART_IRQHandler+0x46c>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	3308      	adds	r3, #8
 8007e08:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	e853 3f00 	ldrex	r3, [r3]
 8007e10:	623b      	str	r3, [r7, #32]
   return(result);
 8007e12:	6a3b      	ldr	r3, [r7, #32]
 8007e14:	f023 0301 	bic.w	r3, r3, #1
 8007e18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	3308      	adds	r3, #8
 8007e22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e26:	633a      	str	r2, [r7, #48]	; 0x30
 8007e28:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e2e:	e841 2300 	strex	r3, r2, [r1]
 8007e32:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1e3      	bne.n	8007e02 <HAL_UART_IRQHandler+0x4a2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	2220      	movs	r2, #32
 8007e3e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f023 0310 	bic.w	r3, r3, #16
 8007e60:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e6e:	61fb      	str	r3, [r7, #28]
 8007e70:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	69b9      	ldr	r1, [r7, #24]
 8007e74:	69fa      	ldr	r2, [r7, #28]
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	617b      	str	r3, [r7, #20]
   return(result);
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e4      	bne.n	8007e4c <HAL_UART_IRQHandler+0x4ec>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 f85d 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e8e:	e040      	b.n	8007f12 <HAL_UART_IRQHandler+0x5b2>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00e      	beq.n	8007eba <HAL_UART_IRQHandler+0x55a>
 8007e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ea0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007eb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fe83 	bl	8008bbe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eb8:	e02e      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ebe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00e      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x584>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d008      	beq.n	8007ee4 <HAL_UART_IRQHandler+0x584>
  {
    if (huart->TxISR != NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d01d      	beq.n	8007f16 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ede:	6878      	ldr	r0, [r7, #4]
 8007ee0:	4798      	blx	r3
    }
    return;
 8007ee2:	e018      	b.n	8007f16 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d013      	beq.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
 8007ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00d      	beq.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 fcd8 	bl	80088b2 <UART_EndTransmit_IT>
    return;
 8007f02:	bf00      	nop
 8007f04:	e008      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007f06:	bf00      	nop
 8007f08:	e006      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007f0a:	bf00      	nop
 8007f0c:	e004      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007f0e:	bf00      	nop
 8007f10:	e002      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007f12:	bf00      	nop
 8007f14:	e000      	b.n	8007f18 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007f16:	bf00      	nop
  }

}
 8007f18:	37e8      	adds	r7, #232	; 0xe8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop

08007f20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b083      	sub	sp, #12
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b083      	sub	sp, #12
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f3c:	bf00      	nop
 8007f3e:	370c      	adds	r7, #12
 8007f40:	46bd      	mov	sp, r7
 8007f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f46:	4770      	bx	lr

08007f48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	460b      	mov	r3, r1
 8007f52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f54:	bf00      	nop
 8007f56:	370c      	adds	r7, #12
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b088      	sub	sp, #32
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	689a      	ldr	r2, [r3, #8]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	691b      	ldr	r3, [r3, #16]
 8007f74:	431a      	orrs	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	695b      	ldr	r3, [r3, #20]
 8007f7a:	431a      	orrs	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	69db      	ldr	r3, [r3, #28]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	4baa      	ldr	r3, [pc, #680]	; (8008234 <UART_SetConfig+0x2d4>)
 8007f8c:	4013      	ands	r3, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	6812      	ldr	r2, [r2, #0]
 8007f92:	6979      	ldr	r1, [r7, #20]
 8007f94:	430b      	orrs	r3, r1
 8007f96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	68da      	ldr	r2, [r3, #12]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	430a      	orrs	r2, r1
 8007fac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6a1b      	ldr	r3, [r3, #32]
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4313      	orrs	r3, r2
 8007fbc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	430a      	orrs	r2, r1
 8007fd0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a98      	ldr	r2, [pc, #608]	; (8008238 <UART_SetConfig+0x2d8>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d121      	bne.n	8008020 <UART_SetConfig+0xc0>
 8007fdc:	4b97      	ldr	r3, [pc, #604]	; (800823c <UART_SetConfig+0x2dc>)
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	f003 0303 	and.w	r3, r3, #3
 8007fe4:	2b03      	cmp	r3, #3
 8007fe6:	d817      	bhi.n	8008018 <UART_SetConfig+0xb8>
 8007fe8:	a201      	add	r2, pc, #4	; (adr r2, 8007ff0 <UART_SetConfig+0x90>)
 8007fea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fee:	bf00      	nop
 8007ff0:	08008001 	.word	0x08008001
 8007ff4:	0800800d 	.word	0x0800800d
 8007ff8:	08008013 	.word	0x08008013
 8007ffc:	08008007 	.word	0x08008007
 8008000:	2301      	movs	r3, #1
 8008002:	77fb      	strb	r3, [r7, #31]
 8008004:	e0b2      	b.n	800816c <UART_SetConfig+0x20c>
 8008006:	2302      	movs	r3, #2
 8008008:	77fb      	strb	r3, [r7, #31]
 800800a:	e0af      	b.n	800816c <UART_SetConfig+0x20c>
 800800c:	2304      	movs	r3, #4
 800800e:	77fb      	strb	r3, [r7, #31]
 8008010:	e0ac      	b.n	800816c <UART_SetConfig+0x20c>
 8008012:	2308      	movs	r3, #8
 8008014:	77fb      	strb	r3, [r7, #31]
 8008016:	e0a9      	b.n	800816c <UART_SetConfig+0x20c>
 8008018:	2310      	movs	r3, #16
 800801a:	77fb      	strb	r3, [r7, #31]
 800801c:	bf00      	nop
 800801e:	e0a5      	b.n	800816c <UART_SetConfig+0x20c>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a86      	ldr	r2, [pc, #536]	; (8008240 <UART_SetConfig+0x2e0>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d123      	bne.n	8008072 <UART_SetConfig+0x112>
 800802a:	4b84      	ldr	r3, [pc, #528]	; (800823c <UART_SetConfig+0x2dc>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008032:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008036:	d012      	beq.n	800805e <UART_SetConfig+0xfe>
 8008038:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800803c:	d802      	bhi.n	8008044 <UART_SetConfig+0xe4>
 800803e:	2b00      	cmp	r3, #0
 8008040:	d007      	beq.n	8008052 <UART_SetConfig+0xf2>
 8008042:	e012      	b.n	800806a <UART_SetConfig+0x10a>
 8008044:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008048:	d00c      	beq.n	8008064 <UART_SetConfig+0x104>
 800804a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800804e:	d003      	beq.n	8008058 <UART_SetConfig+0xf8>
 8008050:	e00b      	b.n	800806a <UART_SetConfig+0x10a>
 8008052:	2300      	movs	r3, #0
 8008054:	77fb      	strb	r3, [r7, #31]
 8008056:	e089      	b.n	800816c <UART_SetConfig+0x20c>
 8008058:	2302      	movs	r3, #2
 800805a:	77fb      	strb	r3, [r7, #31]
 800805c:	e086      	b.n	800816c <UART_SetConfig+0x20c>
 800805e:	2304      	movs	r3, #4
 8008060:	77fb      	strb	r3, [r7, #31]
 8008062:	e083      	b.n	800816c <UART_SetConfig+0x20c>
 8008064:	2308      	movs	r3, #8
 8008066:	77fb      	strb	r3, [r7, #31]
 8008068:	e080      	b.n	800816c <UART_SetConfig+0x20c>
 800806a:	2310      	movs	r3, #16
 800806c:	77fb      	strb	r3, [r7, #31]
 800806e:	bf00      	nop
 8008070:	e07c      	b.n	800816c <UART_SetConfig+0x20c>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4a73      	ldr	r2, [pc, #460]	; (8008244 <UART_SetConfig+0x2e4>)
 8008078:	4293      	cmp	r3, r2
 800807a:	d123      	bne.n	80080c4 <UART_SetConfig+0x164>
 800807c:	4b6f      	ldr	r3, [pc, #444]	; (800823c <UART_SetConfig+0x2dc>)
 800807e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008080:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008084:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008088:	d012      	beq.n	80080b0 <UART_SetConfig+0x150>
 800808a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800808e:	d802      	bhi.n	8008096 <UART_SetConfig+0x136>
 8008090:	2b00      	cmp	r3, #0
 8008092:	d007      	beq.n	80080a4 <UART_SetConfig+0x144>
 8008094:	e012      	b.n	80080bc <UART_SetConfig+0x15c>
 8008096:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800809a:	d00c      	beq.n	80080b6 <UART_SetConfig+0x156>
 800809c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80080a0:	d003      	beq.n	80080aa <UART_SetConfig+0x14a>
 80080a2:	e00b      	b.n	80080bc <UART_SetConfig+0x15c>
 80080a4:	2300      	movs	r3, #0
 80080a6:	77fb      	strb	r3, [r7, #31]
 80080a8:	e060      	b.n	800816c <UART_SetConfig+0x20c>
 80080aa:	2302      	movs	r3, #2
 80080ac:	77fb      	strb	r3, [r7, #31]
 80080ae:	e05d      	b.n	800816c <UART_SetConfig+0x20c>
 80080b0:	2304      	movs	r3, #4
 80080b2:	77fb      	strb	r3, [r7, #31]
 80080b4:	e05a      	b.n	800816c <UART_SetConfig+0x20c>
 80080b6:	2308      	movs	r3, #8
 80080b8:	77fb      	strb	r3, [r7, #31]
 80080ba:	e057      	b.n	800816c <UART_SetConfig+0x20c>
 80080bc:	2310      	movs	r3, #16
 80080be:	77fb      	strb	r3, [r7, #31]
 80080c0:	bf00      	nop
 80080c2:	e053      	b.n	800816c <UART_SetConfig+0x20c>
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a5f      	ldr	r2, [pc, #380]	; (8008248 <UART_SetConfig+0x2e8>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d123      	bne.n	8008116 <UART_SetConfig+0x1b6>
 80080ce:	4b5b      	ldr	r3, [pc, #364]	; (800823c <UART_SetConfig+0x2dc>)
 80080d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080d2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80080d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080da:	d012      	beq.n	8008102 <UART_SetConfig+0x1a2>
 80080dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080e0:	d802      	bhi.n	80080e8 <UART_SetConfig+0x188>
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d007      	beq.n	80080f6 <UART_SetConfig+0x196>
 80080e6:	e012      	b.n	800810e <UART_SetConfig+0x1ae>
 80080e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80080ec:	d00c      	beq.n	8008108 <UART_SetConfig+0x1a8>
 80080ee:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80080f2:	d003      	beq.n	80080fc <UART_SetConfig+0x19c>
 80080f4:	e00b      	b.n	800810e <UART_SetConfig+0x1ae>
 80080f6:	2300      	movs	r3, #0
 80080f8:	77fb      	strb	r3, [r7, #31]
 80080fa:	e037      	b.n	800816c <UART_SetConfig+0x20c>
 80080fc:	2302      	movs	r3, #2
 80080fe:	77fb      	strb	r3, [r7, #31]
 8008100:	e034      	b.n	800816c <UART_SetConfig+0x20c>
 8008102:	2304      	movs	r3, #4
 8008104:	77fb      	strb	r3, [r7, #31]
 8008106:	e031      	b.n	800816c <UART_SetConfig+0x20c>
 8008108:	2308      	movs	r3, #8
 800810a:	77fb      	strb	r3, [r7, #31]
 800810c:	e02e      	b.n	800816c <UART_SetConfig+0x20c>
 800810e:	2310      	movs	r3, #16
 8008110:	77fb      	strb	r3, [r7, #31]
 8008112:	bf00      	nop
 8008114:	e02a      	b.n	800816c <UART_SetConfig+0x20c>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a4c      	ldr	r2, [pc, #304]	; (800824c <UART_SetConfig+0x2ec>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d123      	bne.n	8008168 <UART_SetConfig+0x208>
 8008120:	4b46      	ldr	r3, [pc, #280]	; (800823c <UART_SetConfig+0x2dc>)
 8008122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008124:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8008128:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800812c:	d012      	beq.n	8008154 <UART_SetConfig+0x1f4>
 800812e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008132:	d802      	bhi.n	800813a <UART_SetConfig+0x1da>
 8008134:	2b00      	cmp	r3, #0
 8008136:	d007      	beq.n	8008148 <UART_SetConfig+0x1e8>
 8008138:	e012      	b.n	8008160 <UART_SetConfig+0x200>
 800813a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800813e:	d00c      	beq.n	800815a <UART_SetConfig+0x1fa>
 8008140:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008144:	d003      	beq.n	800814e <UART_SetConfig+0x1ee>
 8008146:	e00b      	b.n	8008160 <UART_SetConfig+0x200>
 8008148:	2300      	movs	r3, #0
 800814a:	77fb      	strb	r3, [r7, #31]
 800814c:	e00e      	b.n	800816c <UART_SetConfig+0x20c>
 800814e:	2302      	movs	r3, #2
 8008150:	77fb      	strb	r3, [r7, #31]
 8008152:	e00b      	b.n	800816c <UART_SetConfig+0x20c>
 8008154:	2304      	movs	r3, #4
 8008156:	77fb      	strb	r3, [r7, #31]
 8008158:	e008      	b.n	800816c <UART_SetConfig+0x20c>
 800815a:	2308      	movs	r3, #8
 800815c:	77fb      	strb	r3, [r7, #31]
 800815e:	e005      	b.n	800816c <UART_SetConfig+0x20c>
 8008160:	2310      	movs	r3, #16
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	bf00      	nop
 8008166:	e001      	b.n	800816c <UART_SetConfig+0x20c>
 8008168:	2310      	movs	r3, #16
 800816a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	69db      	ldr	r3, [r3, #28]
 8008170:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008174:	d16e      	bne.n	8008254 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8008176:	7ffb      	ldrb	r3, [r7, #31]
 8008178:	2b08      	cmp	r3, #8
 800817a:	d828      	bhi.n	80081ce <UART_SetConfig+0x26e>
 800817c:	a201      	add	r2, pc, #4	; (adr r2, 8008184 <UART_SetConfig+0x224>)
 800817e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008182:	bf00      	nop
 8008184:	080081a9 	.word	0x080081a9
 8008188:	080081b1 	.word	0x080081b1
 800818c:	080081b9 	.word	0x080081b9
 8008190:	080081cf 	.word	0x080081cf
 8008194:	080081bf 	.word	0x080081bf
 8008198:	080081cf 	.word	0x080081cf
 800819c:	080081cf 	.word	0x080081cf
 80081a0:	080081cf 	.word	0x080081cf
 80081a4:	080081c7 	.word	0x080081c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081a8:	f7fe fb30 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 80081ac:	61b8      	str	r0, [r7, #24]
        break;
 80081ae:	e013      	b.n	80081d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b0:	f7fe fb4e 	bl	8006850 <HAL_RCC_GetPCLK2Freq>
 80081b4:	61b8      	str	r0, [r7, #24]
        break;
 80081b6:	e00f      	b.n	80081d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081b8:	4b25      	ldr	r3, [pc, #148]	; (8008250 <UART_SetConfig+0x2f0>)
 80081ba:	61bb      	str	r3, [r7, #24]
        break;
 80081bc:	e00c      	b.n	80081d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081be:	f7fe faaf 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 80081c2:	61b8      	str	r0, [r7, #24]
        break;
 80081c4:	e008      	b.n	80081d8 <UART_SetConfig+0x278>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081ca:	61bb      	str	r3, [r7, #24]
        break;
 80081cc:	e004      	b.n	80081d8 <UART_SetConfig+0x278>
      default:
        pclk = 0U;
 80081ce:	2300      	movs	r3, #0
 80081d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80081d2:	2301      	movs	r3, #1
 80081d4:	77bb      	strb	r3, [r7, #30]
        break;
 80081d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081d8:	69bb      	ldr	r3, [r7, #24]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8086 	beq.w	80082ec <UART_SetConfig+0x38c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	005a      	lsls	r2, r3, #1
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	685b      	ldr	r3, [r3, #4]
 80081e8:	085b      	lsrs	r3, r3, #1
 80081ea:	441a      	add	r2, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	685b      	ldr	r3, [r3, #4]
 80081f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80081f4:	b29b      	uxth	r3, r3
 80081f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	2b0f      	cmp	r3, #15
 80081fc:	d916      	bls.n	800822c <UART_SetConfig+0x2cc>
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008204:	d212      	bcs.n	800822c <UART_SetConfig+0x2cc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	b29b      	uxth	r3, r3
 800820a:	f023 030f 	bic.w	r3, r3, #15
 800820e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008210:	693b      	ldr	r3, [r7, #16]
 8008212:	085b      	lsrs	r3, r3, #1
 8008214:	b29b      	uxth	r3, r3
 8008216:	f003 0307 	and.w	r3, r3, #7
 800821a:	b29a      	uxth	r2, r3
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	4313      	orrs	r3, r2
 8008220:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	89fa      	ldrh	r2, [r7, #14]
 8008228:	60da      	str	r2, [r3, #12]
 800822a:	e05f      	b.n	80082ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	77bb      	strb	r3, [r7, #30]
 8008230:	e05c      	b.n	80082ec <UART_SetConfig+0x38c>
 8008232:	bf00      	nop
 8008234:	efff69f3 	.word	0xefff69f3
 8008238:	40013800 	.word	0x40013800
 800823c:	40021000 	.word	0x40021000
 8008240:	40004400 	.word	0x40004400
 8008244:	40004800 	.word	0x40004800
 8008248:	40004c00 	.word	0x40004c00
 800824c:	40005000 	.word	0x40005000
 8008250:	007a1200 	.word	0x007a1200
      }
    }
  }
  else
  {
    switch (clocksource)
 8008254:	7ffb      	ldrb	r3, [r7, #31]
 8008256:	2b08      	cmp	r3, #8
 8008258:	d827      	bhi.n	80082aa <UART_SetConfig+0x34a>
 800825a:	a201      	add	r2, pc, #4	; (adr r2, 8008260 <UART_SetConfig+0x300>)
 800825c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008260:	08008285 	.word	0x08008285
 8008264:	0800828d 	.word	0x0800828d
 8008268:	08008295 	.word	0x08008295
 800826c:	080082ab 	.word	0x080082ab
 8008270:	0800829b 	.word	0x0800829b
 8008274:	080082ab 	.word	0x080082ab
 8008278:	080082ab 	.word	0x080082ab
 800827c:	080082ab 	.word	0x080082ab
 8008280:	080082a3 	.word	0x080082a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008284:	f7fe fac2 	bl	800680c <HAL_RCC_GetPCLK1Freq>
 8008288:	61b8      	str	r0, [r7, #24]
        break;
 800828a:	e013      	b.n	80082b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800828c:	f7fe fae0 	bl	8006850 <HAL_RCC_GetPCLK2Freq>
 8008290:	61b8      	str	r0, [r7, #24]
        break;
 8008292:	e00f      	b.n	80082b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008294:	4b1b      	ldr	r3, [pc, #108]	; (8008304 <UART_SetConfig+0x3a4>)
 8008296:	61bb      	str	r3, [r7, #24]
        break;
 8008298:	e00c      	b.n	80082b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829a:	f7fe fa41 	bl	8006720 <HAL_RCC_GetSysClockFreq>
 800829e:	61b8      	str	r0, [r7, #24]
        break;
 80082a0:	e008      	b.n	80082b4 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082a6:	61bb      	str	r3, [r7, #24]
        break;
 80082a8:	e004      	b.n	80082b4 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 80082aa:	2300      	movs	r3, #0
 80082ac:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	77bb      	strb	r3, [r7, #30]
        break;
 80082b2:	bf00      	nop
    }

    if (pclk != 0U)
 80082b4:	69bb      	ldr	r3, [r7, #24]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d018      	beq.n	80082ec <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	085a      	lsrs	r2, r3, #1
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	441a      	add	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	2b0f      	cmp	r3, #15
 80082d4:	d908      	bls.n	80082e8 <UART_SetConfig+0x388>
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082dc:	d204      	bcs.n	80082e8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = usartdiv;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	60da      	str	r2, [r3, #12]
 80082e6:	e001      	b.n	80082ec <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082f8:	7fbb      	ldrb	r3, [r7, #30]
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3720      	adds	r7, #32
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	007a1200 	.word	0x007a1200

08008308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008308:	b480      	push	{r7}
 800830a:	b083      	sub	sp, #12
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008314:	f003 0301 	and.w	r3, r3, #1
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00a      	beq.n	8008332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	685b      	ldr	r3, [r3, #4]
 8008322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008336:	f003 0302 	and.w	r3, r3, #2
 800833a:	2b00      	cmp	r3, #0
 800833c:	d00a      	beq.n	8008354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008358:	f003 0304 	and.w	r3, r3, #4
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00a      	beq.n	8008376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	430a      	orrs	r2, r1
 8008374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d00a      	beq.n	8008398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	685b      	ldr	r3, [r3, #4]
 8008388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	430a      	orrs	r2, r1
 8008396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d00a      	beq.n	80083ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	430a      	orrs	r2, r1
 80083b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083be:	f003 0320 	and.w	r3, r3, #32
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d00a      	beq.n	80083dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	430a      	orrs	r2, r1
 80083da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d01a      	beq.n	800841e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008406:	d10a      	bne.n	800841e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	430a      	orrs	r2, r1
 800841c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008426:	2b00      	cmp	r3, #0
 8008428:	d00a      	beq.n	8008440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	605a      	str	r2, [r3, #4]
  }
}
 8008440:	bf00      	nop
 8008442:	370c      	adds	r7, #12
 8008444:	46bd      	mov	sp, r7
 8008446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844a:	4770      	bx	lr

0800844c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b086      	sub	sp, #24
 8008450:	af02      	add	r7, sp, #8
 8008452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800845c:	f7fa ffb0 	bl	80033c0 <HAL_GetTick>
 8008460:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f003 0308 	and.w	r3, r3, #8
 800846c:	2b08      	cmp	r3, #8
 800846e:	d10e      	bne.n	800848e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800847e:	6878      	ldr	r0, [r7, #4]
 8008480:	f000 f82d 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 8008484:	4603      	mov	r3, r0
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800848a:	2303      	movs	r3, #3
 800848c:	e023      	b.n	80084d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b04      	cmp	r3, #4
 800849a:	d10e      	bne.n	80084ba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800849c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80084a0:	9300      	str	r3, [sp, #0]
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 f817 	bl	80084de <UART_WaitOnFlagUntilTimeout>
 80084b0:	4603      	mov	r3, r0
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d001      	beq.n	80084ba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e00d      	b.n	80084d6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2220      	movs	r2, #32
 80084be:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2220      	movs	r2, #32
 80084c4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2200      	movs	r2, #0
 80084ca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3710      	adds	r7, #16
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b09c      	sub	sp, #112	; 0x70
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	60f8      	str	r0, [r7, #12]
 80084e6:	60b9      	str	r1, [r7, #8]
 80084e8:	603b      	str	r3, [r7, #0]
 80084ea:	4613      	mov	r3, r2
 80084ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084ee:	e0a5      	b.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084f6:	f000 80a1 	beq.w	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084fa:	f7fa ff61 	bl	80033c0 <HAL_GetTick>
 80084fe:	4602      	mov	r2, r0
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	1ad3      	subs	r3, r2, r3
 8008504:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <UART_WaitOnFlagUntilTimeout+0x32>
 800850a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800850c:	2b00      	cmp	r3, #0
 800850e:	d13e      	bne.n	800858e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008518:	e853 3f00 	ldrex	r3, [r3]
 800851c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800851e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008520:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008524:	667b      	str	r3, [r7, #100]	; 0x64
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	461a      	mov	r2, r3
 800852c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800852e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008530:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008532:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008536:	e841 2300 	strex	r3, r2, [r1]
 800853a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800853c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800853e:	2b00      	cmp	r3, #0
 8008540:	d1e6      	bne.n	8008510 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	3308      	adds	r3, #8
 8008548:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800854c:	e853 3f00 	ldrex	r3, [r3]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	f023 0301 	bic.w	r3, r3, #1
 8008558:	663b      	str	r3, [r7, #96]	; 0x60
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3308      	adds	r3, #8
 8008560:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008562:	64ba      	str	r2, [r7, #72]	; 0x48
 8008564:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008568:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800856a:	e841 2300 	strex	r3, r2, [r1]
 800856e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008570:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1e5      	bne.n	8008542 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	2220      	movs	r2, #32
 800857a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	2220      	movs	r2, #32
 8008580:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2200      	movs	r2, #0
 8008586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800858a:	2303      	movs	r3, #3
 800858c:	e067      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f003 0304 	and.w	r3, r3, #4
 8008598:	2b00      	cmp	r3, #0
 800859a:	d04f      	beq.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80085aa:	d147      	bne.n	800863c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085be:	e853 3f00 	ldrex	r3, [r3]
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	461a      	mov	r2, r3
 80085d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085d4:	637b      	str	r3, [r7, #52]	; 0x34
 80085d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80085da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80085dc:	e841 2300 	strex	r3, r2, [r1]
 80085e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1e6      	bne.n	80085b6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3308      	adds	r3, #8
 80085ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	613b      	str	r3, [r7, #16]
   return(result);
 80085f8:	693b      	ldr	r3, [r7, #16]
 80085fa:	f023 0301 	bic.w	r3, r3, #1
 80085fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3308      	adds	r3, #8
 8008606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008608:	623a      	str	r2, [r7, #32]
 800860a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800860c:	69f9      	ldr	r1, [r7, #28]
 800860e:	6a3a      	ldr	r2, [r7, #32]
 8008610:	e841 2300 	strex	r3, r2, [r1]
 8008614:	61bb      	str	r3, [r7, #24]
   return(result);
 8008616:	69bb      	ldr	r3, [r7, #24]
 8008618:	2b00      	cmp	r3, #0
 800861a:	d1e5      	bne.n	80085e8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	2220      	movs	r2, #32
 8008620:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	2220      	movs	r2, #32
 8008626:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2220      	movs	r2, #32
 800862c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008638:	2303      	movs	r3, #3
 800863a:	e010      	b.n	800865e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	69da      	ldr	r2, [r3, #28]
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	4013      	ands	r3, r2
 8008646:	68ba      	ldr	r2, [r7, #8]
 8008648:	429a      	cmp	r2, r3
 800864a:	bf0c      	ite	eq
 800864c:	2301      	moveq	r3, #1
 800864e:	2300      	movne	r3, #0
 8008650:	b2db      	uxtb	r3, r3
 8008652:	461a      	mov	r2, r3
 8008654:	79fb      	ldrb	r3, [r7, #7]
 8008656:	429a      	cmp	r2, r3
 8008658:	f43f af4a 	beq.w	80084f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3770      	adds	r7, #112	; 0x70
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008668:	b480      	push	{r7}
 800866a:	b091      	sub	sp, #68	; 0x44
 800866c:	af00      	add	r7, sp, #0
 800866e:	60f8      	str	r0, [r7, #12]
 8008670:	60b9      	str	r1, [r7, #8]
 8008672:	4613      	mov	r3, r2
 8008674:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	68ba      	ldr	r2, [r7, #8]
 800867a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	88fa      	ldrh	r2, [r7, #6]
 8008680:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	88fa      	ldrh	r2, [r7, #6]
 8008688:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2200      	movs	r2, #0
 8008690:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800869a:	d10e      	bne.n	80086ba <UART_Start_Receive_IT+0x52>
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	691b      	ldr	r3, [r3, #16]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d105      	bne.n	80086b0 <UART_Start_Receive_IT+0x48>
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80086aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086ae:	e02d      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22ff      	movs	r2, #255	; 0xff
 80086b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086b8:	e028      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d10d      	bne.n	80086de <UART_Start_Receive_IT+0x76>
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	691b      	ldr	r3, [r3, #16]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d104      	bne.n	80086d4 <UART_Start_Receive_IT+0x6c>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	22ff      	movs	r2, #255	; 0xff
 80086ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086d2:	e01b      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	227f      	movs	r2, #127	; 0x7f
 80086d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086dc:	e016      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	689b      	ldr	r3, [r3, #8]
 80086e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80086e6:	d10d      	bne.n	8008704 <UART_Start_Receive_IT+0x9c>
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	691b      	ldr	r3, [r3, #16]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d104      	bne.n	80086fa <UART_Start_Receive_IT+0x92>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	227f      	movs	r2, #127	; 0x7f
 80086f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80086f8:	e008      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	223f      	movs	r2, #63	; 0x3f
 80086fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008702:	e003      	b.n	800870c <UART_Start_Receive_IT+0xa4>
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2200      	movs	r2, #0
 8008710:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	2222      	movs	r2, #34	; 0x22
 8008718:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	3308      	adds	r3, #8
 8008720:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800872a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872c:	f043 0301 	orr.w	r3, r3, #1
 8008730:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	3308      	adds	r3, #8
 8008738:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800873a:	637a      	str	r2, [r7, #52]	; 0x34
 800873c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e5      	bne.n	800871a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008756:	d107      	bne.n	8008768 <UART_Start_Receive_IT+0x100>
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d103      	bne.n	8008768 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4a15      	ldr	r2, [pc, #84]	; (80087b8 <UART_Start_Receive_IT+0x150>)
 8008764:	665a      	str	r2, [r3, #100]	; 0x64
 8008766:	e002      	b.n	800876e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	4a14      	ldr	r2, [pc, #80]	; (80087bc <UART_Start_Receive_IT+0x154>)
 800876c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2200      	movs	r2, #0
 8008772:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800878a:	63bb      	str	r3, [r7, #56]	; 0x38
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461a      	mov	r2, r3
 8008792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008794:	623b      	str	r3, [r7, #32]
 8008796:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e6      	bne.n	8008776 <UART_Start_Receive_IT+0x10e>
  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3744      	adds	r7, #68	; 0x44
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	08008a63 	.word	0x08008a63
 80087bc:	08008907 	.word	0x08008907

080087c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087c0:	b480      	push	{r7}
 80087c2:	b095      	sub	sp, #84	; 0x54
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087d0:	e853 3f00 	ldrex	r3, [r3]
 80087d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	461a      	mov	r2, r3
 80087e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087e6:	643b      	str	r3, [r7, #64]	; 0x40
 80087e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80087ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80087ee:	e841 2300 	strex	r3, r2, [r1]
 80087f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d1e6      	bne.n	80087c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	3308      	adds	r3, #8
 8008800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008802:	6a3b      	ldr	r3, [r7, #32]
 8008804:	e853 3f00 	ldrex	r3, [r3]
 8008808:	61fb      	str	r3, [r7, #28]
   return(result);
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	f023 0301 	bic.w	r3, r3, #1
 8008810:	64bb      	str	r3, [r7, #72]	; 0x48
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	3308      	adds	r3, #8
 8008818:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800881a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800881c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008822:	e841 2300 	strex	r3, r2, [r1]
 8008826:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1e5      	bne.n	80087fa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008832:	2b01      	cmp	r3, #1
 8008834:	d118      	bne.n	8008868 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	e853 3f00 	ldrex	r3, [r3]
 8008842:	60bb      	str	r3, [r7, #8]
   return(result);
 8008844:	68bb      	ldr	r3, [r7, #8]
 8008846:	f023 0310 	bic.w	r3, r3, #16
 800884a:	647b      	str	r3, [r7, #68]	; 0x44
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	461a      	mov	r2, r3
 8008852:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008854:	61bb      	str	r3, [r7, #24]
 8008856:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6979      	ldr	r1, [r7, #20]
 800885a:	69ba      	ldr	r2, [r7, #24]
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	613b      	str	r3, [r7, #16]
   return(result);
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e6      	bne.n	8008836 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2220      	movs	r2, #32
 800886c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	2200      	movs	r2, #0
 8008872:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	665a      	str	r2, [r3, #100]	; 0x64
}
 800887a:	bf00      	nop
 800887c:	3754      	adds	r7, #84	; 0x54
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008892:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2200      	movs	r2, #0
 8008898:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2200      	movs	r2, #0
 80088a0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088a4:	68f8      	ldr	r0, [r7, #12]
 80088a6:	f7ff fb45 	bl	8007f34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088aa:	bf00      	nop
 80088ac:	3710      	adds	r7, #16
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b088      	sub	sp, #32
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	e853 3f00 	ldrex	r3, [r3]
 80088c6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088ce:	61fb      	str	r3, [r7, #28]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	461a      	mov	r2, r3
 80088d6:	69fb      	ldr	r3, [r7, #28]
 80088d8:	61bb      	str	r3, [r7, #24]
 80088da:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	613b      	str	r3, [r7, #16]
   return(result);
 80088e6:	693b      	ldr	r3, [r7, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e6      	bne.n	80088ba <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2220      	movs	r2, #32
 80088f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f7ff fb11 	bl	8007f20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088fe:	bf00      	nop
 8008900:	3720      	adds	r7, #32
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}

08008906 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008906:	b580      	push	{r7, lr}
 8008908:	b096      	sub	sp, #88	; 0x58
 800890a:	af00      	add	r7, sp, #0
 800890c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008914:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800891c:	2b22      	cmp	r3, #34	; 0x22
 800891e:	f040 8094 	bne.w	8008a4a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008928:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800892c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008930:	b2d9      	uxtb	r1, r3
 8008932:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008936:	b2da      	uxtb	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800893c:	400a      	ands	r2, r1
 800893e:	b2d2      	uxtb	r2, r2
 8008940:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008946:	1c5a      	adds	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008952:	b29b      	uxth	r3, r3
 8008954:	3b01      	subs	r3, #1
 8008956:	b29a      	uxth	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008964:	b29b      	uxth	r3, r3
 8008966:	2b00      	cmp	r3, #0
 8008968:	d177      	bne.n	8008a5a <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008972:	e853 3f00 	ldrex	r3, [r3]
 8008976:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800897a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800897e:	653b      	str	r3, [r7, #80]	; 0x50
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008988:	647b      	str	r3, [r7, #68]	; 0x44
 800898a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800898c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800898e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008990:	e841 2300 	strex	r3, r2, [r1]
 8008994:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1e6      	bne.n	800896a <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3308      	adds	r3, #8
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a6:	e853 3f00 	ldrex	r3, [r3]
 80089aa:	623b      	str	r3, [r7, #32]
   return(result);
 80089ac:	6a3b      	ldr	r3, [r7, #32]
 80089ae:	f023 0301 	bic.w	r3, r3, #1
 80089b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80089bc:	633a      	str	r2, [r7, #48]	; 0x30
 80089be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80089c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089c4:	e841 2300 	strex	r3, r2, [r1]
 80089c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80089ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d1e5      	bne.n	800899c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2220      	movs	r2, #32
 80089d4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d12e      	bne.n	8008a42 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2200      	movs	r2, #0
 80089e8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	e853 3f00 	ldrex	r3, [r3]
 80089f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f023 0310 	bic.w	r3, r3, #16
 80089fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	461a      	mov	r2, r3
 8008a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a08:	61fb      	str	r3, [r7, #28]
 8008a0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0c:	69b9      	ldr	r1, [r7, #24]
 8008a0e:	69fa      	ldr	r2, [r7, #28]
 8008a10:	e841 2300 	strex	r3, r2, [r1]
 8008a14:	617b      	str	r3, [r7, #20]
   return(result);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d1e6      	bne.n	80089ea <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f003 0310 	and.w	r3, r3, #16
 8008a26:	2b10      	cmp	r3, #16
 8008a28:	d103      	bne.n	8008a32 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2210      	movs	r2, #16
 8008a30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008a38:	4619      	mov	r1, r3
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7ff fa84 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008a40:	e00b      	b.n	8008a5a <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f7f9 f902 	bl	8001c4c <HAL_UART_RxCpltCallback>
}
 8008a48:	e007      	b.n	8008a5a <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f042 0208 	orr.w	r2, r2, #8
 8008a58:	619a      	str	r2, [r3, #24]
}
 8008a5a:	bf00      	nop
 8008a5c:	3758      	adds	r7, #88	; 0x58
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008a62:	b580      	push	{r7, lr}
 8008a64:	b096      	sub	sp, #88	; 0x58
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008a70:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a78:	2b22      	cmp	r3, #34	; 0x22
 8008a7a:	f040 8094 	bne.w	8008ba6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008a84:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a8c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008a8e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008a92:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008a96:	4013      	ands	r3, r2
 8008a98:	b29a      	uxth	r2, r3
 8008a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a9c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008aa2:	1c9a      	adds	r2, r3, #2
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008aae:	b29b      	uxth	r3, r3
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	b29a      	uxth	r2, r3
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ac0:	b29b      	uxth	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d177      	bne.n	8008bb6 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ace:	e853 3f00 	ldrex	r3, [r3]
 8008ad2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ae4:	643b      	str	r3, [r7, #64]	; 0x40
 8008ae6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008aea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e6      	bne.n	8008ac6 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6a3b      	ldr	r3, [r7, #32]
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	f023 0301 	bic.w	r3, r3, #1
 8008b0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b18:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b1a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2220      	movs	r2, #32
 8008b30:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2200      	movs	r2, #0
 8008b36:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b3c:	2b01      	cmp	r3, #1
 8008b3e:	d12e      	bne.n	8008b9e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	e853 3f00 	ldrex	r3, [r3]
 8008b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	f023 0310 	bic.w	r3, r3, #16
 8008b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	461a      	mov	r2, r3
 8008b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b64:	61bb      	str	r3, [r7, #24]
 8008b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b68:	6979      	ldr	r1, [r7, #20]
 8008b6a:	69ba      	ldr	r2, [r7, #24]
 8008b6c:	e841 2300 	strex	r3, r2, [r1]
 8008b70:	613b      	str	r3, [r7, #16]
   return(result);
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d1e6      	bne.n	8008b46 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	69db      	ldr	r3, [r3, #28]
 8008b7e:	f003 0310 	and.w	r3, r3, #16
 8008b82:	2b10      	cmp	r3, #16
 8008b84:	d103      	bne.n	8008b8e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	2210      	movs	r2, #16
 8008b8c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008b94:	4619      	mov	r1, r3
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7ff f9d6 	bl	8007f48 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008b9c:	e00b      	b.n	8008bb6 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7f9 f854 	bl	8001c4c <HAL_UART_RxCpltCallback>
}
 8008ba4:	e007      	b.n	8008bb6 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f042 0208 	orr.w	r2, r2, #8
 8008bb4:	619a      	str	r2, [r3, #24]
}
 8008bb6:	bf00      	nop
 8008bb8:	3758      	adds	r7, #88	; 0x58
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}

08008bbe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bbe:	b480      	push	{r7}
 8008bc0:	b083      	sub	sp, #12
 8008bc2:	af00      	add	r7, sp, #0
 8008bc4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bc6:	bf00      	nop
 8008bc8:	370c      	adds	r7, #12
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
	...

08008bd4 <__libc_init_array>:
 8008bd4:	b570      	push	{r4, r5, r6, lr}
 8008bd6:	4e0d      	ldr	r6, [pc, #52]	; (8008c0c <__libc_init_array+0x38>)
 8008bd8:	4c0d      	ldr	r4, [pc, #52]	; (8008c10 <__libc_init_array+0x3c>)
 8008bda:	1ba4      	subs	r4, r4, r6
 8008bdc:	10a4      	asrs	r4, r4, #2
 8008bde:	2500      	movs	r5, #0
 8008be0:	42a5      	cmp	r5, r4
 8008be2:	d109      	bne.n	8008bf8 <__libc_init_array+0x24>
 8008be4:	4e0b      	ldr	r6, [pc, #44]	; (8008c14 <__libc_init_array+0x40>)
 8008be6:	4c0c      	ldr	r4, [pc, #48]	; (8008c18 <__libc_init_array+0x44>)
 8008be8:	f001 f834 	bl	8009c54 <_init>
 8008bec:	1ba4      	subs	r4, r4, r6
 8008bee:	10a4      	asrs	r4, r4, #2
 8008bf0:	2500      	movs	r5, #0
 8008bf2:	42a5      	cmp	r5, r4
 8008bf4:	d105      	bne.n	8008c02 <__libc_init_array+0x2e>
 8008bf6:	bd70      	pop	{r4, r5, r6, pc}
 8008bf8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008bfc:	4798      	blx	r3
 8008bfe:	3501      	adds	r5, #1
 8008c00:	e7ee      	b.n	8008be0 <__libc_init_array+0xc>
 8008c02:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c06:	4798      	blx	r3
 8008c08:	3501      	adds	r5, #1
 8008c0a:	e7f2      	b.n	8008bf2 <__libc_init_array+0x1e>
 8008c0c:	08009f00 	.word	0x08009f00
 8008c10:	08009f00 	.word	0x08009f00
 8008c14:	08009f00 	.word	0x08009f00
 8008c18:	08009f04 	.word	0x08009f04

08008c1c <memset>:
 8008c1c:	4402      	add	r2, r0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d100      	bne.n	8008c26 <memset+0xa>
 8008c24:	4770      	bx	lr
 8008c26:	f803 1b01 	strb.w	r1, [r3], #1
 8008c2a:	e7f9      	b.n	8008c20 <memset+0x4>
 8008c2c:	0000      	movs	r0, r0
	...

08008c30 <sin>:
 8008c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008c32:	ec51 0b10 	vmov	r0, r1, d0
 8008c36:	4a20      	ldr	r2, [pc, #128]	; (8008cb8 <sin+0x88>)
 8008c38:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008c3c:	4293      	cmp	r3, r2
 8008c3e:	dc07      	bgt.n	8008c50 <sin+0x20>
 8008c40:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008cb0 <sin+0x80>
 8008c44:	2000      	movs	r0, #0
 8008c46:	f000 fe37 	bl	80098b8 <__kernel_sin>
 8008c4a:	ec51 0b10 	vmov	r0, r1, d0
 8008c4e:	e007      	b.n	8008c60 <sin+0x30>
 8008c50:	4a1a      	ldr	r2, [pc, #104]	; (8008cbc <sin+0x8c>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	dd09      	ble.n	8008c6a <sin+0x3a>
 8008c56:	ee10 2a10 	vmov	r2, s0
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	f7f7 fac0 	bl	80001e0 <__aeabi_dsub>
 8008c60:	ec41 0b10 	vmov	d0, r0, r1
 8008c64:	b005      	add	sp, #20
 8008c66:	f85d fb04 	ldr.w	pc, [sp], #4
 8008c6a:	4668      	mov	r0, sp
 8008c6c:	f000 f828 	bl	8008cc0 <__ieee754_rem_pio2>
 8008c70:	f000 0003 	and.w	r0, r0, #3
 8008c74:	2801      	cmp	r0, #1
 8008c76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008c7a:	ed9d 0b00 	vldr	d0, [sp]
 8008c7e:	d004      	beq.n	8008c8a <sin+0x5a>
 8008c80:	2802      	cmp	r0, #2
 8008c82:	d005      	beq.n	8008c90 <sin+0x60>
 8008c84:	b970      	cbnz	r0, 8008ca4 <sin+0x74>
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7dd      	b.n	8008c46 <sin+0x16>
 8008c8a:	f000 fa0d 	bl	80090a8 <__kernel_cos>
 8008c8e:	e7dc      	b.n	8008c4a <sin+0x1a>
 8008c90:	2001      	movs	r0, #1
 8008c92:	f000 fe11 	bl	80098b8 <__kernel_sin>
 8008c96:	ec53 2b10 	vmov	r2, r3, d0
 8008c9a:	ee10 0a10 	vmov	r0, s0
 8008c9e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008ca2:	e7dd      	b.n	8008c60 <sin+0x30>
 8008ca4:	f000 fa00 	bl	80090a8 <__kernel_cos>
 8008ca8:	e7f5      	b.n	8008c96 <sin+0x66>
 8008caa:	bf00      	nop
 8008cac:	f3af 8000 	nop.w
	...
 8008cb8:	3fe921fb 	.word	0x3fe921fb
 8008cbc:	7fefffff 	.word	0x7fefffff

08008cc0 <__ieee754_rem_pio2>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ec57 6b10 	vmov	r6, r7, d0
 8008cc8:	4bc3      	ldr	r3, [pc, #780]	; (8008fd8 <__ieee754_rem_pio2+0x318>)
 8008cca:	b08d      	sub	sp, #52	; 0x34
 8008ccc:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008cd0:	4598      	cmp	r8, r3
 8008cd2:	4604      	mov	r4, r0
 8008cd4:	9704      	str	r7, [sp, #16]
 8008cd6:	dc07      	bgt.n	8008ce8 <__ieee754_rem_pio2+0x28>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	ed84 0b00 	vstr	d0, [r4]
 8008ce0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	e027      	b.n	8008d38 <__ieee754_rem_pio2+0x78>
 8008ce8:	4bbc      	ldr	r3, [pc, #752]	; (8008fdc <__ieee754_rem_pio2+0x31c>)
 8008cea:	4598      	cmp	r8, r3
 8008cec:	dc75      	bgt.n	8008dda <__ieee754_rem_pio2+0x11a>
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	4dbb      	ldr	r5, [pc, #748]	; (8008fe0 <__ieee754_rem_pio2+0x320>)
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	ee10 0a10 	vmov	r0, s0
 8008cf8:	a3a9      	add	r3, pc, #676	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e0>)
 8008cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cfe:	4639      	mov	r1, r7
 8008d00:	dd36      	ble.n	8008d70 <__ieee754_rem_pio2+0xb0>
 8008d02:	f7f7 fa6d 	bl	80001e0 <__aeabi_dsub>
 8008d06:	45a8      	cmp	r8, r5
 8008d08:	4606      	mov	r6, r0
 8008d0a:	460f      	mov	r7, r1
 8008d0c:	d018      	beq.n	8008d40 <__ieee754_rem_pio2+0x80>
 8008d0e:	a3a6      	add	r3, pc, #664	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2e8>)
 8008d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d14:	f7f7 fa64 	bl	80001e0 <__aeabi_dsub>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	460b      	mov	r3, r1
 8008d1c:	e9c4 2300 	strd	r2, r3, [r4]
 8008d20:	4630      	mov	r0, r6
 8008d22:	4639      	mov	r1, r7
 8008d24:	f7f7 fa5c 	bl	80001e0 <__aeabi_dsub>
 8008d28:	a39f      	add	r3, pc, #636	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2e8>)
 8008d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d2e:	f7f7 fa57 	bl	80001e0 <__aeabi_dsub>
 8008d32:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d36:	2501      	movs	r5, #1
 8008d38:	4628      	mov	r0, r5
 8008d3a:	b00d      	add	sp, #52	; 0x34
 8008d3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d40:	a39b      	add	r3, pc, #620	; (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f0>)
 8008d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d46:	f7f7 fa4b 	bl	80001e0 <__aeabi_dsub>
 8008d4a:	a39b      	add	r3, pc, #620	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f8>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4606      	mov	r6, r0
 8008d52:	460f      	mov	r7, r1
 8008d54:	f7f7 fa44 	bl	80001e0 <__aeabi_dsub>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	460b      	mov	r3, r1
 8008d5c:	e9c4 2300 	strd	r2, r3, [r4]
 8008d60:	4630      	mov	r0, r6
 8008d62:	4639      	mov	r1, r7
 8008d64:	f7f7 fa3c 	bl	80001e0 <__aeabi_dsub>
 8008d68:	a393      	add	r3, pc, #588	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f8>)
 8008d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d6e:	e7de      	b.n	8008d2e <__ieee754_rem_pio2+0x6e>
 8008d70:	f7f7 fa38 	bl	80001e4 <__adddf3>
 8008d74:	45a8      	cmp	r8, r5
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	d016      	beq.n	8008daa <__ieee754_rem_pio2+0xea>
 8008d7c:	a38a      	add	r3, pc, #552	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2e8>)
 8008d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d82:	f7f7 fa2f 	bl	80001e4 <__adddf3>
 8008d86:	4602      	mov	r2, r0
 8008d88:	460b      	mov	r3, r1
 8008d8a:	e9c4 2300 	strd	r2, r3, [r4]
 8008d8e:	4630      	mov	r0, r6
 8008d90:	4639      	mov	r1, r7
 8008d92:	f7f7 fa25 	bl	80001e0 <__aeabi_dsub>
 8008d96:	a384      	add	r3, pc, #528	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2e8>)
 8008d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d9c:	f7f7 fa22 	bl	80001e4 <__adddf3>
 8008da0:	f04f 35ff 	mov.w	r5, #4294967295
 8008da4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008da8:	e7c6      	b.n	8008d38 <__ieee754_rem_pio2+0x78>
 8008daa:	a381      	add	r3, pc, #516	; (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f0>)
 8008dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db0:	f7f7 fa18 	bl	80001e4 <__adddf3>
 8008db4:	a380      	add	r3, pc, #512	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f8>)
 8008db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dba:	4606      	mov	r6, r0
 8008dbc:	460f      	mov	r7, r1
 8008dbe:	f7f7 fa11 	bl	80001e4 <__adddf3>
 8008dc2:	4602      	mov	r2, r0
 8008dc4:	460b      	mov	r3, r1
 8008dc6:	e9c4 2300 	strd	r2, r3, [r4]
 8008dca:	4630      	mov	r0, r6
 8008dcc:	4639      	mov	r1, r7
 8008dce:	f7f7 fa07 	bl	80001e0 <__aeabi_dsub>
 8008dd2:	a379      	add	r3, pc, #484	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f8>)
 8008dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd8:	e7e0      	b.n	8008d9c <__ieee754_rem_pio2+0xdc>
 8008dda:	4b82      	ldr	r3, [pc, #520]	; (8008fe4 <__ieee754_rem_pio2+0x324>)
 8008ddc:	4598      	cmp	r8, r3
 8008dde:	f300 80d0 	bgt.w	8008f82 <__ieee754_rem_pio2+0x2c2>
 8008de2:	f000 fe23 	bl	8009a2c <fabs>
 8008de6:	ec57 6b10 	vmov	r6, r7, d0
 8008dea:	ee10 0a10 	vmov	r0, s0
 8008dee:	a374      	add	r3, pc, #464	; (adr r3, 8008fc0 <__ieee754_rem_pio2+0x300>)
 8008df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df4:	4639      	mov	r1, r7
 8008df6:	f7f7 fbab 	bl	8000550 <__aeabi_dmul>
 8008dfa:	2200      	movs	r2, #0
 8008dfc:	4b7a      	ldr	r3, [pc, #488]	; (8008fe8 <__ieee754_rem_pio2+0x328>)
 8008dfe:	f7f7 f9f1 	bl	80001e4 <__adddf3>
 8008e02:	f7f7 fe3f 	bl	8000a84 <__aeabi_d2iz>
 8008e06:	4605      	mov	r5, r0
 8008e08:	f7f7 fb38 	bl	800047c <__aeabi_i2d>
 8008e0c:	a364      	add	r3, pc, #400	; (adr r3, 8008fa0 <__ieee754_rem_pio2+0x2e0>)
 8008e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e16:	f7f7 fb9b 	bl	8000550 <__aeabi_dmul>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	460b      	mov	r3, r1
 8008e1e:	4630      	mov	r0, r6
 8008e20:	4639      	mov	r1, r7
 8008e22:	f7f7 f9dd 	bl	80001e0 <__aeabi_dsub>
 8008e26:	a360      	add	r3, pc, #384	; (adr r3, 8008fa8 <__ieee754_rem_pio2+0x2e8>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	4682      	mov	sl, r0
 8008e2e:	468b      	mov	fp, r1
 8008e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e34:	f7f7 fb8c 	bl	8000550 <__aeabi_dmul>
 8008e38:	2d1f      	cmp	r5, #31
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	460f      	mov	r7, r1
 8008e3e:	dc0c      	bgt.n	8008e5a <__ieee754_rem_pio2+0x19a>
 8008e40:	1e6a      	subs	r2, r5, #1
 8008e42:	4b6a      	ldr	r3, [pc, #424]	; (8008fec <__ieee754_rem_pio2+0x32c>)
 8008e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e48:	4543      	cmp	r3, r8
 8008e4a:	d006      	beq.n	8008e5a <__ieee754_rem_pio2+0x19a>
 8008e4c:	4632      	mov	r2, r6
 8008e4e:	463b      	mov	r3, r7
 8008e50:	4650      	mov	r0, sl
 8008e52:	4659      	mov	r1, fp
 8008e54:	f7f7 f9c4 	bl	80001e0 <__aeabi_dsub>
 8008e58:	e00e      	b.n	8008e78 <__ieee754_rem_pio2+0x1b8>
 8008e5a:	4632      	mov	r2, r6
 8008e5c:	463b      	mov	r3, r7
 8008e5e:	4650      	mov	r0, sl
 8008e60:	4659      	mov	r1, fp
 8008e62:	f7f7 f9bd 	bl	80001e0 <__aeabi_dsub>
 8008e66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008e6a:	9305      	str	r3, [sp, #20]
 8008e6c:	9a05      	ldr	r2, [sp, #20]
 8008e6e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008e72:	1ad3      	subs	r3, r2, r3
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	dc02      	bgt.n	8008e7e <__ieee754_rem_pio2+0x1be>
 8008e78:	e9c4 0100 	strd	r0, r1, [r4]
 8008e7c:	e039      	b.n	8008ef2 <__ieee754_rem_pio2+0x232>
 8008e7e:	a34c      	add	r3, pc, #304	; (adr r3, 8008fb0 <__ieee754_rem_pio2+0x2f0>)
 8008e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e88:	f7f7 fb62 	bl	8000550 <__aeabi_dmul>
 8008e8c:	4606      	mov	r6, r0
 8008e8e:	460f      	mov	r7, r1
 8008e90:	4602      	mov	r2, r0
 8008e92:	460b      	mov	r3, r1
 8008e94:	4650      	mov	r0, sl
 8008e96:	4659      	mov	r1, fp
 8008e98:	f7f7 f9a2 	bl	80001e0 <__aeabi_dsub>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	460b      	mov	r3, r1
 8008ea0:	4680      	mov	r8, r0
 8008ea2:	4689      	mov	r9, r1
 8008ea4:	4650      	mov	r0, sl
 8008ea6:	4659      	mov	r1, fp
 8008ea8:	f7f7 f99a 	bl	80001e0 <__aeabi_dsub>
 8008eac:	4632      	mov	r2, r6
 8008eae:	463b      	mov	r3, r7
 8008eb0:	f7f7 f996 	bl	80001e0 <__aeabi_dsub>
 8008eb4:	a340      	add	r3, pc, #256	; (adr r3, 8008fb8 <__ieee754_rem_pio2+0x2f8>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	4606      	mov	r6, r0
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ec2:	f7f7 fb45 	bl	8000550 <__aeabi_dmul>
 8008ec6:	4632      	mov	r2, r6
 8008ec8:	463b      	mov	r3, r7
 8008eca:	f7f7 f989 	bl	80001e0 <__aeabi_dsub>
 8008ece:	4602      	mov	r2, r0
 8008ed0:	460b      	mov	r3, r1
 8008ed2:	4606      	mov	r6, r0
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	4640      	mov	r0, r8
 8008ed8:	4649      	mov	r1, r9
 8008eda:	f7f7 f981 	bl	80001e0 <__aeabi_dsub>
 8008ede:	9a05      	ldr	r2, [sp, #20]
 8008ee0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	2b31      	cmp	r3, #49	; 0x31
 8008ee8:	dc20      	bgt.n	8008f2c <__ieee754_rem_pio2+0x26c>
 8008eea:	e9c4 0100 	strd	r0, r1, [r4]
 8008eee:	46c2      	mov	sl, r8
 8008ef0:	46cb      	mov	fp, r9
 8008ef2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008ef6:	4650      	mov	r0, sl
 8008ef8:	4642      	mov	r2, r8
 8008efa:	464b      	mov	r3, r9
 8008efc:	4659      	mov	r1, fp
 8008efe:	f7f7 f96f 	bl	80001e0 <__aeabi_dsub>
 8008f02:	463b      	mov	r3, r7
 8008f04:	4632      	mov	r2, r6
 8008f06:	f7f7 f96b 	bl	80001e0 <__aeabi_dsub>
 8008f0a:	9b04      	ldr	r3, [sp, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f12:	f6bf af11 	bge.w	8008d38 <__ieee754_rem_pio2+0x78>
 8008f16:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008f1a:	6063      	str	r3, [r4, #4]
 8008f1c:	f8c4 8000 	str.w	r8, [r4]
 8008f20:	60a0      	str	r0, [r4, #8]
 8008f22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f26:	60e3      	str	r3, [r4, #12]
 8008f28:	426d      	negs	r5, r5
 8008f2a:	e705      	b.n	8008d38 <__ieee754_rem_pio2+0x78>
 8008f2c:	a326      	add	r3, pc, #152	; (adr r3, 8008fc8 <__ieee754_rem_pio2+0x308>)
 8008f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f36:	f7f7 fb0b 	bl	8000550 <__aeabi_dmul>
 8008f3a:	4606      	mov	r6, r0
 8008f3c:	460f      	mov	r7, r1
 8008f3e:	4602      	mov	r2, r0
 8008f40:	460b      	mov	r3, r1
 8008f42:	4640      	mov	r0, r8
 8008f44:	4649      	mov	r1, r9
 8008f46:	f7f7 f94b 	bl	80001e0 <__aeabi_dsub>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4682      	mov	sl, r0
 8008f50:	468b      	mov	fp, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 f943 	bl	80001e0 <__aeabi_dsub>
 8008f5a:	4632      	mov	r2, r6
 8008f5c:	463b      	mov	r3, r7
 8008f5e:	f7f7 f93f 	bl	80001e0 <__aeabi_dsub>
 8008f62:	a31b      	add	r3, pc, #108	; (adr r3, 8008fd0 <__ieee754_rem_pio2+0x310>)
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	4606      	mov	r6, r0
 8008f6a:	460f      	mov	r7, r1
 8008f6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f70:	f7f7 faee 	bl	8000550 <__aeabi_dmul>
 8008f74:	4632      	mov	r2, r6
 8008f76:	463b      	mov	r3, r7
 8008f78:	f7f7 f932 	bl	80001e0 <__aeabi_dsub>
 8008f7c:	4606      	mov	r6, r0
 8008f7e:	460f      	mov	r7, r1
 8008f80:	e764      	b.n	8008e4c <__ieee754_rem_pio2+0x18c>
 8008f82:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <__ieee754_rem_pio2+0x330>)
 8008f84:	4598      	cmp	r8, r3
 8008f86:	dd35      	ble.n	8008ff4 <__ieee754_rem_pio2+0x334>
 8008f88:	ee10 2a10 	vmov	r2, s0
 8008f8c:	463b      	mov	r3, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	4639      	mov	r1, r7
 8008f92:	f7f7 f925 	bl	80001e0 <__aeabi_dsub>
 8008f96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008f9a:	e9c4 0100 	strd	r0, r1, [r4]
 8008f9e:	e6a1      	b.n	8008ce4 <__ieee754_rem_pio2+0x24>
 8008fa0:	54400000 	.word	0x54400000
 8008fa4:	3ff921fb 	.word	0x3ff921fb
 8008fa8:	1a626331 	.word	0x1a626331
 8008fac:	3dd0b461 	.word	0x3dd0b461
 8008fb0:	1a600000 	.word	0x1a600000
 8008fb4:	3dd0b461 	.word	0x3dd0b461
 8008fb8:	2e037073 	.word	0x2e037073
 8008fbc:	3ba3198a 	.word	0x3ba3198a
 8008fc0:	6dc9c883 	.word	0x6dc9c883
 8008fc4:	3fe45f30 	.word	0x3fe45f30
 8008fc8:	2e000000 	.word	0x2e000000
 8008fcc:	3ba3198a 	.word	0x3ba3198a
 8008fd0:	252049c1 	.word	0x252049c1
 8008fd4:	397b839a 	.word	0x397b839a
 8008fd8:	3fe921fb 	.word	0x3fe921fb
 8008fdc:	4002d97b 	.word	0x4002d97b
 8008fe0:	3ff921fb 	.word	0x3ff921fb
 8008fe4:	413921fb 	.word	0x413921fb
 8008fe8:	3fe00000 	.word	0x3fe00000
 8008fec:	08009d28 	.word	0x08009d28
 8008ff0:	7fefffff 	.word	0x7fefffff
 8008ff4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008ff8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008ffc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009000:	4630      	mov	r0, r6
 8009002:	460f      	mov	r7, r1
 8009004:	f7f7 fd3e 	bl	8000a84 <__aeabi_d2iz>
 8009008:	f7f7 fa38 	bl	800047c <__aeabi_i2d>
 800900c:	4602      	mov	r2, r0
 800900e:	460b      	mov	r3, r1
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009018:	f7f7 f8e2 	bl	80001e0 <__aeabi_dsub>
 800901c:	2200      	movs	r2, #0
 800901e:	4b1f      	ldr	r3, [pc, #124]	; (800909c <__ieee754_rem_pio2+0x3dc>)
 8009020:	f7f7 fa96 	bl	8000550 <__aeabi_dmul>
 8009024:	460f      	mov	r7, r1
 8009026:	4606      	mov	r6, r0
 8009028:	f7f7 fd2c 	bl	8000a84 <__aeabi_d2iz>
 800902c:	f7f7 fa26 	bl	800047c <__aeabi_i2d>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	4630      	mov	r0, r6
 8009036:	4639      	mov	r1, r7
 8009038:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800903c:	f7f7 f8d0 	bl	80001e0 <__aeabi_dsub>
 8009040:	2200      	movs	r2, #0
 8009042:	4b16      	ldr	r3, [pc, #88]	; (800909c <__ieee754_rem_pio2+0x3dc>)
 8009044:	f7f7 fa84 	bl	8000550 <__aeabi_dmul>
 8009048:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800904c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009050:	f04f 0803 	mov.w	r8, #3
 8009054:	2600      	movs	r6, #0
 8009056:	2700      	movs	r7, #0
 8009058:	4632      	mov	r2, r6
 800905a:	463b      	mov	r3, r7
 800905c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009060:	f108 3aff 	add.w	sl, r8, #4294967295
 8009064:	f7f7 fcdc 	bl	8000a20 <__aeabi_dcmpeq>
 8009068:	b9b0      	cbnz	r0, 8009098 <__ieee754_rem_pio2+0x3d8>
 800906a:	4b0d      	ldr	r3, [pc, #52]	; (80090a0 <__ieee754_rem_pio2+0x3e0>)
 800906c:	9301      	str	r3, [sp, #4]
 800906e:	2302      	movs	r3, #2
 8009070:	9300      	str	r3, [sp, #0]
 8009072:	462a      	mov	r2, r5
 8009074:	4643      	mov	r3, r8
 8009076:	4621      	mov	r1, r4
 8009078:	a806      	add	r0, sp, #24
 800907a:	f000 f8dd 	bl	8009238 <__kernel_rem_pio2>
 800907e:	9b04      	ldr	r3, [sp, #16]
 8009080:	2b00      	cmp	r3, #0
 8009082:	4605      	mov	r5, r0
 8009084:	f6bf ae58 	bge.w	8008d38 <__ieee754_rem_pio2+0x78>
 8009088:	6863      	ldr	r3, [r4, #4]
 800908a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800908e:	6063      	str	r3, [r4, #4]
 8009090:	68e3      	ldr	r3, [r4, #12]
 8009092:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009096:	e746      	b.n	8008f26 <__ieee754_rem_pio2+0x266>
 8009098:	46d0      	mov	r8, sl
 800909a:	e7dd      	b.n	8009058 <__ieee754_rem_pio2+0x398>
 800909c:	41700000 	.word	0x41700000
 80090a0:	08009da8 	.word	0x08009da8
 80090a4:	00000000 	.word	0x00000000

080090a8 <__kernel_cos>:
 80090a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	ec59 8b10 	vmov	r8, r9, d0
 80090b0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80090b4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80090b8:	ed2d 8b02 	vpush	{d8}
 80090bc:	eeb0 8a41 	vmov.f32	s16, s2
 80090c0:	eef0 8a61 	vmov.f32	s17, s3
 80090c4:	da07      	bge.n	80090d6 <__kernel_cos+0x2e>
 80090c6:	ee10 0a10 	vmov	r0, s0
 80090ca:	4649      	mov	r1, r9
 80090cc:	f7f7 fcda 	bl	8000a84 <__aeabi_d2iz>
 80090d0:	2800      	cmp	r0, #0
 80090d2:	f000 8089 	beq.w	80091e8 <__kernel_cos+0x140>
 80090d6:	4642      	mov	r2, r8
 80090d8:	464b      	mov	r3, r9
 80090da:	4640      	mov	r0, r8
 80090dc:	4649      	mov	r1, r9
 80090de:	f7f7 fa37 	bl	8000550 <__aeabi_dmul>
 80090e2:	2200      	movs	r2, #0
 80090e4:	4b4e      	ldr	r3, [pc, #312]	; (8009220 <__kernel_cos+0x178>)
 80090e6:	4604      	mov	r4, r0
 80090e8:	460d      	mov	r5, r1
 80090ea:	f7f7 fa31 	bl	8000550 <__aeabi_dmul>
 80090ee:	a340      	add	r3, pc, #256	; (adr r3, 80091f0 <__kernel_cos+0x148>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	4682      	mov	sl, r0
 80090f6:	468b      	mov	fp, r1
 80090f8:	4620      	mov	r0, r4
 80090fa:	4629      	mov	r1, r5
 80090fc:	f7f7 fa28 	bl	8000550 <__aeabi_dmul>
 8009100:	a33d      	add	r3, pc, #244	; (adr r3, 80091f8 <__kernel_cos+0x150>)
 8009102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009106:	f7f7 f86d 	bl	80001e4 <__adddf3>
 800910a:	4622      	mov	r2, r4
 800910c:	462b      	mov	r3, r5
 800910e:	f7f7 fa1f 	bl	8000550 <__aeabi_dmul>
 8009112:	a33b      	add	r3, pc, #236	; (adr r3, 8009200 <__kernel_cos+0x158>)
 8009114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009118:	f7f7 f862 	bl	80001e0 <__aeabi_dsub>
 800911c:	4622      	mov	r2, r4
 800911e:	462b      	mov	r3, r5
 8009120:	f7f7 fa16 	bl	8000550 <__aeabi_dmul>
 8009124:	a338      	add	r3, pc, #224	; (adr r3, 8009208 <__kernel_cos+0x160>)
 8009126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912a:	f7f7 f85b 	bl	80001e4 <__adddf3>
 800912e:	4622      	mov	r2, r4
 8009130:	462b      	mov	r3, r5
 8009132:	f7f7 fa0d 	bl	8000550 <__aeabi_dmul>
 8009136:	a336      	add	r3, pc, #216	; (adr r3, 8009210 <__kernel_cos+0x168>)
 8009138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800913c:	f7f7 f850 	bl	80001e0 <__aeabi_dsub>
 8009140:	4622      	mov	r2, r4
 8009142:	462b      	mov	r3, r5
 8009144:	f7f7 fa04 	bl	8000550 <__aeabi_dmul>
 8009148:	a333      	add	r3, pc, #204	; (adr r3, 8009218 <__kernel_cos+0x170>)
 800914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914e:	f7f7 f849 	bl	80001e4 <__adddf3>
 8009152:	4622      	mov	r2, r4
 8009154:	462b      	mov	r3, r5
 8009156:	f7f7 f9fb 	bl	8000550 <__aeabi_dmul>
 800915a:	4622      	mov	r2, r4
 800915c:	462b      	mov	r3, r5
 800915e:	f7f7 f9f7 	bl	8000550 <__aeabi_dmul>
 8009162:	ec53 2b18 	vmov	r2, r3, d8
 8009166:	4604      	mov	r4, r0
 8009168:	460d      	mov	r5, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 f9ef 	bl	8000550 <__aeabi_dmul>
 8009172:	460b      	mov	r3, r1
 8009174:	4602      	mov	r2, r0
 8009176:	4629      	mov	r1, r5
 8009178:	4620      	mov	r0, r4
 800917a:	f7f7 f831 	bl	80001e0 <__aeabi_dsub>
 800917e:	4b29      	ldr	r3, [pc, #164]	; (8009224 <__kernel_cos+0x17c>)
 8009180:	429e      	cmp	r6, r3
 8009182:	4680      	mov	r8, r0
 8009184:	4689      	mov	r9, r1
 8009186:	dc11      	bgt.n	80091ac <__kernel_cos+0x104>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4650      	mov	r0, sl
 800918e:	4659      	mov	r1, fp
 8009190:	f7f7 f826 	bl	80001e0 <__aeabi_dsub>
 8009194:	460b      	mov	r3, r1
 8009196:	4924      	ldr	r1, [pc, #144]	; (8009228 <__kernel_cos+0x180>)
 8009198:	4602      	mov	r2, r0
 800919a:	2000      	movs	r0, #0
 800919c:	f7f7 f820 	bl	80001e0 <__aeabi_dsub>
 80091a0:	ecbd 8b02 	vpop	{d8}
 80091a4:	ec41 0b10 	vmov	d0, r0, r1
 80091a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ac:	4b1f      	ldr	r3, [pc, #124]	; (800922c <__kernel_cos+0x184>)
 80091ae:	491e      	ldr	r1, [pc, #120]	; (8009228 <__kernel_cos+0x180>)
 80091b0:	429e      	cmp	r6, r3
 80091b2:	bfcc      	ite	gt
 80091b4:	4d1e      	ldrgt	r5, [pc, #120]	; (8009230 <__kernel_cos+0x188>)
 80091b6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80091ba:	2400      	movs	r4, #0
 80091bc:	4622      	mov	r2, r4
 80091be:	462b      	mov	r3, r5
 80091c0:	2000      	movs	r0, #0
 80091c2:	f7f7 f80d 	bl	80001e0 <__aeabi_dsub>
 80091c6:	4622      	mov	r2, r4
 80091c8:	4606      	mov	r6, r0
 80091ca:	460f      	mov	r7, r1
 80091cc:	462b      	mov	r3, r5
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	f7f7 f805 	bl	80001e0 <__aeabi_dsub>
 80091d6:	4642      	mov	r2, r8
 80091d8:	464b      	mov	r3, r9
 80091da:	f7f7 f801 	bl	80001e0 <__aeabi_dsub>
 80091de:	4602      	mov	r2, r0
 80091e0:	460b      	mov	r3, r1
 80091e2:	4630      	mov	r0, r6
 80091e4:	4639      	mov	r1, r7
 80091e6:	e7d9      	b.n	800919c <__kernel_cos+0xf4>
 80091e8:	2000      	movs	r0, #0
 80091ea:	490f      	ldr	r1, [pc, #60]	; (8009228 <__kernel_cos+0x180>)
 80091ec:	e7d8      	b.n	80091a0 <__kernel_cos+0xf8>
 80091ee:	bf00      	nop
 80091f0:	be8838d4 	.word	0xbe8838d4
 80091f4:	bda8fae9 	.word	0xbda8fae9
 80091f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80091fc:	3e21ee9e 	.word	0x3e21ee9e
 8009200:	809c52ad 	.word	0x809c52ad
 8009204:	3e927e4f 	.word	0x3e927e4f
 8009208:	19cb1590 	.word	0x19cb1590
 800920c:	3efa01a0 	.word	0x3efa01a0
 8009210:	16c15177 	.word	0x16c15177
 8009214:	3f56c16c 	.word	0x3f56c16c
 8009218:	5555554c 	.word	0x5555554c
 800921c:	3fa55555 	.word	0x3fa55555
 8009220:	3fe00000 	.word	0x3fe00000
 8009224:	3fd33332 	.word	0x3fd33332
 8009228:	3ff00000 	.word	0x3ff00000
 800922c:	3fe90000 	.word	0x3fe90000
 8009230:	3fd20000 	.word	0x3fd20000
 8009234:	00000000 	.word	0x00000000

08009238 <__kernel_rem_pio2>:
 8009238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800923c:	ed2d 8b02 	vpush	{d8}
 8009240:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009244:	1ed4      	subs	r4, r2, #3
 8009246:	9308      	str	r3, [sp, #32]
 8009248:	9101      	str	r1, [sp, #4]
 800924a:	4bc5      	ldr	r3, [pc, #788]	; (8009560 <__kernel_rem_pio2+0x328>)
 800924c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800924e:	9009      	str	r0, [sp, #36]	; 0x24
 8009250:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009254:	9304      	str	r3, [sp, #16]
 8009256:	9b08      	ldr	r3, [sp, #32]
 8009258:	3b01      	subs	r3, #1
 800925a:	9307      	str	r3, [sp, #28]
 800925c:	2318      	movs	r3, #24
 800925e:	fb94 f4f3 	sdiv	r4, r4, r3
 8009262:	f06f 0317 	mvn.w	r3, #23
 8009266:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800926a:	fb04 3303 	mla	r3, r4, r3, r3
 800926e:	eb03 0a02 	add.w	sl, r3, r2
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	9a07      	ldr	r2, [sp, #28]
 8009276:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009550 <__kernel_rem_pio2+0x318>
 800927a:	eb03 0802 	add.w	r8, r3, r2
 800927e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009280:	1aa7      	subs	r7, r4, r2
 8009282:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009286:	ae22      	add	r6, sp, #136	; 0x88
 8009288:	2500      	movs	r5, #0
 800928a:	4545      	cmp	r5, r8
 800928c:	dd13      	ble.n	80092b6 <__kernel_rem_pio2+0x7e>
 800928e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009550 <__kernel_rem_pio2+0x318>
 8009292:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009296:	2600      	movs	r6, #0
 8009298:	9b04      	ldr	r3, [sp, #16]
 800929a:	429e      	cmp	r6, r3
 800929c:	dc32      	bgt.n	8009304 <__kernel_rem_pio2+0xcc>
 800929e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092a0:	9302      	str	r3, [sp, #8]
 80092a2:	9b08      	ldr	r3, [sp, #32]
 80092a4:	199d      	adds	r5, r3, r6
 80092a6:	ab22      	add	r3, sp, #136	; 0x88
 80092a8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80092ac:	9306      	str	r3, [sp, #24]
 80092ae:	ec59 8b18 	vmov	r8, r9, d8
 80092b2:	2700      	movs	r7, #0
 80092b4:	e01f      	b.n	80092f6 <__kernel_rem_pio2+0xbe>
 80092b6:	42ef      	cmn	r7, r5
 80092b8:	d407      	bmi.n	80092ca <__kernel_rem_pio2+0x92>
 80092ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80092be:	f7f7 f8dd 	bl	800047c <__aeabi_i2d>
 80092c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80092c6:	3501      	adds	r5, #1
 80092c8:	e7df      	b.n	800928a <__kernel_rem_pio2+0x52>
 80092ca:	ec51 0b18 	vmov	r0, r1, d8
 80092ce:	e7f8      	b.n	80092c2 <__kernel_rem_pio2+0x8a>
 80092d0:	9906      	ldr	r1, [sp, #24]
 80092d2:	9d02      	ldr	r5, [sp, #8]
 80092d4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80092d8:	9106      	str	r1, [sp, #24]
 80092da:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80092de:	9502      	str	r5, [sp, #8]
 80092e0:	f7f7 f936 	bl	8000550 <__aeabi_dmul>
 80092e4:	4602      	mov	r2, r0
 80092e6:	460b      	mov	r3, r1
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f6 ff7a 	bl	80001e4 <__adddf3>
 80092f0:	3701      	adds	r7, #1
 80092f2:	4680      	mov	r8, r0
 80092f4:	4689      	mov	r9, r1
 80092f6:	9b07      	ldr	r3, [sp, #28]
 80092f8:	429f      	cmp	r7, r3
 80092fa:	dde9      	ble.n	80092d0 <__kernel_rem_pio2+0x98>
 80092fc:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009300:	3601      	adds	r6, #1
 8009302:	e7c9      	b.n	8009298 <__kernel_rem_pio2+0x60>
 8009304:	9b04      	ldr	r3, [sp, #16]
 8009306:	aa0e      	add	r2, sp, #56	; 0x38
 8009308:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800930c:	930c      	str	r3, [sp, #48]	; 0x30
 800930e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009310:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009314:	9c04      	ldr	r4, [sp, #16]
 8009316:	930b      	str	r3, [sp, #44]	; 0x2c
 8009318:	ab9a      	add	r3, sp, #616	; 0x268
 800931a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800931e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009322:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009326:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800932a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800932e:	ab9a      	add	r3, sp, #616	; 0x268
 8009330:	445b      	add	r3, fp
 8009332:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009336:	2500      	movs	r5, #0
 8009338:	1b63      	subs	r3, r4, r5
 800933a:	2b00      	cmp	r3, #0
 800933c:	dc78      	bgt.n	8009430 <__kernel_rem_pio2+0x1f8>
 800933e:	4650      	mov	r0, sl
 8009340:	ec49 8b10 	vmov	d0, r8, r9
 8009344:	f000 fc00 	bl	8009b48 <scalbn>
 8009348:	ec57 6b10 	vmov	r6, r7, d0
 800934c:	2200      	movs	r2, #0
 800934e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009352:	ee10 0a10 	vmov	r0, s0
 8009356:	4639      	mov	r1, r7
 8009358:	f7f7 f8fa 	bl	8000550 <__aeabi_dmul>
 800935c:	ec41 0b10 	vmov	d0, r0, r1
 8009360:	f000 fb6e 	bl	8009a40 <floor>
 8009364:	2200      	movs	r2, #0
 8009366:	ec51 0b10 	vmov	r0, r1, d0
 800936a:	4b7e      	ldr	r3, [pc, #504]	; (8009564 <__kernel_rem_pio2+0x32c>)
 800936c:	f7f7 f8f0 	bl	8000550 <__aeabi_dmul>
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f6 ff32 	bl	80001e0 <__aeabi_dsub>
 800937c:	460f      	mov	r7, r1
 800937e:	4606      	mov	r6, r0
 8009380:	f7f7 fb80 	bl	8000a84 <__aeabi_d2iz>
 8009384:	9006      	str	r0, [sp, #24]
 8009386:	f7f7 f879 	bl	800047c <__aeabi_i2d>
 800938a:	4602      	mov	r2, r0
 800938c:	460b      	mov	r3, r1
 800938e:	4630      	mov	r0, r6
 8009390:	4639      	mov	r1, r7
 8009392:	f7f6 ff25 	bl	80001e0 <__aeabi_dsub>
 8009396:	f1ba 0f00 	cmp.w	sl, #0
 800939a:	4606      	mov	r6, r0
 800939c:	460f      	mov	r7, r1
 800939e:	dd6c      	ble.n	800947a <__kernel_rem_pio2+0x242>
 80093a0:	1e62      	subs	r2, r4, #1
 80093a2:	ab0e      	add	r3, sp, #56	; 0x38
 80093a4:	f1ca 0118 	rsb	r1, sl, #24
 80093a8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80093ac:	9d06      	ldr	r5, [sp, #24]
 80093ae:	fa40 f301 	asr.w	r3, r0, r1
 80093b2:	441d      	add	r5, r3
 80093b4:	408b      	lsls	r3, r1
 80093b6:	1ac0      	subs	r0, r0, r3
 80093b8:	ab0e      	add	r3, sp, #56	; 0x38
 80093ba:	9506      	str	r5, [sp, #24]
 80093bc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80093c0:	f1ca 0317 	rsb	r3, sl, #23
 80093c4:	fa40 f303 	asr.w	r3, r0, r3
 80093c8:	9302      	str	r3, [sp, #8]
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	dd62      	ble.n	8009496 <__kernel_rem_pio2+0x25e>
 80093d0:	9b06      	ldr	r3, [sp, #24]
 80093d2:	2200      	movs	r2, #0
 80093d4:	3301      	adds	r3, #1
 80093d6:	9306      	str	r3, [sp, #24]
 80093d8:	4615      	mov	r5, r2
 80093da:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80093de:	4294      	cmp	r4, r2
 80093e0:	f300 8095 	bgt.w	800950e <__kernel_rem_pio2+0x2d6>
 80093e4:	f1ba 0f00 	cmp.w	sl, #0
 80093e8:	dd07      	ble.n	80093fa <__kernel_rem_pio2+0x1c2>
 80093ea:	f1ba 0f01 	cmp.w	sl, #1
 80093ee:	f000 80a2 	beq.w	8009536 <__kernel_rem_pio2+0x2fe>
 80093f2:	f1ba 0f02 	cmp.w	sl, #2
 80093f6:	f000 80c1 	beq.w	800957c <__kernel_rem_pio2+0x344>
 80093fa:	9b02      	ldr	r3, [sp, #8]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d14a      	bne.n	8009496 <__kernel_rem_pio2+0x25e>
 8009400:	4632      	mov	r2, r6
 8009402:	463b      	mov	r3, r7
 8009404:	2000      	movs	r0, #0
 8009406:	4958      	ldr	r1, [pc, #352]	; (8009568 <__kernel_rem_pio2+0x330>)
 8009408:	f7f6 feea 	bl	80001e0 <__aeabi_dsub>
 800940c:	4606      	mov	r6, r0
 800940e:	460f      	mov	r7, r1
 8009410:	2d00      	cmp	r5, #0
 8009412:	d040      	beq.n	8009496 <__kernel_rem_pio2+0x25e>
 8009414:	4650      	mov	r0, sl
 8009416:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009558 <__kernel_rem_pio2+0x320>
 800941a:	f000 fb95 	bl	8009b48 <scalbn>
 800941e:	4630      	mov	r0, r6
 8009420:	4639      	mov	r1, r7
 8009422:	ec53 2b10 	vmov	r2, r3, d0
 8009426:	f7f6 fedb 	bl	80001e0 <__aeabi_dsub>
 800942a:	4606      	mov	r6, r0
 800942c:	460f      	mov	r7, r1
 800942e:	e032      	b.n	8009496 <__kernel_rem_pio2+0x25e>
 8009430:	2200      	movs	r2, #0
 8009432:	4b4e      	ldr	r3, [pc, #312]	; (800956c <__kernel_rem_pio2+0x334>)
 8009434:	4640      	mov	r0, r8
 8009436:	4649      	mov	r1, r9
 8009438:	f7f7 f88a 	bl	8000550 <__aeabi_dmul>
 800943c:	f7f7 fb22 	bl	8000a84 <__aeabi_d2iz>
 8009440:	f7f7 f81c 	bl	800047c <__aeabi_i2d>
 8009444:	2200      	movs	r2, #0
 8009446:	4b4a      	ldr	r3, [pc, #296]	; (8009570 <__kernel_rem_pio2+0x338>)
 8009448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800944c:	f7f7 f880 	bl	8000550 <__aeabi_dmul>
 8009450:	4602      	mov	r2, r0
 8009452:	460b      	mov	r3, r1
 8009454:	4640      	mov	r0, r8
 8009456:	4649      	mov	r1, r9
 8009458:	f7f6 fec2 	bl	80001e0 <__aeabi_dsub>
 800945c:	f7f7 fb12 	bl	8000a84 <__aeabi_d2iz>
 8009460:	ab0e      	add	r3, sp, #56	; 0x38
 8009462:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009466:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800946a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800946e:	f7f6 feb9 	bl	80001e4 <__adddf3>
 8009472:	3501      	adds	r5, #1
 8009474:	4680      	mov	r8, r0
 8009476:	4689      	mov	r9, r1
 8009478:	e75e      	b.n	8009338 <__kernel_rem_pio2+0x100>
 800947a:	d105      	bne.n	8009488 <__kernel_rem_pio2+0x250>
 800947c:	1e63      	subs	r3, r4, #1
 800947e:	aa0e      	add	r2, sp, #56	; 0x38
 8009480:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009484:	15c3      	asrs	r3, r0, #23
 8009486:	e79f      	b.n	80093c8 <__kernel_rem_pio2+0x190>
 8009488:	2200      	movs	r2, #0
 800948a:	4b3a      	ldr	r3, [pc, #232]	; (8009574 <__kernel_rem_pio2+0x33c>)
 800948c:	f7f7 fae6 	bl	8000a5c <__aeabi_dcmpge>
 8009490:	2800      	cmp	r0, #0
 8009492:	d139      	bne.n	8009508 <__kernel_rem_pio2+0x2d0>
 8009494:	9002      	str	r0, [sp, #8]
 8009496:	2200      	movs	r2, #0
 8009498:	2300      	movs	r3, #0
 800949a:	4630      	mov	r0, r6
 800949c:	4639      	mov	r1, r7
 800949e:	f7f7 fabf 	bl	8000a20 <__aeabi_dcmpeq>
 80094a2:	2800      	cmp	r0, #0
 80094a4:	f000 80c7 	beq.w	8009636 <__kernel_rem_pio2+0x3fe>
 80094a8:	1e65      	subs	r5, r4, #1
 80094aa:	462b      	mov	r3, r5
 80094ac:	2200      	movs	r2, #0
 80094ae:	9904      	ldr	r1, [sp, #16]
 80094b0:	428b      	cmp	r3, r1
 80094b2:	da6a      	bge.n	800958a <__kernel_rem_pio2+0x352>
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	f000 8088 	beq.w	80095ca <__kernel_rem_pio2+0x392>
 80094ba:	ab0e      	add	r3, sp, #56	; 0x38
 80094bc:	f1aa 0a18 	sub.w	sl, sl, #24
 80094c0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	f000 80b4 	beq.w	8009632 <__kernel_rem_pio2+0x3fa>
 80094ca:	4650      	mov	r0, sl
 80094cc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009558 <__kernel_rem_pio2+0x320>
 80094d0:	f000 fb3a 	bl	8009b48 <scalbn>
 80094d4:	00ec      	lsls	r4, r5, #3
 80094d6:	ab72      	add	r3, sp, #456	; 0x1c8
 80094d8:	191e      	adds	r6, r3, r4
 80094da:	ec59 8b10 	vmov	r8, r9, d0
 80094de:	f106 0a08 	add.w	sl, r6, #8
 80094e2:	462f      	mov	r7, r5
 80094e4:	2f00      	cmp	r7, #0
 80094e6:	f280 80df 	bge.w	80096a8 <__kernel_rem_pio2+0x470>
 80094ea:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009550 <__kernel_rem_pio2+0x318>
 80094ee:	f04f 0a00 	mov.w	sl, #0
 80094f2:	eba5 030a 	sub.w	r3, r5, sl
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f2c0 810a 	blt.w	8009710 <__kernel_rem_pio2+0x4d8>
 80094fc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009578 <__kernel_rem_pio2+0x340>
 8009500:	ec59 8b18 	vmov	r8, r9, d8
 8009504:	2700      	movs	r7, #0
 8009506:	e0f5      	b.n	80096f4 <__kernel_rem_pio2+0x4bc>
 8009508:	2302      	movs	r3, #2
 800950a:	9302      	str	r3, [sp, #8]
 800950c:	e760      	b.n	80093d0 <__kernel_rem_pio2+0x198>
 800950e:	ab0e      	add	r3, sp, #56	; 0x38
 8009510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009514:	b94d      	cbnz	r5, 800952a <__kernel_rem_pio2+0x2f2>
 8009516:	b12b      	cbz	r3, 8009524 <__kernel_rem_pio2+0x2ec>
 8009518:	a80e      	add	r0, sp, #56	; 0x38
 800951a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800951e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009522:	2301      	movs	r3, #1
 8009524:	3201      	adds	r2, #1
 8009526:	461d      	mov	r5, r3
 8009528:	e759      	b.n	80093de <__kernel_rem_pio2+0x1a6>
 800952a:	a80e      	add	r0, sp, #56	; 0x38
 800952c:	1acb      	subs	r3, r1, r3
 800952e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009532:	462b      	mov	r3, r5
 8009534:	e7f6      	b.n	8009524 <__kernel_rem_pio2+0x2ec>
 8009536:	1e62      	subs	r2, r4, #1
 8009538:	ab0e      	add	r3, sp, #56	; 0x38
 800953a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009542:	a90e      	add	r1, sp, #56	; 0x38
 8009544:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009548:	e757      	b.n	80093fa <__kernel_rem_pio2+0x1c2>
 800954a:	bf00      	nop
 800954c:	f3af 8000 	nop.w
	...
 800955c:	3ff00000 	.word	0x3ff00000
 8009560:	08009ef0 	.word	0x08009ef0
 8009564:	40200000 	.word	0x40200000
 8009568:	3ff00000 	.word	0x3ff00000
 800956c:	3e700000 	.word	0x3e700000
 8009570:	41700000 	.word	0x41700000
 8009574:	3fe00000 	.word	0x3fe00000
 8009578:	08009eb0 	.word	0x08009eb0
 800957c:	1e62      	subs	r2, r4, #1
 800957e:	ab0e      	add	r3, sp, #56	; 0x38
 8009580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009584:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009588:	e7db      	b.n	8009542 <__kernel_rem_pio2+0x30a>
 800958a:	a90e      	add	r1, sp, #56	; 0x38
 800958c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009590:	3b01      	subs	r3, #1
 8009592:	430a      	orrs	r2, r1
 8009594:	e78b      	b.n	80094ae <__kernel_rem_pio2+0x276>
 8009596:	3301      	adds	r3, #1
 8009598:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800959c:	2900      	cmp	r1, #0
 800959e:	d0fa      	beq.n	8009596 <__kernel_rem_pio2+0x35e>
 80095a0:	9a08      	ldr	r2, [sp, #32]
 80095a2:	4422      	add	r2, r4
 80095a4:	00d2      	lsls	r2, r2, #3
 80095a6:	a922      	add	r1, sp, #136	; 0x88
 80095a8:	18e3      	adds	r3, r4, r3
 80095aa:	9206      	str	r2, [sp, #24]
 80095ac:	440a      	add	r2, r1
 80095ae:	9302      	str	r3, [sp, #8]
 80095b0:	f10b 0108 	add.w	r1, fp, #8
 80095b4:	f102 0308 	add.w	r3, r2, #8
 80095b8:	1c66      	adds	r6, r4, #1
 80095ba:	910a      	str	r1, [sp, #40]	; 0x28
 80095bc:	2500      	movs	r5, #0
 80095be:	930d      	str	r3, [sp, #52]	; 0x34
 80095c0:	9b02      	ldr	r3, [sp, #8]
 80095c2:	42b3      	cmp	r3, r6
 80095c4:	da04      	bge.n	80095d0 <__kernel_rem_pio2+0x398>
 80095c6:	461c      	mov	r4, r3
 80095c8:	e6a6      	b.n	8009318 <__kernel_rem_pio2+0xe0>
 80095ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80095cc:	2301      	movs	r3, #1
 80095ce:	e7e3      	b.n	8009598 <__kernel_rem_pio2+0x360>
 80095d0:	9b06      	ldr	r3, [sp, #24]
 80095d2:	18ef      	adds	r7, r5, r3
 80095d4:	ab22      	add	r3, sp, #136	; 0x88
 80095d6:	441f      	add	r7, r3
 80095d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80095de:	f7f6 ff4d 	bl	800047c <__aeabi_i2d>
 80095e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095e4:	461c      	mov	r4, r3
 80095e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80095e8:	e9c7 0100 	strd	r0, r1, [r7]
 80095ec:	eb03 0b05 	add.w	fp, r3, r5
 80095f0:	2700      	movs	r7, #0
 80095f2:	f04f 0800 	mov.w	r8, #0
 80095f6:	f04f 0900 	mov.w	r9, #0
 80095fa:	9b07      	ldr	r3, [sp, #28]
 80095fc:	429f      	cmp	r7, r3
 80095fe:	dd08      	ble.n	8009612 <__kernel_rem_pio2+0x3da>
 8009600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009602:	aa72      	add	r2, sp, #456	; 0x1c8
 8009604:	18eb      	adds	r3, r5, r3
 8009606:	4413      	add	r3, r2
 8009608:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800960c:	3601      	adds	r6, #1
 800960e:	3508      	adds	r5, #8
 8009610:	e7d6      	b.n	80095c0 <__kernel_rem_pio2+0x388>
 8009612:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8009616:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800961a:	f7f6 ff99 	bl	8000550 <__aeabi_dmul>
 800961e:	4602      	mov	r2, r0
 8009620:	460b      	mov	r3, r1
 8009622:	4640      	mov	r0, r8
 8009624:	4649      	mov	r1, r9
 8009626:	f7f6 fddd 	bl	80001e4 <__adddf3>
 800962a:	3701      	adds	r7, #1
 800962c:	4680      	mov	r8, r0
 800962e:	4689      	mov	r9, r1
 8009630:	e7e3      	b.n	80095fa <__kernel_rem_pio2+0x3c2>
 8009632:	3d01      	subs	r5, #1
 8009634:	e741      	b.n	80094ba <__kernel_rem_pio2+0x282>
 8009636:	f1ca 0000 	rsb	r0, sl, #0
 800963a:	ec47 6b10 	vmov	d0, r6, r7
 800963e:	f000 fa83 	bl	8009b48 <scalbn>
 8009642:	ec57 6b10 	vmov	r6, r7, d0
 8009646:	2200      	movs	r2, #0
 8009648:	4b99      	ldr	r3, [pc, #612]	; (80098b0 <__kernel_rem_pio2+0x678>)
 800964a:	ee10 0a10 	vmov	r0, s0
 800964e:	4639      	mov	r1, r7
 8009650:	f7f7 fa04 	bl	8000a5c <__aeabi_dcmpge>
 8009654:	b1f8      	cbz	r0, 8009696 <__kernel_rem_pio2+0x45e>
 8009656:	2200      	movs	r2, #0
 8009658:	4b96      	ldr	r3, [pc, #600]	; (80098b4 <__kernel_rem_pio2+0x67c>)
 800965a:	4630      	mov	r0, r6
 800965c:	4639      	mov	r1, r7
 800965e:	f7f6 ff77 	bl	8000550 <__aeabi_dmul>
 8009662:	f7f7 fa0f 	bl	8000a84 <__aeabi_d2iz>
 8009666:	4680      	mov	r8, r0
 8009668:	f7f6 ff08 	bl	800047c <__aeabi_i2d>
 800966c:	2200      	movs	r2, #0
 800966e:	4b90      	ldr	r3, [pc, #576]	; (80098b0 <__kernel_rem_pio2+0x678>)
 8009670:	f7f6 ff6e 	bl	8000550 <__aeabi_dmul>
 8009674:	460b      	mov	r3, r1
 8009676:	4602      	mov	r2, r0
 8009678:	4639      	mov	r1, r7
 800967a:	4630      	mov	r0, r6
 800967c:	f7f6 fdb0 	bl	80001e0 <__aeabi_dsub>
 8009680:	f7f7 fa00 	bl	8000a84 <__aeabi_d2iz>
 8009684:	1c65      	adds	r5, r4, #1
 8009686:	ab0e      	add	r3, sp, #56	; 0x38
 8009688:	f10a 0a18 	add.w	sl, sl, #24
 800968c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009690:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8009694:	e719      	b.n	80094ca <__kernel_rem_pio2+0x292>
 8009696:	4630      	mov	r0, r6
 8009698:	4639      	mov	r1, r7
 800969a:	f7f7 f9f3 	bl	8000a84 <__aeabi_d2iz>
 800969e:	ab0e      	add	r3, sp, #56	; 0x38
 80096a0:	4625      	mov	r5, r4
 80096a2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80096a6:	e710      	b.n	80094ca <__kernel_rem_pio2+0x292>
 80096a8:	ab0e      	add	r3, sp, #56	; 0x38
 80096aa:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80096ae:	f7f6 fee5 	bl	800047c <__aeabi_i2d>
 80096b2:	4642      	mov	r2, r8
 80096b4:	464b      	mov	r3, r9
 80096b6:	f7f6 ff4b 	bl	8000550 <__aeabi_dmul>
 80096ba:	2200      	movs	r2, #0
 80096bc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80096c0:	4b7c      	ldr	r3, [pc, #496]	; (80098b4 <__kernel_rem_pio2+0x67c>)
 80096c2:	4640      	mov	r0, r8
 80096c4:	4649      	mov	r1, r9
 80096c6:	f7f6 ff43 	bl	8000550 <__aeabi_dmul>
 80096ca:	3f01      	subs	r7, #1
 80096cc:	4680      	mov	r8, r0
 80096ce:	4689      	mov	r9, r1
 80096d0:	e708      	b.n	80094e4 <__kernel_rem_pio2+0x2ac>
 80096d2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80096d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096da:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80096de:	f7f6 ff37 	bl	8000550 <__aeabi_dmul>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4640      	mov	r0, r8
 80096e8:	4649      	mov	r1, r9
 80096ea:	f7f6 fd7b 	bl	80001e4 <__adddf3>
 80096ee:	3701      	adds	r7, #1
 80096f0:	4680      	mov	r8, r0
 80096f2:	4689      	mov	r9, r1
 80096f4:	9b04      	ldr	r3, [sp, #16]
 80096f6:	429f      	cmp	r7, r3
 80096f8:	dc01      	bgt.n	80096fe <__kernel_rem_pio2+0x4c6>
 80096fa:	45ba      	cmp	sl, r7
 80096fc:	dae9      	bge.n	80096d2 <__kernel_rem_pio2+0x49a>
 80096fe:	ab4a      	add	r3, sp, #296	; 0x128
 8009700:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009704:	e9c3 8900 	strd	r8, r9, [r3]
 8009708:	f10a 0a01 	add.w	sl, sl, #1
 800970c:	3e08      	subs	r6, #8
 800970e:	e6f0      	b.n	80094f2 <__kernel_rem_pio2+0x2ba>
 8009710:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8009712:	2b03      	cmp	r3, #3
 8009714:	d85b      	bhi.n	80097ce <__kernel_rem_pio2+0x596>
 8009716:	e8df f003 	tbb	[pc, r3]
 800971a:	264a      	.short	0x264a
 800971c:	0226      	.short	0x0226
 800971e:	ab9a      	add	r3, sp, #616	; 0x268
 8009720:	441c      	add	r4, r3
 8009722:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8009726:	46a2      	mov	sl, r4
 8009728:	46ab      	mov	fp, r5
 800972a:	f1bb 0f00 	cmp.w	fp, #0
 800972e:	dc6c      	bgt.n	800980a <__kernel_rem_pio2+0x5d2>
 8009730:	46a2      	mov	sl, r4
 8009732:	46ab      	mov	fp, r5
 8009734:	f1bb 0f01 	cmp.w	fp, #1
 8009738:	f300 8086 	bgt.w	8009848 <__kernel_rem_pio2+0x610>
 800973c:	2000      	movs	r0, #0
 800973e:	2100      	movs	r1, #0
 8009740:	2d01      	cmp	r5, #1
 8009742:	f300 80a0 	bgt.w	8009886 <__kernel_rem_pio2+0x64e>
 8009746:	9b02      	ldr	r3, [sp, #8]
 8009748:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800974c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009750:	2b00      	cmp	r3, #0
 8009752:	f040 809e 	bne.w	8009892 <__kernel_rem_pio2+0x65a>
 8009756:	9b01      	ldr	r3, [sp, #4]
 8009758:	e9c3 7800 	strd	r7, r8, [r3]
 800975c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009760:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009764:	e033      	b.n	80097ce <__kernel_rem_pio2+0x596>
 8009766:	3408      	adds	r4, #8
 8009768:	ab4a      	add	r3, sp, #296	; 0x128
 800976a:	441c      	add	r4, r3
 800976c:	462e      	mov	r6, r5
 800976e:	2000      	movs	r0, #0
 8009770:	2100      	movs	r1, #0
 8009772:	2e00      	cmp	r6, #0
 8009774:	da3a      	bge.n	80097ec <__kernel_rem_pio2+0x5b4>
 8009776:	9b02      	ldr	r3, [sp, #8]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d03d      	beq.n	80097f8 <__kernel_rem_pio2+0x5c0>
 800977c:	4602      	mov	r2, r0
 800977e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009782:	9c01      	ldr	r4, [sp, #4]
 8009784:	e9c4 2300 	strd	r2, r3, [r4]
 8009788:	4602      	mov	r2, r0
 800978a:	460b      	mov	r3, r1
 800978c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009790:	f7f6 fd26 	bl	80001e0 <__aeabi_dsub>
 8009794:	ae4c      	add	r6, sp, #304	; 0x130
 8009796:	2401      	movs	r4, #1
 8009798:	42a5      	cmp	r5, r4
 800979a:	da30      	bge.n	80097fe <__kernel_rem_pio2+0x5c6>
 800979c:	9b02      	ldr	r3, [sp, #8]
 800979e:	b113      	cbz	r3, 80097a6 <__kernel_rem_pio2+0x56e>
 80097a0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097a4:	4619      	mov	r1, r3
 80097a6:	9b01      	ldr	r3, [sp, #4]
 80097a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80097ac:	e00f      	b.n	80097ce <__kernel_rem_pio2+0x596>
 80097ae:	ab9a      	add	r3, sp, #616	; 0x268
 80097b0:	441c      	add	r4, r3
 80097b2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80097b6:	2000      	movs	r0, #0
 80097b8:	2100      	movs	r1, #0
 80097ba:	2d00      	cmp	r5, #0
 80097bc:	da10      	bge.n	80097e0 <__kernel_rem_pio2+0x5a8>
 80097be:	9b02      	ldr	r3, [sp, #8]
 80097c0:	b113      	cbz	r3, 80097c8 <__kernel_rem_pio2+0x590>
 80097c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80097c6:	4619      	mov	r1, r3
 80097c8:	9b01      	ldr	r3, [sp, #4]
 80097ca:	e9c3 0100 	strd	r0, r1, [r3]
 80097ce:	9b06      	ldr	r3, [sp, #24]
 80097d0:	f003 0007 	and.w	r0, r3, #7
 80097d4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80097d8:	ecbd 8b02 	vpop	{d8}
 80097dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097e0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097e4:	f7f6 fcfe 	bl	80001e4 <__adddf3>
 80097e8:	3d01      	subs	r5, #1
 80097ea:	e7e6      	b.n	80097ba <__kernel_rem_pio2+0x582>
 80097ec:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80097f0:	f7f6 fcf8 	bl	80001e4 <__adddf3>
 80097f4:	3e01      	subs	r6, #1
 80097f6:	e7bc      	b.n	8009772 <__kernel_rem_pio2+0x53a>
 80097f8:	4602      	mov	r2, r0
 80097fa:	460b      	mov	r3, r1
 80097fc:	e7c1      	b.n	8009782 <__kernel_rem_pio2+0x54a>
 80097fe:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8009802:	f7f6 fcef 	bl	80001e4 <__adddf3>
 8009806:	3401      	adds	r4, #1
 8009808:	e7c6      	b.n	8009798 <__kernel_rem_pio2+0x560>
 800980a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800980e:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009812:	4640      	mov	r0, r8
 8009814:	ec53 2b17 	vmov	r2, r3, d7
 8009818:	4649      	mov	r1, r9
 800981a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800981e:	f7f6 fce1 	bl	80001e4 <__adddf3>
 8009822:	4602      	mov	r2, r0
 8009824:	460b      	mov	r3, r1
 8009826:	4606      	mov	r6, r0
 8009828:	460f      	mov	r7, r1
 800982a:	4640      	mov	r0, r8
 800982c:	4649      	mov	r1, r9
 800982e:	f7f6 fcd7 	bl	80001e0 <__aeabi_dsub>
 8009832:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009836:	f7f6 fcd5 	bl	80001e4 <__adddf3>
 800983a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800983e:	e9ca 0100 	strd	r0, r1, [sl]
 8009842:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8009846:	e770      	b.n	800972a <__kernel_rem_pio2+0x4f2>
 8009848:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800984c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009850:	4630      	mov	r0, r6
 8009852:	ec53 2b17 	vmov	r2, r3, d7
 8009856:	4639      	mov	r1, r7
 8009858:	ed8d 7b04 	vstr	d7, [sp, #16]
 800985c:	f7f6 fcc2 	bl	80001e4 <__adddf3>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4680      	mov	r8, r0
 8009866:	4689      	mov	r9, r1
 8009868:	4630      	mov	r0, r6
 800986a:	4639      	mov	r1, r7
 800986c:	f7f6 fcb8 	bl	80001e0 <__aeabi_dsub>
 8009870:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009874:	f7f6 fcb6 	bl	80001e4 <__adddf3>
 8009878:	f10b 3bff 	add.w	fp, fp, #4294967295
 800987c:	e9ca 0100 	strd	r0, r1, [sl]
 8009880:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8009884:	e756      	b.n	8009734 <__kernel_rem_pio2+0x4fc>
 8009886:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800988a:	f7f6 fcab 	bl	80001e4 <__adddf3>
 800988e:	3d01      	subs	r5, #1
 8009890:	e756      	b.n	8009740 <__kernel_rem_pio2+0x508>
 8009892:	9b01      	ldr	r3, [sp, #4]
 8009894:	9a01      	ldr	r2, [sp, #4]
 8009896:	601f      	str	r7, [r3, #0]
 8009898:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800989c:	605c      	str	r4, [r3, #4]
 800989e:	609d      	str	r5, [r3, #8]
 80098a0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80098a4:	60d3      	str	r3, [r2, #12]
 80098a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80098aa:	6110      	str	r0, [r2, #16]
 80098ac:	6153      	str	r3, [r2, #20]
 80098ae:	e78e      	b.n	80097ce <__kernel_rem_pio2+0x596>
 80098b0:	41700000 	.word	0x41700000
 80098b4:	3e700000 	.word	0x3e700000

080098b8 <__kernel_sin>:
 80098b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098bc:	ec55 4b10 	vmov	r4, r5, d0
 80098c0:	b085      	sub	sp, #20
 80098c2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80098c6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80098ca:	ed8d 1b00 	vstr	d1, [sp]
 80098ce:	9002      	str	r0, [sp, #8]
 80098d0:	da06      	bge.n	80098e0 <__kernel_sin+0x28>
 80098d2:	ee10 0a10 	vmov	r0, s0
 80098d6:	4629      	mov	r1, r5
 80098d8:	f7f7 f8d4 	bl	8000a84 <__aeabi_d2iz>
 80098dc:	2800      	cmp	r0, #0
 80098de:	d051      	beq.n	8009984 <__kernel_sin+0xcc>
 80098e0:	4622      	mov	r2, r4
 80098e2:	462b      	mov	r3, r5
 80098e4:	4620      	mov	r0, r4
 80098e6:	4629      	mov	r1, r5
 80098e8:	f7f6 fe32 	bl	8000550 <__aeabi_dmul>
 80098ec:	4682      	mov	sl, r0
 80098ee:	468b      	mov	fp, r1
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4620      	mov	r0, r4
 80098f6:	4629      	mov	r1, r5
 80098f8:	f7f6 fe2a 	bl	8000550 <__aeabi_dmul>
 80098fc:	a341      	add	r3, pc, #260	; (adr r3, 8009a04 <__kernel_sin+0x14c>)
 80098fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009902:	4680      	mov	r8, r0
 8009904:	4689      	mov	r9, r1
 8009906:	4650      	mov	r0, sl
 8009908:	4659      	mov	r1, fp
 800990a:	f7f6 fe21 	bl	8000550 <__aeabi_dmul>
 800990e:	a33f      	add	r3, pc, #252	; (adr r3, 8009a0c <__kernel_sin+0x154>)
 8009910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009914:	f7f6 fc64 	bl	80001e0 <__aeabi_dsub>
 8009918:	4652      	mov	r2, sl
 800991a:	465b      	mov	r3, fp
 800991c:	f7f6 fe18 	bl	8000550 <__aeabi_dmul>
 8009920:	a33c      	add	r3, pc, #240	; (adr r3, 8009a14 <__kernel_sin+0x15c>)
 8009922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009926:	f7f6 fc5d 	bl	80001e4 <__adddf3>
 800992a:	4652      	mov	r2, sl
 800992c:	465b      	mov	r3, fp
 800992e:	f7f6 fe0f 	bl	8000550 <__aeabi_dmul>
 8009932:	a33a      	add	r3, pc, #232	; (adr r3, 8009a1c <__kernel_sin+0x164>)
 8009934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009938:	f7f6 fc52 	bl	80001e0 <__aeabi_dsub>
 800993c:	4652      	mov	r2, sl
 800993e:	465b      	mov	r3, fp
 8009940:	f7f6 fe06 	bl	8000550 <__aeabi_dmul>
 8009944:	a337      	add	r3, pc, #220	; (adr r3, 8009a24 <__kernel_sin+0x16c>)
 8009946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994a:	f7f6 fc4b 	bl	80001e4 <__adddf3>
 800994e:	9b02      	ldr	r3, [sp, #8]
 8009950:	4606      	mov	r6, r0
 8009952:	460f      	mov	r7, r1
 8009954:	b9db      	cbnz	r3, 800998e <__kernel_sin+0xd6>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4650      	mov	r0, sl
 800995c:	4659      	mov	r1, fp
 800995e:	f7f6 fdf7 	bl	8000550 <__aeabi_dmul>
 8009962:	a325      	add	r3, pc, #148	; (adr r3, 80099f8 <__kernel_sin+0x140>)
 8009964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009968:	f7f6 fc3a 	bl	80001e0 <__aeabi_dsub>
 800996c:	4642      	mov	r2, r8
 800996e:	464b      	mov	r3, r9
 8009970:	f7f6 fdee 	bl	8000550 <__aeabi_dmul>
 8009974:	4602      	mov	r2, r0
 8009976:	460b      	mov	r3, r1
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fc32 	bl	80001e4 <__adddf3>
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	ec45 4b10 	vmov	d0, r4, r5
 8009988:	b005      	add	sp, #20
 800998a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800998e:	2200      	movs	r2, #0
 8009990:	4b1b      	ldr	r3, [pc, #108]	; (8009a00 <__kernel_sin+0x148>)
 8009992:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009996:	f7f6 fddb 	bl	8000550 <__aeabi_dmul>
 800999a:	4632      	mov	r2, r6
 800999c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099a0:	463b      	mov	r3, r7
 80099a2:	4640      	mov	r0, r8
 80099a4:	4649      	mov	r1, r9
 80099a6:	f7f6 fdd3 	bl	8000550 <__aeabi_dmul>
 80099aa:	4602      	mov	r2, r0
 80099ac:	460b      	mov	r3, r1
 80099ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099b2:	f7f6 fc15 	bl	80001e0 <__aeabi_dsub>
 80099b6:	4652      	mov	r2, sl
 80099b8:	465b      	mov	r3, fp
 80099ba:	f7f6 fdc9 	bl	8000550 <__aeabi_dmul>
 80099be:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099c2:	f7f6 fc0d 	bl	80001e0 <__aeabi_dsub>
 80099c6:	a30c      	add	r3, pc, #48	; (adr r3, 80099f8 <__kernel_sin+0x140>)
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	4606      	mov	r6, r0
 80099ce:	460f      	mov	r7, r1
 80099d0:	4640      	mov	r0, r8
 80099d2:	4649      	mov	r1, r9
 80099d4:	f7f6 fdbc 	bl	8000550 <__aeabi_dmul>
 80099d8:	4602      	mov	r2, r0
 80099da:	460b      	mov	r3, r1
 80099dc:	4630      	mov	r0, r6
 80099de:	4639      	mov	r1, r7
 80099e0:	f7f6 fc00 	bl	80001e4 <__adddf3>
 80099e4:	4602      	mov	r2, r0
 80099e6:	460b      	mov	r3, r1
 80099e8:	4620      	mov	r0, r4
 80099ea:	4629      	mov	r1, r5
 80099ec:	f7f6 fbf8 	bl	80001e0 <__aeabi_dsub>
 80099f0:	e7c6      	b.n	8009980 <__kernel_sin+0xc8>
 80099f2:	bf00      	nop
 80099f4:	f3af 8000 	nop.w
 80099f8:	55555549 	.word	0x55555549
 80099fc:	3fc55555 	.word	0x3fc55555
 8009a00:	3fe00000 	.word	0x3fe00000
 8009a04:	5acfd57c 	.word	0x5acfd57c
 8009a08:	3de5d93a 	.word	0x3de5d93a
 8009a0c:	8a2b9ceb 	.word	0x8a2b9ceb
 8009a10:	3e5ae5e6 	.word	0x3e5ae5e6
 8009a14:	57b1fe7d 	.word	0x57b1fe7d
 8009a18:	3ec71de3 	.word	0x3ec71de3
 8009a1c:	19c161d5 	.word	0x19c161d5
 8009a20:	3f2a01a0 	.word	0x3f2a01a0
 8009a24:	1110f8a6 	.word	0x1110f8a6
 8009a28:	3f811111 	.word	0x3f811111

08009a2c <fabs>:
 8009a2c:	ec51 0b10 	vmov	r0, r1, d0
 8009a30:	ee10 2a10 	vmov	r2, s0
 8009a34:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009a38:	ec43 2b10 	vmov	d0, r2, r3
 8009a3c:	4770      	bx	lr
	...

08009a40 <floor>:
 8009a40:	ec51 0b10 	vmov	r0, r1, d0
 8009a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a48:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009a4c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009a50:	2e13      	cmp	r6, #19
 8009a52:	460c      	mov	r4, r1
 8009a54:	ee10 5a10 	vmov	r5, s0
 8009a58:	4680      	mov	r8, r0
 8009a5a:	dc34      	bgt.n	8009ac6 <floor+0x86>
 8009a5c:	2e00      	cmp	r6, #0
 8009a5e:	da16      	bge.n	8009a8e <floor+0x4e>
 8009a60:	a335      	add	r3, pc, #212	; (adr r3, 8009b38 <floor+0xf8>)
 8009a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a66:	f7f6 fbbd 	bl	80001e4 <__adddf3>
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	f7f6 ffff 	bl	8000a70 <__aeabi_dcmpgt>
 8009a72:	b148      	cbz	r0, 8009a88 <floor+0x48>
 8009a74:	2c00      	cmp	r4, #0
 8009a76:	da59      	bge.n	8009b2c <floor+0xec>
 8009a78:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009a7c:	4a30      	ldr	r2, [pc, #192]	; (8009b40 <floor+0x100>)
 8009a7e:	432b      	orrs	r3, r5
 8009a80:	2500      	movs	r5, #0
 8009a82:	42ab      	cmp	r3, r5
 8009a84:	bf18      	it	ne
 8009a86:	4614      	movne	r4, r2
 8009a88:	4621      	mov	r1, r4
 8009a8a:	4628      	mov	r0, r5
 8009a8c:	e025      	b.n	8009ada <floor+0x9a>
 8009a8e:	4f2d      	ldr	r7, [pc, #180]	; (8009b44 <floor+0x104>)
 8009a90:	4137      	asrs	r7, r6
 8009a92:	ea01 0307 	and.w	r3, r1, r7
 8009a96:	4303      	orrs	r3, r0
 8009a98:	d01f      	beq.n	8009ada <floor+0x9a>
 8009a9a:	a327      	add	r3, pc, #156	; (adr r3, 8009b38 <floor+0xf8>)
 8009a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa0:	f7f6 fba0 	bl	80001e4 <__adddf3>
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	f7f6 ffe2 	bl	8000a70 <__aeabi_dcmpgt>
 8009aac:	2800      	cmp	r0, #0
 8009aae:	d0eb      	beq.n	8009a88 <floor+0x48>
 8009ab0:	2c00      	cmp	r4, #0
 8009ab2:	bfbe      	ittt	lt
 8009ab4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ab8:	fa43 f606 	asrlt.w	r6, r3, r6
 8009abc:	19a4      	addlt	r4, r4, r6
 8009abe:	ea24 0407 	bic.w	r4, r4, r7
 8009ac2:	2500      	movs	r5, #0
 8009ac4:	e7e0      	b.n	8009a88 <floor+0x48>
 8009ac6:	2e33      	cmp	r6, #51	; 0x33
 8009ac8:	dd0b      	ble.n	8009ae2 <floor+0xa2>
 8009aca:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ace:	d104      	bne.n	8009ada <floor+0x9a>
 8009ad0:	ee10 2a10 	vmov	r2, s0
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	f7f6 fb85 	bl	80001e4 <__adddf3>
 8009ada:	ec41 0b10 	vmov	d0, r0, r1
 8009ade:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ae2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8009aea:	fa23 f707 	lsr.w	r7, r3, r7
 8009aee:	4207      	tst	r7, r0
 8009af0:	d0f3      	beq.n	8009ada <floor+0x9a>
 8009af2:	a311      	add	r3, pc, #68	; (adr r3, 8009b38 <floor+0xf8>)
 8009af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af8:	f7f6 fb74 	bl	80001e4 <__adddf3>
 8009afc:	2200      	movs	r2, #0
 8009afe:	2300      	movs	r3, #0
 8009b00:	f7f6 ffb6 	bl	8000a70 <__aeabi_dcmpgt>
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d0bf      	beq.n	8009a88 <floor+0x48>
 8009b08:	2c00      	cmp	r4, #0
 8009b0a:	da02      	bge.n	8009b12 <floor+0xd2>
 8009b0c:	2e14      	cmp	r6, #20
 8009b0e:	d103      	bne.n	8009b18 <floor+0xd8>
 8009b10:	3401      	adds	r4, #1
 8009b12:	ea25 0507 	bic.w	r5, r5, r7
 8009b16:	e7b7      	b.n	8009a88 <floor+0x48>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009b1e:	fa03 f606 	lsl.w	r6, r3, r6
 8009b22:	4435      	add	r5, r6
 8009b24:	4545      	cmp	r5, r8
 8009b26:	bf38      	it	cc
 8009b28:	18e4      	addcc	r4, r4, r3
 8009b2a:	e7f2      	b.n	8009b12 <floor+0xd2>
 8009b2c:	2500      	movs	r5, #0
 8009b2e:	462c      	mov	r4, r5
 8009b30:	e7aa      	b.n	8009a88 <floor+0x48>
 8009b32:	bf00      	nop
 8009b34:	f3af 8000 	nop.w
 8009b38:	8800759c 	.word	0x8800759c
 8009b3c:	7e37e43c 	.word	0x7e37e43c
 8009b40:	bff00000 	.word	0xbff00000
 8009b44:	000fffff 	.word	0x000fffff

08009b48 <scalbn>:
 8009b48:	b570      	push	{r4, r5, r6, lr}
 8009b4a:	ec55 4b10 	vmov	r4, r5, d0
 8009b4e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009b52:	4606      	mov	r6, r0
 8009b54:	462b      	mov	r3, r5
 8009b56:	b9aa      	cbnz	r2, 8009b84 <scalbn+0x3c>
 8009b58:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009b5c:	4323      	orrs	r3, r4
 8009b5e:	d03b      	beq.n	8009bd8 <scalbn+0x90>
 8009b60:	4b31      	ldr	r3, [pc, #196]	; (8009c28 <scalbn+0xe0>)
 8009b62:	4629      	mov	r1, r5
 8009b64:	2200      	movs	r2, #0
 8009b66:	ee10 0a10 	vmov	r0, s0
 8009b6a:	f7f6 fcf1 	bl	8000550 <__aeabi_dmul>
 8009b6e:	4b2f      	ldr	r3, [pc, #188]	; (8009c2c <scalbn+0xe4>)
 8009b70:	429e      	cmp	r6, r3
 8009b72:	4604      	mov	r4, r0
 8009b74:	460d      	mov	r5, r1
 8009b76:	da12      	bge.n	8009b9e <scalbn+0x56>
 8009b78:	a327      	add	r3, pc, #156	; (adr r3, 8009c18 <scalbn+0xd0>)
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f7f6 fce7 	bl	8000550 <__aeabi_dmul>
 8009b82:	e009      	b.n	8009b98 <scalbn+0x50>
 8009b84:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009b88:	428a      	cmp	r2, r1
 8009b8a:	d10c      	bne.n	8009ba6 <scalbn+0x5e>
 8009b8c:	ee10 2a10 	vmov	r2, s0
 8009b90:	4620      	mov	r0, r4
 8009b92:	4629      	mov	r1, r5
 8009b94:	f7f6 fb26 	bl	80001e4 <__adddf3>
 8009b98:	4604      	mov	r4, r0
 8009b9a:	460d      	mov	r5, r1
 8009b9c:	e01c      	b.n	8009bd8 <scalbn+0x90>
 8009b9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009ba2:	460b      	mov	r3, r1
 8009ba4:	3a36      	subs	r2, #54	; 0x36
 8009ba6:	4432      	add	r2, r6
 8009ba8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009bac:	428a      	cmp	r2, r1
 8009bae:	dd0b      	ble.n	8009bc8 <scalbn+0x80>
 8009bb0:	ec45 4b11 	vmov	d1, r4, r5
 8009bb4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009c20 <scalbn+0xd8>
 8009bb8:	f000 f83c 	bl	8009c34 <copysign>
 8009bbc:	a318      	add	r3, pc, #96	; (adr r3, 8009c20 <scalbn+0xd8>)
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	ec51 0b10 	vmov	r0, r1, d0
 8009bc6:	e7da      	b.n	8009b7e <scalbn+0x36>
 8009bc8:	2a00      	cmp	r2, #0
 8009bca:	dd08      	ble.n	8009bde <scalbn+0x96>
 8009bcc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009bd0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009bd4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009bd8:	ec45 4b10 	vmov	d0, r4, r5
 8009bdc:	bd70      	pop	{r4, r5, r6, pc}
 8009bde:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009be2:	da0d      	bge.n	8009c00 <scalbn+0xb8>
 8009be4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009be8:	429e      	cmp	r6, r3
 8009bea:	ec45 4b11 	vmov	d1, r4, r5
 8009bee:	dce1      	bgt.n	8009bb4 <scalbn+0x6c>
 8009bf0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009c18 <scalbn+0xd0>
 8009bf4:	f000 f81e 	bl	8009c34 <copysign>
 8009bf8:	a307      	add	r3, pc, #28	; (adr r3, 8009c18 <scalbn+0xd0>)
 8009bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bfe:	e7e0      	b.n	8009bc2 <scalbn+0x7a>
 8009c00:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009c04:	3236      	adds	r2, #54	; 0x36
 8009c06:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009c0a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009c0e:	4620      	mov	r0, r4
 8009c10:	4629      	mov	r1, r5
 8009c12:	2200      	movs	r2, #0
 8009c14:	4b06      	ldr	r3, [pc, #24]	; (8009c30 <scalbn+0xe8>)
 8009c16:	e7b2      	b.n	8009b7e <scalbn+0x36>
 8009c18:	c2f8f359 	.word	0xc2f8f359
 8009c1c:	01a56e1f 	.word	0x01a56e1f
 8009c20:	8800759c 	.word	0x8800759c
 8009c24:	7e37e43c 	.word	0x7e37e43c
 8009c28:	43500000 	.word	0x43500000
 8009c2c:	ffff3cb0 	.word	0xffff3cb0
 8009c30:	3c900000 	.word	0x3c900000

08009c34 <copysign>:
 8009c34:	ec51 0b10 	vmov	r0, r1, d0
 8009c38:	ee11 0a90 	vmov	r0, s3
 8009c3c:	ee10 2a10 	vmov	r2, s0
 8009c40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009c44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009c48:	ea41 0300 	orr.w	r3, r1, r0
 8009c4c:	ec43 2b10 	vmov	d0, r2, r3
 8009c50:	4770      	bx	lr
	...

08009c54 <_init>:
 8009c54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c56:	bf00      	nop
 8009c58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c5a:	bc08      	pop	{r3}
 8009c5c:	469e      	mov	lr, r3
 8009c5e:	4770      	bx	lr

08009c60 <_fini>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr
